(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super.

Require Import Super. (* as KyberPolynomialRingElement *)

Require Import Super.

Require Import Super. (* as BYTES_PER_RING_ELEMENT *)

Require Import Super. (* as COEFFICIENTS_IN_RING_ELEMENT *)

Require Import Super. (* as REJECTION_SAMPLING_SEED_SIZE *)

Require Import Super. (* as SHARED_SECRET_SIZE *)

Require Import Super. (* as into_padded_array *)

Require Import Super.

Require Import Super. (* as UpdatableArray *)

Require Import Super. (* as UpdatingArray *)

Require Import Super.

Require Import Super. (* as XOFx4 *)

Require Import Super. (* as G *)

Require Import Super. (* as H *)

Require Import Super. (* as PRF *)

Require Import Super.

Require Import Super.

Require Import Super. (* as sample_from_binomial_distribution *)

Require Import Super. (* as sample_from_uniform_distribution *)

Require Import Super.

Require Import Super. (* as compress_then_serialize_message *)

Require Import Super. (* as compress_then_serialize_ring_element_u *)

Require Import Super. (* as compress_then_serialize_ring_element_v *)

Require Import Super. (* as deserialize_then_decompress_message *)

Require Import Super. (* as deserialize_then_decompress_ring_element_u *)

Require Import Super. (* as deserialize_then_decompress_ring_element_v *)

Require Import Super. (* as deserialize_to_uncompressed_ring_element *)

Require Import Super. (* as serialize_uncompressed_ring_element *)

Require Import Super. (* as PrivateKey *)

Require Import Super. (* as Error *)

Require Import Super. (* as KyberPublicKey *)

Definition serialize_secret_key (private_key : seq int8) (public_key : seq int8) (implicit_rejection_value : seq int8) : nseq int8 TODO: Int.to_string length :=
  impl__array (f_push (f_push (f_push (f_push (impl__new (repeat (@repr WORDSIZE8 0) SERIALIZED_KEY_LEN)) private_key) public_key) (unsize (v_H public_key))) implicit_rejection_value).

Definition cbd (prf_input : nseq int8 TODO: Int.to_string length) : (nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length × int8) :=
  let domain_separator := ((@repr WORDSIZE8 0)) : int8 in
  let re_as_ntt := (repeat impl__KyberPolynomialRingElement__ZERO K) : nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length in
  let '(domain_separator,prf_input,re_as_ntt) := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)K)) (domain_separator,prf_input,re_as_ntt) (fun '(domain_separator,prf_input,re_as_ntt) i =>
      let prf_input := (update_at prf_input (@repr WORDSIZE32 32) domain_separator) : nseq int8 TODO: Int.to_string length in
      let domain_separator := (domain_separator.+(@repr WORDSIZE8 1)) : int8 in
      let prf_output := (v_PRF (unsize prf_input)) : nseq int8 TODO: Int.to_string length in
      let r := (sample_from_binomial_distribution (unsize prf_output)) : t_KyberPolynomialRingElement_t in
      let re_as_ntt := (update_at re_as_ntt i (ntt_binomially_sampled_ring_element r)) : nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length in
      (domain_separator,prf_input,re_as_ntt))) : (int8 × nseq int8 TODO: Int.to_string length × nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length) in
  (re_as_ntt,domain_separator).

Definition sample_matrix_A (seed : nseq int8 TODO: Int.to_string length) (transpose : bool) : (nseq nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length TODO: Int.to_string length × t_Option_t t_Error_t) :=
  let A_transpose := (repeat (repeat impl__KyberPolynomialRingElement__ZERO K) K) : nseq nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length TODO: Int.to_string length in
  let sampling_A_error := (Option_Nonet_Option_t t_Error_t) : t_Option_t t_Error_t in
  let '(A_transpose,sampling_A_error) := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)K)) (A_transpose,sampling_A_error) (fun '(A_transpose,sampling_A_error) i =>
      let seeds := (repeat seed K) : nseq nseq int8 TODO: Int.to_string length TODO: Int.to_string length in
      let seeds := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)K)) seeds (fun seeds j =>
          let seeds := (update_at seeds j (update_at (seeds.[j]) (@repr WORDSIZE32 32) (cast i))) : nseq nseq int8 TODO: Int.to_string length TODO: Int.to_string length in
          let seeds := (update_at seeds j (update_at (seeds.[j]) (@repr WORDSIZE32 33) (cast j))) : nseq nseq int8 TODO: Int.to_string length TODO: Int.to_string length in
          seeds)) : nseq nseq int8 TODO: Int.to_string length TODO: Int.to_string length in
      let xof_bytes := (v_XOFx4 seeds) : nseq nseq int8 TODO: Int.to_string length TODO: Int.to_string length in
      f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)K)) (A_transpose,sampling_A_error) (fun '(A_transpose,sampling_A_error) j =>
        let '(sampled,error) := (sample_from_uniform_distribution (xof_bytes.[j])) : (t_KyberPolynomialRingElement_t × t_Option_t t_Error_t) in
        let sampling_A_error := (if
            impl__is_some error
          then
            let sampling_A_error := (error) : t_Option_t t_Error_t in
            sampling_A_error
          else
            sampling_A_error) : t_Option_t t_Error_t in
        if
          transpose
        then
          let A_transpose := (update_at A_transpose j (update_at (A_transpose.[j]) i sampled)) : nseq nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length TODO: Int.to_string length in
          (A_transpose,sampling_A_error)
        else
          let A_transpose := (update_at A_transpose i (update_at (A_transpose.[i]) j sampled)) : nseq nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length TODO: Int.to_string length in
          (A_transpose,sampling_A_error)))) : (nseq nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length TODO: Int.to_string length × t_Option_t t_Error_t) in
  (A_transpose,sampling_A_error).

Definition compress_then_encode_u (input : nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length) : nseq int8 TODO: Int.to_string length :=
  let out := (repeat (@repr WORDSIZE8 0) OUT_LEN) : nseq int8 TODO: Int.to_string length in
  let out := (f_fold (f_into_iter (f_enumerate (f_into_iter input))) out (fun out '(i,re) =>
      update_at out (Build_Range (i.*(OUT_LEN./K))((i.+(@repr WORDSIZE32 1)).*(OUT_LEN./K))) (impl__copy_from_slice (out.[(Build_Range (i.*(OUT_LEN./K))((i.+(@repr WORDSIZE32 1)).*(OUT_LEN./K)))]) (unsize (compress_then_serialize_ring_element_u re))))) : nseq int8 TODO: Int.to_string length in
  out.

Definition serialize_key (key : nseq t_KyberPolynomialRingElement_t TODO: Int.to_string length) : nseq int8 TODO: Int.to_string length :=
  let out := (repeat (@repr WORDSIZE8 0) OUT_LEN) : nseq int8 TODO: Int.to_string length in
  let out := (f_fold (f_into_iter (f_enumerate (f_into_iter key))) out (fun out '(i,re) =>
      update_at out (Build_Range (i.*v_BYTES_PER_RING_ELEMENT)((i.+(@repr WORDSIZE32 1)).*v_BYTES_PER_RING_ELEMENT)) (impl__copy_from_slice (out.[(Build_Range (i.*v_BYTES_PER_RING_ELEMENT)((i.+(@repr WORDSIZE32 1)).*v_BYTES_PER_RING_ELEMENT))]) (unsize (serialize_uncompressed_ring_element re))))) : nseq int8 TODO: Int.to_string length in
  out.

(*item error backend*)

(*item error backend*)

(*item error backend*)
