(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super. (* as SHARED_SECRET_SIZE *)

Definition is_non_zero (value : int8) : int8 :=
  let value := (cast value) : int16 in
  let result := (((value.|(impl__u16__wrapping_add (not value) (@repr WORDSIZE16 1))) shift_right (@repr WORDSIZE32 8)).&(@repr WORDSIZE16 1)) : int16 in
  cast result.

Definition compare_ciphertexts_in_constant_time (lhs : seq int8) (rhs : seq int8) : int8 :=
  let _ := (tt) : unit in
  let _ := (tt) : unit in
  let r := ((@repr WORDSIZE8 0)) : int8 in
  let r := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)CIPHERTEXT_SIZE)) r (fun r i =>
      r.|((lhs.[i]).^(rhs.[i])))) : int8 in
  is_non_zero r.

Definition select_shared_secret_in_constant_time (lhs : seq int8) (rhs : seq int8) (selector : int8) : nseq int8 TODO: Int.to_string length :=
  let _ := (tt) : unit in
  let _ := (tt) : unit in
  let mask := (impl__u8__wrapping_sub (is_non_zero selector) (@repr WORDSIZE8 1)) : int8 in
  let out := (repeat (@repr WORDSIZE8 0) (@repr WORDSIZE32 32)) : nseq int8 TODO: Int.to_string length in
  let out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)v_SHARED_SECRET_SIZE)) out (fun out i =>
      update_at out i ((out.[i]).|(((lhs.[i]).&mask).|((rhs.[i]).&(not mask)))))) : nseq int8 TODO: Int.to_string length in
  out.
