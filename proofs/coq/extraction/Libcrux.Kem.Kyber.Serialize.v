(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super.

Require Import Super.

Require Import Super. (* as to_unsigned_representative *)

Require Import Super. (* as KyberFieldElement *)

Require Import Super. (* as KyberPolynomialRingElement *)

Require Import Super.

Require Import Super. (* as compress_q *)

Require Import Super. (* as decompress_q *)

Require Import Super.

Require Import Super. (* as BYTES_PER_RING_ELEMENT *)

Require Import Super. (* as COEFFICIENTS_IN_RING_ELEMENT *)

Require Import Super. (* as SHARED_SECRET_SIZE *)

Definition compress_then_serialize_10_ (re : t_KyberPolynomialRingElement_t) : nseq int8 TODO: Int.to_string length :=
  let serialized := (repeat (@repr WORDSIZE8 0) OUT_LEN) : nseq int8 TODO: Int.to_string length in
  let serialized := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact (unsize (f_coefficients re)) (@repr WORDSIZE32 4)))) serialized (fun serialized '(i,coefficients) =>
      let coefficient1 := (compress_q (@repr WORDSIZE8 10) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 0)]))) : int32 in
      let coefficient2 := (compress_q (@repr WORDSIZE8 10) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 1)]))) : int32 in
      let coefficient3 := (compress_q (@repr WORDSIZE8 10) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 2)]))) : int32 in
      let coefficient4 := (compress_q (@repr WORDSIZE8 10) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 3)]))) : int32 in
      let serialized := (update_at serialized ((@repr WORDSIZE32 5).*i) (cast (coefficient1.&(@repr WORDSIZE32 255)))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 5).*i).+(@repr WORDSIZE32 1)) (((cast (coefficient2.&(@repr WORDSIZE32 63))) shift_left (@repr WORDSIZE32 2)).|(cast ((coefficient1 shift_right (@repr WORDSIZE32 8)).&(@repr WORDSIZE32 3))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 5).*i).+(@repr WORDSIZE32 2)) (((cast (coefficient3.&(@repr WORDSIZE32 15))) shift_left (@repr WORDSIZE32 4)).|(cast ((coefficient2 shift_right (@repr WORDSIZE32 6)).&(@repr WORDSIZE32 15))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 5).*i).+(@repr WORDSIZE32 3)) (((cast (coefficient4.&(@repr WORDSIZE32 3))) shift_left (@repr WORDSIZE32 6)).|(cast ((coefficient3 shift_right (@repr WORDSIZE32 4)).&(@repr WORDSIZE32 63))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 5).*i).+(@repr WORDSIZE32 4)) (cast ((coefficient4 shift_right (@repr WORDSIZE32 2)).&(@repr WORDSIZE32 255)))) : nseq int8 TODO: Int.to_string length in
      serialized)) : nseq int8 TODO: Int.to_string length in
  serialized.

Definition compress_then_serialize_11_ (re : t_KyberPolynomialRingElement_t) : nseq int8 TODO: Int.to_string length :=
  let serialized := (repeat (@repr WORDSIZE8 0) OUT_LEN) : nseq int8 TODO: Int.to_string length in
  let serialized := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact (unsize (f_coefficients re)) (@repr WORDSIZE32 8)))) serialized (fun serialized '(i,coefficients) =>
      let coefficient1 := (compress_q (@repr WORDSIZE8 11) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 0)]))) : int32 in
      let coefficient2 := (compress_q (@repr WORDSIZE8 11) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 1)]))) : int32 in
      let coefficient3 := (compress_q (@repr WORDSIZE8 11) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 2)]))) : int32 in
      let coefficient4 := (compress_q (@repr WORDSIZE8 11) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 3)]))) : int32 in
      let coefficient5 := (compress_q (@repr WORDSIZE8 11) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 4)]))) : int32 in
      let coefficient6 := (compress_q (@repr WORDSIZE8 11) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 5)]))) : int32 in
      let coefficient7 := (compress_q (@repr WORDSIZE8 11) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 6)]))) : int32 in
      let coefficient8 := (compress_q (@repr WORDSIZE8 11) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 7)]))) : int32 in
      let serialized := (update_at serialized ((@repr WORDSIZE32 11).*i) (cast coefficient1)) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 1)) (((cast (coefficient2.&(@repr WORDSIZE32 31))) shift_left (@repr WORDSIZE32 3)).|(cast (coefficient1 shift_right (@repr WORDSIZE32 8))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 2)) (((cast (coefficient3.&(@repr WORDSIZE32 3))) shift_left (@repr WORDSIZE32 6)).|(cast (coefficient2 shift_right (@repr WORDSIZE32 5))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 3)) (cast ((coefficient3 shift_right (@repr WORDSIZE32 2)).&(@repr WORDSIZE32 255)))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 4)) (((cast (coefficient4.&(@repr WORDSIZE32 127))) shift_left (@repr WORDSIZE32 1)).|(cast (coefficient3 shift_right (@repr WORDSIZE32 10))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 5)) (((cast (coefficient5.&(@repr WORDSIZE32 15))) shift_left (@repr WORDSIZE32 4)).|(cast (coefficient4 shift_right (@repr WORDSIZE32 7))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 6)) (((cast (coefficient6.&(@repr WORDSIZE32 1))) shift_left (@repr WORDSIZE32 7)).|(cast (coefficient5 shift_right (@repr WORDSIZE32 4))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 7)) (cast ((coefficient6 shift_right (@repr WORDSIZE32 1)).&(@repr WORDSIZE32 255)))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 8)) (((cast (coefficient7.&(@repr WORDSIZE32 63))) shift_left (@repr WORDSIZE32 2)).|(cast (coefficient6 shift_right (@repr WORDSIZE32 9))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 9)) (((cast (coefficient8.&(@repr WORDSIZE32 7))) shift_left (@repr WORDSIZE32 5)).|(cast (coefficient7 shift_right (@repr WORDSIZE32 6))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 11).*i).+(@repr WORDSIZE32 10)) (cast (coefficient8 shift_right (@repr WORDSIZE32 3)))) : nseq int8 TODO: Int.to_string length in
      serialized)) : nseq int8 TODO: Int.to_string length in
  serialized.

Definition compress_then_serialize_4_ (re : t_KyberPolynomialRingElement_t) : nseq int8 TODO: Int.to_string length :=
  let serialized := (repeat (@repr WORDSIZE8 0) OUT_LEN) : nseq int8 TODO: Int.to_string length in
  let serialized := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact (unsize (f_coefficients re)) (@repr WORDSIZE32 2)))) serialized (fun serialized '(i,coefficients) =>
      let coefficient1 := (cast (compress_q (@repr WORDSIZE8 4) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 0)])))) : int8 in
      let coefficient2 := (cast (compress_q (@repr WORDSIZE8 4) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 1)])))) : int8 in
      let serialized := (update_at serialized i ((coefficient2 shift_left (@repr WORDSIZE32 4)).|coefficient1)) : nseq int8 TODO: Int.to_string length in
      serialized)) : nseq int8 TODO: Int.to_string length in
  serialized.

Definition compress_then_serialize_5_ (re : t_KyberPolynomialRingElement_t) : nseq int8 TODO: Int.to_string length :=
  let serialized := (repeat (@repr WORDSIZE8 0) OUT_LEN) : nseq int8 TODO: Int.to_string length in
  let serialized := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact (unsize (f_coefficients re)) (@repr WORDSIZE32 8)))) serialized (fun serialized '(i,coefficients) =>
      let coefficient1 := (cast (compress_q (@repr WORDSIZE8 5) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 0)])))) : int8 in
      let coefficient2 := (cast (compress_q (@repr WORDSIZE8 5) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 1)])))) : int8 in
      let coefficient3 := (cast (compress_q (@repr WORDSIZE8 5) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 2)])))) : int8 in
      let coefficient4 := (cast (compress_q (@repr WORDSIZE8 5) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 3)])))) : int8 in
      let coefficient5 := (cast (compress_q (@repr WORDSIZE8 5) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 4)])))) : int8 in
      let coefficient6 := (cast (compress_q (@repr WORDSIZE8 5) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 5)])))) : int8 in
      let coefficient7 := (cast (compress_q (@repr WORDSIZE8 5) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 6)])))) : int8 in
      let coefficient8 := (cast (compress_q (@repr WORDSIZE8 5) (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 7)])))) : int8 in
      let serialized := (update_at serialized ((@repr WORDSIZE32 5).*i) (((coefficient2.&(@repr WORDSIZE8 7)) shift_left (@repr WORDSIZE32 5)).|coefficient1)) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 5).*i).+(@repr WORDSIZE32 1)) ((((coefficient4.&(@repr WORDSIZE8 1)) shift_left (@repr WORDSIZE32 7)).|(coefficient3 shift_left (@repr WORDSIZE32 2))).|(coefficient2 shift_right (@repr WORDSIZE32 3)))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 5).*i).+(@repr WORDSIZE32 2)) (((coefficient5.&(@repr WORDSIZE8 15)) shift_left (@repr WORDSIZE32 4)).|(coefficient4 shift_right (@repr WORDSIZE32 1)))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 5).*i).+(@repr WORDSIZE32 3)) ((((coefficient7.&(@repr WORDSIZE8 3)) shift_left (@repr WORDSIZE32 6)).|(coefficient6 shift_left (@repr WORDSIZE32 1))).|(coefficient5 shift_right (@repr WORDSIZE32 4)))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 5).*i).+(@repr WORDSIZE32 4)) ((coefficient8 shift_left (@repr WORDSIZE32 3)).|(coefficient7 shift_right (@repr WORDSIZE32 2)))) : nseq int8 TODO: Int.to_string length in
      serialized)) : nseq int8 TODO: Int.to_string length in
  serialized.

Definition compress_then_serialize_message (re : t_KyberPolynomialRingElement_t) : nseq int8 TODO: Int.to_string length :=
  let serialized := (repeat (@repr WORDSIZE8 0) (@repr WORDSIZE32 32)) : nseq int8 TODO: Int.to_string length in
  let serialized := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact (unsize (f_coefficients re)) (@repr WORDSIZE32 8)))) serialized (fun serialized '(i,coefficients) =>
      f_fold (f_into_iter (f_enumerate (impl__iter coefficients))) serialized (fun serialized '(j,coefficient) =>
        let coefficient := (to_unsigned_representative coefficient) : int16 in
        let coefficient_compressed := (compress_q (@repr WORDSIZE8 1) coefficient) : int32 in
        update_at serialized i ((serialized.[i]).|((cast coefficient_compressed) shift_left j))))) : nseq int8 TODO: Int.to_string length in
  serialized.

Definition compress_then_serialize_ring_element_u (re : t_KyberPolynomialRingElement_t) : nseq int8 TODO: Int.to_string length :=
  let _ := (tt) : unit in
  match cast COMPRESSION_FACTOR with
  | (@repr WORDSIZE32 10) => compress_then_serialize_10_ re
  | (@repr WORDSIZE32 11) => compress_then_serialize_11_ re
  | _ => never_to_any (panic internal error: entered unreachable code)
  end.

Definition compress_then_serialize_ring_element_v (re : t_KyberPolynomialRingElement_t) : nseq int8 TODO: Int.to_string length :=
  let _ := (tt) : unit in
  match cast COMPRESSION_FACTOR with
  | (@repr WORDSIZE32 4) => compress_then_serialize_4_ re
  | (@repr WORDSIZE32 5) => compress_then_serialize_5_ re
  | _ => never_to_any (panic internal error: entered unreachable code)
  end.

Definition deserialize_then_decompress_10_ (serialized : seq int8) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  let re := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let re := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact serialized (@repr WORDSIZE32 5)))) re (fun re '(i,bytes) =>
      let byte1 := (cast (bytes.[(@repr WORDSIZE32 0)])) : int32 in
      let byte2 := (cast (bytes.[(@repr WORDSIZE32 1)])) : int32 in
      let byte3 := (cast (bytes.[(@repr WORDSIZE32 2)])) : int32 in
      let byte4 := (cast (bytes.[(@repr WORDSIZE32 3)])) : int32 in
      let byte5 := (cast (bytes.[(@repr WORDSIZE32 4)])) : int32 in
      let coefficient1 := (((byte2.&(@repr WORDSIZE32 3)) shift_left (@repr WORDSIZE32 8)).|(byte1.&(@repr WORDSIZE32 255))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) ((@repr WORDSIZE32 4).*i) (decompress_q (@repr WORDSIZE8 10) coefficient1))) : t_KyberPolynomialRingElement_t in
      let coefficient2 := (((byte3.&(@repr WORDSIZE32 15)) shift_left (@repr WORDSIZE32 6)).|(byte2 shift_right (@repr WORDSIZE32 2))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 4).*i).+(@repr WORDSIZE32 1)) (decompress_q (@repr WORDSIZE8 10) coefficient2))) : t_KyberPolynomialRingElement_t in
      let coefficient3 := (((byte4.&(@repr WORDSIZE32 63)) shift_left (@repr WORDSIZE32 4)).|(byte3 shift_right (@repr WORDSIZE32 4))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 4).*i).+(@repr WORDSIZE32 2)) (decompress_q (@repr WORDSIZE8 10) coefficient3))) : t_KyberPolynomialRingElement_t in
      let coefficient4 := ((byte5 shift_left (@repr WORDSIZE32 2)).|(byte4 shift_right (@repr WORDSIZE32 6))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 4).*i).+(@repr WORDSIZE32 3)) (decompress_q (@repr WORDSIZE8 10) coefficient4))) : t_KyberPolynomialRingElement_t in
      re)) : t_KyberPolynomialRingElement_t in
  re.

Definition deserialize_then_decompress_11_ (serialized : seq int8) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  let re := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let re := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact serialized (@repr WORDSIZE32 11)))) re (fun re '(i,bytes) =>
      let byte1 := (cast (bytes.[(@repr WORDSIZE32 0)])) : int32 in
      let byte2 := (cast (bytes.[(@repr WORDSIZE32 1)])) : int32 in
      let byte3 := (cast (bytes.[(@repr WORDSIZE32 2)])) : int32 in
      let byte4 := (cast (bytes.[(@repr WORDSIZE32 3)])) : int32 in
      let byte5 := (cast (bytes.[(@repr WORDSIZE32 4)])) : int32 in
      let byte6 := (cast (bytes.[(@repr WORDSIZE32 5)])) : int32 in
      let byte7 := (cast (bytes.[(@repr WORDSIZE32 6)])) : int32 in
      let byte8 := (cast (bytes.[(@repr WORDSIZE32 7)])) : int32 in
      let byte9 := (cast (bytes.[(@repr WORDSIZE32 8)])) : int32 in
      let byte10 := (cast (bytes.[(@repr WORDSIZE32 9)])) : int32 in
      let byte11 := (cast (bytes.[(@repr WORDSIZE32 10)])) : int32 in
      let coefficient1 := (((byte2.&(@repr WORDSIZE32 7)) shift_left (@repr WORDSIZE32 8)).|byte1) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) ((@repr WORDSIZE32 8).*i) (decompress_q (@repr WORDSIZE8 11) coefficient1))) : t_KyberPolynomialRingElement_t in
      let coefficient2 := (((byte3.&(@repr WORDSIZE32 63)) shift_left (@repr WORDSIZE32 5)).|(byte2 shift_right (@repr WORDSIZE32 3))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 1)) (decompress_q (@repr WORDSIZE8 11) coefficient2))) : t_KyberPolynomialRingElement_t in
      let coefficient3 := ((((byte5.&(@repr WORDSIZE32 1)) shift_left (@repr WORDSIZE32 10)).|(byte4 shift_left (@repr WORDSIZE32 2))).|(byte3 shift_right (@repr WORDSIZE32 6))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 2)) (decompress_q (@repr WORDSIZE8 11) coefficient3))) : t_KyberPolynomialRingElement_t in
      let coefficient4 := (((byte6.&(@repr WORDSIZE32 15)) shift_left (@repr WORDSIZE32 7)).|(byte5 shift_right (@repr WORDSIZE32 1))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 3)) (decompress_q (@repr WORDSIZE8 11) coefficient4))) : t_KyberPolynomialRingElement_t in
      let coefficient5 := (((byte7.&(@repr WORDSIZE32 127)) shift_left (@repr WORDSIZE32 4)).|(byte6 shift_right (@repr WORDSIZE32 4))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 4)) (decompress_q (@repr WORDSIZE8 11) coefficient5))) : t_KyberPolynomialRingElement_t in
      let coefficient6 := ((((byte9.&(@repr WORDSIZE32 3)) shift_left (@repr WORDSIZE32 9)).|(byte8 shift_left (@repr WORDSIZE32 1))).|(byte7 shift_right (@repr WORDSIZE32 7))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 5)) (decompress_q (@repr WORDSIZE8 11) coefficient6))) : t_KyberPolynomialRingElement_t in
      let coefficient7 := (((byte10.&(@repr WORDSIZE32 31)) shift_left (@repr WORDSIZE32 6)).|(byte9 shift_right (@repr WORDSIZE32 2))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 6)) (decompress_q (@repr WORDSIZE8 11) coefficient7))) : t_KyberPolynomialRingElement_t in
      let coefficient8 := ((byte11 shift_left (@repr WORDSIZE32 3)).|(byte10 shift_right (@repr WORDSIZE32 5))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 7)) (decompress_q (@repr WORDSIZE8 11) coefficient8))) : t_KyberPolynomialRingElement_t in
      re)) : t_KyberPolynomialRingElement_t in
  re.

Definition deserialize_then_decompress_4_ (serialized : seq int8) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  let re := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let re := (f_fold (f_into_iter (f_enumerate (impl__iter serialized))) re (fun re '(i,byte) =>
      let coefficient1 := (cast (byte.&(@repr WORDSIZE8 15))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) ((@repr WORDSIZE32 2).*i) (decompress_q (@repr WORDSIZE8 4) coefficient1))) : t_KyberPolynomialRingElement_t in
      let coefficient2 := (cast ((byte shift_right (@repr WORDSIZE32 4)).&(@repr WORDSIZE8 15))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 2).*i).+(@repr WORDSIZE32 1)) (decompress_q (@repr WORDSIZE8 4) coefficient2))) : t_KyberPolynomialRingElement_t in
      re)) : t_KyberPolynomialRingElement_t in
  re.

Definition deserialize_then_decompress_5_ (serialized : seq int8) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  let re := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let re := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact serialized (@repr WORDSIZE32 5)))) re (fun re '(i,bytes) =>
      let byte1 := (cast (bytes.[(@repr WORDSIZE32 0)])) : int32 in
      let byte2 := (cast (bytes.[(@repr WORDSIZE32 1)])) : int32 in
      let byte3 := (cast (bytes.[(@repr WORDSIZE32 2)])) : int32 in
      let byte4 := (cast (bytes.[(@repr WORDSIZE32 3)])) : int32 in
      let byte5 := (cast (bytes.[(@repr WORDSIZE32 4)])) : int32 in
      let coefficient1 := (byte1.&(@repr WORDSIZE32 31)) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) ((@repr WORDSIZE32 8).*i) (decompress_q (@repr WORDSIZE8 5) coefficient1))) : t_KyberPolynomialRingElement_t in
      let coefficient2 := (((byte2.&(@repr WORDSIZE32 3)) shift_left (@repr WORDSIZE32 3)).|(byte1 shift_right (@repr WORDSIZE32 5))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 1)) (decompress_q (@repr WORDSIZE8 5) coefficient2))) : t_KyberPolynomialRingElement_t in
      let coefficient3 := ((byte2 shift_right (@repr WORDSIZE32 2)).&(@repr WORDSIZE32 31)) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 2)) (decompress_q (@repr WORDSIZE8 5) coefficient3))) : t_KyberPolynomialRingElement_t in
      let coefficient4 := (((byte3.&(@repr WORDSIZE32 15)) shift_left (@repr WORDSIZE32 1)).|(byte2 shift_right (@repr WORDSIZE32 7))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 3)) (decompress_q (@repr WORDSIZE8 5) coefficient4))) : t_KyberPolynomialRingElement_t in
      let coefficient5 := (((byte4.&(@repr WORDSIZE32 1)) shift_left (@repr WORDSIZE32 4)).|(byte3 shift_right (@repr WORDSIZE32 4))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 4)) (decompress_q (@repr WORDSIZE8 5) coefficient5))) : t_KyberPolynomialRingElement_t in
      let coefficient6 := ((byte4 shift_right (@repr WORDSIZE32 1)).&(@repr WORDSIZE32 31)) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 5)) (decompress_q (@repr WORDSIZE8 5) coefficient6))) : t_KyberPolynomialRingElement_t in
      let coefficient7 := (((byte5.&(@repr WORDSIZE32 7)) shift_left (@repr WORDSIZE32 2)).|(byte4 shift_right (@repr WORDSIZE32 6))) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 6)) (decompress_q (@repr WORDSIZE8 5) coefficient7))) : t_KyberPolynomialRingElement_t in
      let coefficient8 := (byte5 shift_right (@repr WORDSIZE32 3)) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+(@repr WORDSIZE32 7)) (decompress_q (@repr WORDSIZE8 5) coefficient8))) : t_KyberPolynomialRingElement_t in
      re)) : t_KyberPolynomialRingElement_t in
  re.

Definition deserialize_then_decompress_message (serialized : nseq int8 TODO: Int.to_string length) : t_KyberPolynomialRingElement_t :=
  let re := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let re := (f_fold (f_into_iter (f_enumerate (impl__iter (unsize serialized)))) re (fun re '(i,byte) =>
      f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 8))) re (fun re j =>
        let coefficient_compressed := (cast ((byte shift_right j).&(@repr WORDSIZE8 1))) : int32 in
        let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 8).*i).+j) (decompress_q (@repr WORDSIZE8 1) coefficient_compressed))) : t_KyberPolynomialRingElement_t in
        re))) : t_KyberPolynomialRingElement_t in
  re.

Definition deserialize_then_decompress_ring_element_u (serialized : seq int8) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  match cast COMPRESSION_FACTOR with
  | (@repr WORDSIZE32 10) => deserialize_then_decompress_10_ serialized
  | (@repr WORDSIZE32 11) => deserialize_then_decompress_11_ serialized
  | _ => never_to_any (panic internal error: entered unreachable code)
  end.

Definition deserialize_then_decompress_ring_element_v (serialized : seq int8) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  match cast COMPRESSION_FACTOR with
  | (@repr WORDSIZE32 4) => deserialize_then_decompress_4_ serialized
  | (@repr WORDSIZE32 5) => deserialize_then_decompress_5_ serialized
  | _ => never_to_any (panic internal error: entered unreachable code)
  end.

Definition deserialize_to_uncompressed_ring_element (serialized : seq int8) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  let re := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let re := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact serialized (@repr WORDSIZE32 3)))) re (fun re '(i,bytes) =>
      let byte1 := (cast (bytes.[(@repr WORDSIZE32 0)])) : int32 in
      let byte2 := (cast (bytes.[(@repr WORDSIZE32 1)])) : int32 in
      let byte3 := (cast (bytes.[(@repr WORDSIZE32 2)])) : int32 in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) ((@repr WORDSIZE32 2).*i) (((byte2.&(@repr WORDSIZE32 15)) shift_left (@repr WORDSIZE32 8)).|(byte1.&(@repr WORDSIZE32 255))))) : t_KyberPolynomialRingElement_t in
      let re := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients re) (((@repr WORDSIZE32 2).*i).+(@repr WORDSIZE32 1)) ((byte3 shift_left (@repr WORDSIZE32 4)).|((byte2 shift_right (@repr WORDSIZE32 4)).&(@repr WORDSIZE32 15))))) : t_KyberPolynomialRingElement_t in
      re)) : t_KyberPolynomialRingElement_t in
  re.

Definition serialize_uncompressed_ring_element (re : t_KyberPolynomialRingElement_t) : nseq int8 TODO: Int.to_string length :=
  let serialized := (repeat (@repr WORDSIZE8 0) (@repr WORDSIZE32 384)) : nseq int8 TODO: Int.to_string length in
  let serialized := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact (unsize (f_coefficients re)) (@repr WORDSIZE32 2)))) serialized (fun serialized '(i,coefficients) =>
      let coefficient1 := (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 0)])) : int16 in
      let coefficient2 := (to_unsigned_representative (coefficients.[(@repr WORDSIZE32 1)])) : int16 in
      let serialized := (update_at serialized ((@repr WORDSIZE32 3).*i) (cast (coefficient1.&(@repr WORDSIZE16 255)))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 1)) (cast ((coefficient1 shift_right (@repr WORDSIZE32 8)).|((coefficient2.&(@repr WORDSIZE16 15)) shift_left (@repr WORDSIZE32 4))))) : nseq int8 TODO: Int.to_string length in
      let serialized := (update_at serialized (((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 2)) (cast ((coefficient2 shift_right (@repr WORDSIZE32 4)).&(@repr WORDSIZE16 255)))) : nseq int8 TODO: Int.to_string length in
      serialized)) : nseq int8 TODO: Int.to_string length in
  serialized.
