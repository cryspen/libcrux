(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super.

Require Import Super. (* as COEFFICIENTS_IN_RING_ELEMENT *)

Require Import Super. (* as FIELD_MODULUS *)

Notation t_KyberFieldElement_t := (int32).

Definition v_BARRETT_MULTIPLIER : int64 :=
  (@repr WORDSIZE64 20159).

Definition v_BARRETT_SHIFT : int64 :=
  (@repr WORDSIZE64 26).

Definition v_BARRETT_R : int64 :=
  (@repr WORDSIZE64 1) shift_left v_BARRETT_SHIFT.

Definition v_INVERSE_OF_MODULUS_MOD_R : int32 :=
  (@repr WORDSIZE32 62209).

Definition v_MONTGOMERY_SHIFT : int8 :=
  (@repr WORDSIZE8 16).

Definition v_MONTGOMERY_R : int32 :=
  (@repr WORDSIZE32 1) shift_left v_MONTGOMERY_SHIFT.

Definition get_montgomery_r_least_significant_bits (value : int32) : int32 :=
  value.&(((@repr WORDSIZE32 1) shift_left v_MONTGOMERY_SHIFT).-(@repr WORDSIZE32 1)).

Definition barrett_reduce (value : int32) : int32 :=
  let t := (((f_from value).*v_BARRETT_MULTIPLIER).+(v_BARRETT_R shift_right (@repr WORDSIZE32 1))) : int64 in
  let quotient := (cast (t shift_right v_BARRETT_SHIFT)) : int32 in
  value.-(quotient.*v_FIELD_MODULUS).

Definition montgomery_reduce (value : int32) : int32 :=
  let _ := (v_MONTGOMERY_R) : int32 in
  let _ := (tt) : unit in
  let t := ((get_montgomery_r_least_significant_bits (cast value)).*v_INVERSE_OF_MODULUS_MOD_R) : int32 in
  let k := (cast (get_montgomery_r_least_significant_bits t)) : int16 in
  let k_times_modulus := ((cast k).*v_FIELD_MODULUS) : int32 in
  let c := (k_times_modulus shift_right v_MONTGOMERY_SHIFT) : int32 in
  let value_high := (value shift_right v_MONTGOMERY_SHIFT) : int32 in
  value_high.-c.

Definition to_unsigned_representative (fe : int32) : int16 :=
  let _ := (tt) : unit in
  cast (fe.+(v_FIELD_MODULUS.&(fe shift_right (@repr WORDSIZE32 31)))).

Record t_KyberPolynomialRingElement : Type :={
  f_coefficients : nseq int32 TODO: Int.to_string length;
}.

Definition impl__KyberPolynomialRingElement__ZERO : t_KyberPolynomialRingElement_t :=
  Build_KyberPolynomialRingElement (repeat (@repr WORDSIZE32 0) (@repr WORDSIZE32 256)).

Definition add_to_ring_element (lhs : t_KyberPolynomialRingElement_t) (rhs : t_KyberPolynomialRingElement_t) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  let _ := (tt) : unit in
  let lhs := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(impl__len (unsize (f_coefficients lhs))))) lhs (fun lhs i =>
      Build_t_KyberPolynomialRingElement (update_at (f_coefficients lhs) i (((f_coefficients lhs).[i]).+((f_coefficients rhs).[i]))))) : t_KyberPolynomialRingElement_t in
  let _ := (tt) : unit in
  lhs.
