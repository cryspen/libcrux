(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super.

Require Import Super.

Require Import Super. (* as KyberFieldElement *)

Require Import Super. (* as KyberPolynomialRingElement *)

Require Import Super.

Require Import Super. (* as COEFFICIENTS_IN_RING_ELEMENT *)

Require Import Super. (* as FIELD_MODULUS *)

Require Import Super. (* as Error *)

Definition sample_from_binomial_distribution_2_ (randomness : seq int8) : t_KyberPolynomialRingElement_t :=
  let sampled := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let sampled := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact randomness (@repr WORDSIZE32 4)))) sampled (fun sampled '(chunk_number,byte_chunk) =>
      let random_bits_as_u32 := ((((cast (byte_chunk.[(@repr WORDSIZE32 0)])).|((cast (byte_chunk.[(@repr WORDSIZE32 1)])) shift_left (@repr WORDSIZE32 8))).|((cast (byte_chunk.[(@repr WORDSIZE32 2)])) shift_left (@repr WORDSIZE32 16))).|((cast (byte_chunk.[(@repr WORDSIZE32 3)])) shift_left (@repr WORDSIZE32 24))) : int32 in
      let even_bits := (random_bits_as_u32.&(@repr WORDSIZE32 1431655765)) : int32 in
      let odd_bits := ((random_bits_as_u32 shift_right (@repr WORDSIZE32 1)).&(@repr WORDSIZE32 1431655765)) : int32 in
      let coin_toss_outcomes := (even_bits.+odd_bits) : int32 in
      f_fold (f_into_iter (f_step_by (Build_Range (@repr WORDSIZE32 0)impl__u32__BITS) (@repr WORDSIZE32 4))) sampled (fun sampled outcome_set =>
        let outcome_1 := (cast ((coin_toss_outcomes shift_right outcome_set).&(@repr WORDSIZE32 3))) : int32 in
        let outcome_2 := (cast ((coin_toss_outcomes shift_right (outcome_set.+(@repr WORDSIZE32 2))).&(@repr WORDSIZE32 3))) : int32 in
        let offset := (cast (outcome_set shift_right (@repr WORDSIZE32 2))) : uint_size in
        let sampled := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients sampled) (((@repr WORDSIZE32 8).*chunk_number).+offset) (outcome_1.-outcome_2))) : t_KyberPolynomialRingElement_t in
        sampled))) : t_KyberPolynomialRingElement_t in
  let _ := (tt) : unit in
  sampled.

Definition sample_from_binomial_distribution_3_ (randomness : seq int8) : t_KyberPolynomialRingElement_t :=
  let sampled := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let sampled := (f_fold (f_into_iter (f_enumerate (impl__chunks_exact randomness (@repr WORDSIZE32 3)))) sampled (fun sampled '(chunk_number,byte_chunk) =>
      let random_bits_as_u24 := (((cast (byte_chunk.[(@repr WORDSIZE32 0)])).|((cast (byte_chunk.[(@repr WORDSIZE32 1)])) shift_left (@repr WORDSIZE32 8))).|((cast (byte_chunk.[(@repr WORDSIZE32 2)])) shift_left (@repr WORDSIZE32 16))) : int32 in
      let first_bits := (random_bits_as_u24.&(@repr WORDSIZE32 2396745)) : int32 in
      let second_bits := ((random_bits_as_u24 shift_right (@repr WORDSIZE32 1)).&(@repr WORDSIZE32 2396745)) : int32 in
      let third_bits := ((random_bits_as_u24 shift_right (@repr WORDSIZE32 2)).&(@repr WORDSIZE32 2396745)) : int32 in
      let coin_toss_outcomes := ((first_bits.+second_bits).+third_bits) : int32 in
      f_fold (f_into_iter (f_step_by (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 24)) (@repr WORDSIZE32 6))) sampled (fun sampled outcome_set =>
        let outcome_1 := (cast ((coin_toss_outcomes shift_right outcome_set).&(@repr WORDSIZE32 7))) : int32 in
        let outcome_2 := (cast ((coin_toss_outcomes shift_right (outcome_set.+(@repr WORDSIZE32 3))).&(@repr WORDSIZE32 7))) : int32 in
        let offset := (cast (outcome_set./(@repr WORDSIZE32 6))) : uint_size in
        let sampled := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients sampled) (((@repr WORDSIZE32 4).*chunk_number).+offset) (outcome_1.-outcome_2))) : t_KyberPolynomialRingElement_t in
        sampled))) : t_KyberPolynomialRingElement_t in
  let _ := (tt) : unit in
  sampled.

Definition sample_from_binomial_distribution (randomness : seq int8) : t_KyberPolynomialRingElement_t :=
  let _ := (tt) : unit in
  match cast ETA with
  | (@repr WORDSIZE32 2) => sample_from_binomial_distribution_2_ randomness
  | (@repr WORDSIZE32 3) => sample_from_binomial_distribution_3_ randomness
  | _ => never_to_any (panic internal error: entered unreachable code)
  end.

Definition sample_from_uniform_distribution (randomness : nseq int8 TODO: Int.to_string length) : (t_KyberPolynomialRingElement_t × t_Option_t t_Error_t) :=
  let sampled_coefficients := ((@repr WORDSIZE32 0)) : uint_size in
  let out := (impl__KyberPolynomialRingElement__ZERO) : t_KyberPolynomialRingElement_t in
  let done := (false) : bool in
  let '(done,out,sampled_coefficients) := (f_fold (f_into_iter (impl__chunks (unsize randomness) (@repr WORDSIZE32 3))) (done,out,sampled_coefficients) (fun '(done,out,sampled_coefficients) bytes =>
      if
        not done
      then
        let b1 := (cast (bytes.[(@repr WORDSIZE32 0)])) : int32 in
        let b2 := (cast (bytes.[(@repr WORDSIZE32 1)])) : int32 in
        let b3 := (cast (bytes.[(@repr WORDSIZE32 2)])) : int32 in
        let d1 := (((b2.&(@repr WORDSIZE32 15)) shift_left (@repr WORDSIZE32 8)).|b1) : int32 in
        let d2 := ((b3 shift_left (@repr WORDSIZE32 4)).|(b2 shift_right (@repr WORDSIZE32 4))) : int32 in
        let '(out,sampled_coefficients) := (if
            andb (d1<.?v_FIELD_MODULUS) (sampled_coefficients<.?v_COEFFICIENTS_IN_RING_ELEMENT)
          then
            let out := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients out) sampled_coefficients d1)) : t_KyberPolynomialRingElement_t in
            (out,sampled_coefficients.+(@repr WORDSIZE32 1))
          else
            (out,sampled_coefficients)) : (t_KyberPolynomialRingElement_t × uint_size) in
        let '(out,sampled_coefficients) := (if
            andb (d2<.?v_FIELD_MODULUS) (sampled_coefficients<.?v_COEFFICIENTS_IN_RING_ELEMENT)
          then
            let out := (Build_t_KyberPolynomialRingElement (update_at (f_coefficients out) sampled_coefficients d2)) : t_KyberPolynomialRingElement_t in
            let sampled_coefficients := (sampled_coefficients.+(@repr WORDSIZE32 1)) : uint_size in
            (out,sampled_coefficients)
          else
            (out,sampled_coefficients)) : (t_KyberPolynomialRingElement_t × uint_size) in
        if
          sampled_coefficients=.?v_COEFFICIENTS_IN_RING_ELEMENT
        then
          let done := (true) : bool in
          (done,out,sampled_coefficients)
        else
          (done,out,sampled_coefficients)
      else
        (done,out,sampled_coefficients))) : (bool × t_KyberPolynomialRingElement_t × uint_size) in
  if
    done
  then
    let _ := (tt) : unit in
    (out,Option_Nonet_Option_t t_Error_t)
  else
    (out,Option_Some Error_RejectionSamplingt_Error_t).
