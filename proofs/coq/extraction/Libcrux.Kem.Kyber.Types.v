(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Inductive t_Error : Type :=
| Error_RejectionSamplingt_Error.

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

Record t_KyberCiphertext : Type :={
  f_value : nseq int8 TODO: Int.to_string length;
}.

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

Record t_KyberPrivateKey : Type :={
  f_value : nseq int8 TODO: Int.to_string length;
}.

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

Record t_KyberPublicKey : Type :={
  f_value : nseq int8 TODO: Int.to_string length;
}.

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

Record t_KyberSharedSecret : Type :={
  f_value : nseq int8 TODO: Int.to_string length;
}.

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

Record t_PrivateKey : Type :={
  f_value : nseq int8 TODO: Int.to_string length;
}.

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)
