(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Class t_UpdatingArray Self := {
  f_push:Self -> seq int8 -> Self ;
}.

Definition into_padded_array (slice : seq int8) : nseq int8 TODO: Int.to_string length :=
  let _ := (if
      true
    then
      let _ := (if
          not ((impl__len slice)<=.?LEN)
        then
          never_to_any (panic assertion failed: slice.len() <= LEN)
        else
          tt) : unit in
      tt
    else
      tt) : unit in
  let out := (repeat (@repr WORDSIZE8 0) LEN) : nseq int8 TODO: Int.to_string length in
  let out := (update_at out (Build_Range (@repr WORDSIZE32 0)(impl__len slice)) (impl__copy_from_slice (out.[(Build_Range (@repr WORDSIZE32 0)(impl__len slice))]) slice)) : nseq int8 TODO: Int.to_string length in
  out.

Record t_UpdatableArray : Type :={
  f_pointer : uint_size;
  f_value : nseq int8 TODO: Int.to_string length;
}.

(*item error backend*)

(*item error backend*)

(*item error backend*)
