module Libcrux.Hacl.Sha3
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core

let sha256 (payload: slice u8) : array u8 (sz 32) =
  let digest:array u8 (sz 32) = Rust_primitives.Hax.repeat 0uy (sz 32) in
  let _:Prims.unit =
    Rust_primitives.Hax.failure ""
      "{ Types.attributes = [];\n  contents =\n  Types.Block {expr = None; opt_destruction_scope = None;\n    region_scope = { Types.data = Types.Node; id = \"33\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename = (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n      hi = { Types.col = \"5\"; line = \"30\" };\n      lo = { Types.col = \"4\"; line = \"24\" } };\n    stmts =\n    [{ Types.kind =\n       Types.Expr {\n         expr =\n         { Types.attributes = [];\n           contents =\n           Types.Call {\n             args =\n             [{ Types.attributes = [];\n                contents =\n                Types.Call {\n                  args =\n                  [{ Types.attributes = [];\n                     contents =\n                     Types.Call {\n                       args =\n                       [{ Types.attributes = [];\n                          contents =\n                          Types.Call {\n                            args =\n                            [{ Types.attributes = [];\n                               contents =\n                               Types.Borrow {\n                                 arg =\n                                 { Types.attributes = [];\n                                   contents =\n                                   Types.Deref {\n                                     arg =\n                                     { Types.attributes = [];\n                                       contents =\n                                       Types.VarRef {\n                                         id =\n                                         { Types.id =\n                                           { Types.local_id = \"2\";\n                                             owner =\n                                             { Types.index = (0, 200);\n                                               krate = \"libcrux\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"hacl\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"sha3\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.ValueNs \"sha256\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               }\n                                             };\n                                           name = \"payload\" }};\n                                       hir_id = None;\n                                       span =\n                                       { Types.filename =\n                                         (Types.Real\n                                            (Types.LocalPath\n                                               \"src/hacl/sha3.rs\"));\n                                         hi =\n                                         { Types.col = \"19\"; line = \"26\" };\n                                         lo =\n                                         { Types.col = \"12\"; line = \"26\" } };\n                                       ty =\n                                       (Types.Ref\n                                          ({ Types.kind = Types.ReErased },\n                                           (Types.Slice (Types.Uint Types.U8)),\n                                           false))\n                                       }};\n                                   hir_id = None;\n                                   span =\n                                   { Types.filename =\n                                     (Types.Real\n                                        (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                     hi = { Types.col = \"25\"; line = \"26\" };\n                                     lo = { Types.col = \"12\"; line = \"26\" } };\n                                   ty = (Types.Slice (Types.Uint Types.U8)) };\n                                 borrow_kind = Types.Shared};\n                               hir_id = (Some (\"200\", \"20\"));\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                 hi = { Types.col = \"25\"; line = \"26\" };\n                                 lo = { Types.col = \"12\"; line = \"26\" } };\n                               ty =\n                               (Types.Ref\n                                  ({ Types.kind = Types.ReErased },\n                                   (Types.Slice (Types.Uint Types.U8)), false))\n                               }\n                              ];\n                            fn_span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath \"src/hacl/sha3.rs\"));\n                              hi = { Types.col = \"25\"; line = \"26\" };\n                              lo = { Types.col = \"20\"; line = \"26\" } };\n                            from_hir_call = true;\n                            fun' =\n                            { Types.attributes = [];\n                              contents =\n                              Types.GlobalName {\n                                id =\n                                { Types.index = (2, 10989); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"slice\");\n                                     disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.ValueNs \"len\");\n                                      disambiguator = 0 }\n                                    ]\n                                  }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"23\"; line = \"26\" };\n                                lo = { Types.col = \"20\"; line = \"26\" } };\n                              ty =\n                              (Types.Arrow\n                                 { Types.bound_vars =\n                                   [(Types.Region\n                                       (Types.BrNamed\n                                          ({ Types.index = (2, 56447);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"slice\");\n                                                disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.ValueNs \"len\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.LifetimeNs \"'_\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             },\n                                           \"'_\")))\n                                     ];\n                                   value =\n                                   { Types.abi = Types.Abi {todo = \"Rust\"};\n                                     c_variadic = false;\n                                     inputs =\n                                     [(Types.Ref\n                                         ({ Types.kind =\n                                            (Types.ReLateBound\n                                               (\"0\",\n                                                { Types.kind =\n                                                  (Types.BrNamed\n                                                     ({ Types.index =\n                                                        (2, 56447);\n                                                        krate = \"core\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"slice\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            Types.Impl;\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.ValueNs\n                                                               \"len\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.LifetimeNs\n                                                               \"'_\");\n                                                            disambiguator = 0\n                                                            }\n                                                          ]\n                                                        },\n                                                      \"'_\"));\n                                                  var = \"0\" }))\n                                            },\n                                          (Types.Slice (Types.Uint Types.U8)),\n                                          false))\n                                       ];\n                                     output = (Types.Uint Types.Usize);\n                                     unsafety = Types.Normal }\n                                   })\n                              };\n                            impl = None;\n                            ty =\n                            (Types.Arrow\n                               { Types.bound_vars =\n                                 [(Types.Region\n                                     (Types.BrNamed\n                                        ({ Types.index = (2, 56447);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"slice\");\n                                              disambiguator = 0 };\n                                             { Types.data = Types.Impl;\n                                               disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.ValueNs \"len\");\n                                               disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.LifetimeNs \"'_\");\n                                               disambiguator = 0 }\n                                             ]\n                                           },\n                                         \"'_\")))\n                                   ];\n                                 value =\n                                 { Types.abi = Types.Abi {todo = \"Rust\"};\n                                   c_variadic = false;\n                                   inputs =\n                                   [(Types.Ref\n                                       ({ Types.kind =\n                                          (Types.ReLateBound\n                                             (\"0\",\n                                              { Types.kind =\n                                                (Types.BrNamed\n                                                   ({ Types.index =\n                                                      (2, 56447);\n                                                      krate = \"core\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"slice\");\n                                                         disambiguator = 0 };\n                                                        { Types.data =\n                                                          Types.Impl;\n                                                          disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.ValueNs\n                                                             \"len\");\n                                                          disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.LifetimeNs\n                                                             \"'_\");\n                                                          disambiguator = 0 }\n                                                        ]\n                                                      },\n                                                    \"'_\"));\n                                                var = \"0\" }))\n                                          },\n                                        (Types.Slice (Types.Uint Types.U8)),\n                                        false))\n                                     ];\n                                   output = (Types.Uint Types.Usize);\n                                   unsafety = Types.Normal }\n                                 })};\n                          hir_id = (Some (\"200\", \"18\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                            hi = { Types.col = \"25\"; line = \"26\" };\n                            lo = { Types.col = \"12\"; line = \"26\" } };\n                          ty = (Types.Uint Types.Usize) }\n                         ];\n                       fn_span =\n                       { Types.filename =\n                         (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                         hi = { Types.col = \"36\"; line = \"26\" };\n                         lo = { Types.col = \"26\"; line = \"26\" } };\n                       from_hir_call = true;\n                       fun' =\n                       { Types.attributes = [];\n                         contents =\n                         Types.GlobalName {\n                           id =\n                           { Types.index = (2, 2519); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"convert\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"TryInto\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.ValueNs \"try_into\");\n                                 disambiguator = 0 }\n                               ]\n                             }};\n                         hir_id = None;\n                         span =\n                         { Types.filename =\n                           (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                           hi = { Types.col = \"34\"; line = \"26\" };\n                           lo = { Types.col = \"26\"; line = \"26\" } };\n                         ty =\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs = [(Types.Uint Types.Usize)];\n                                output =\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 35147); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"result\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Result\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type (Types.Uint Types.U32));\n                                    (Types.Type\n                                       (Types.Alias\n                                          (Types.Projection,\n                                           { Types.def_id =\n                                             { Types.index = (2, 2518);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"convert\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"TryInto\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Error\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             substs =\n                                             [(Types.Type\n                                                 (Types.Uint Types.Usize));\n                                               (Types.Type\n                                                  (Types.Uint Types.U32))\n                                               ];\n                                             trait_def_id =\n                                             (Some ({ Types.index = (2, 2516);\n                                                      krate = \"core\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"convert\");\n                                                         disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"TryInto\");\n                                                          disambiguator = 0 }\n                                                        ]\n                                                      },\n                                                    { Types.args =\n                                                      [{ Types.args = [];\n                                                         impl =\n                                                         Types.Builtin {\n                                                           trait =\n                                                           { Types.def_id =\n                                                             { Types.index =\n                                                               (2, 2689);\n                                                               krate = \"core\";\n                                                               path =\n                                                               [{ Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"marker\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"Sized\");\n                                                                   disambiguator =\n                                                                   0 }\n                                                                 ]\n                                                               };\n                                                             generic_args =\n                                                             [(Types.Type\n                                                                 (Types.Uint\n                                                                    Types.Usize))\n                                                               ]\n                                                             }}\n                                                         };\n                                                        { Types.args = [];\n                                                          impl =\n                                                          Types.Builtin {\n                                                            trait =\n                                                            { Types.def_id =\n                                                              { Types.index =\n                                                                (2, 2689);\n                                                                krate =\n                                                                \"core\";\n                                                                path =\n                                                                [{ Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"marker\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"Sized\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                  ]\n                                                                };\n                                                              generic_args =\n                                                              [(Types.Type\n                                                                  (Types.Uint\n                                                                    Types.U32))\n                                                                ]\n                                                              }}\n                                                          };\n                                                        { Types.args = [];\n                                                          impl =\n                                                          Types.Concrete {\n                                                            generics = [];\n                                                            id =\n                                                            { Types.index =\n                                                              (2, 25071);\n                                                              krate = \"core\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"convert\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"num\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"ptr_try_from_impls\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  Types.Impl;\n                                                                  disambiguator =\n                                                                  2 }\n                                                                ]\n                                                              }}\n                                                          }\n                                                        ];\n                                                      impl =\n                                                      Types.Concrete {\n                                                        generics =\n                                                        [(Types.Type\n                                                            (Types.Uint\n                                                               Types.Usize));\n                                                          (Types.Type\n                                                             (Types.Uint\n                                                                Types.U32))\n                                                          ];\n                                                        id =\n                                                        { Types.index =\n                                                          (2, 2546);\n                                                          krate = \"core\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"convert\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              Types.Impl;\n                                                              disambiguator =\n                                                              6 }\n                                                            ]\n                                                          }}\n                                                      }))\n                                             })))\n                                    ]};\n                                unsafety = Types.Normal }\n                              })\n                         };\n                       impl =\n                       (Some { Types.args =\n                               [{ Types.args = [];\n                                  impl =\n                                  Types.Builtin {\n                                    trait =\n                                    { Types.def_id =\n                                      { Types.index = (2, 2689);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"marker\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Sized\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type (Types.Uint Types.Usize))]\n                                      }}\n                                  };\n                                 { Types.args = [];\n                                   impl =\n                                   Types.Builtin {\n                                     trait =\n                                     { Types.def_id =\n                                       { Types.index = (2, 2689);\n                                         krate = \"core\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"marker\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"Sized\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args =\n                                       [(Types.Type (Types.Uint Types.U32))]\n                                       }}\n                                   };\n                                 { Types.args = [];\n                                   impl =\n                                   Types.Concrete {generics = [];\n                                     id =\n                                     { Types.index = (2, 25071);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"convert\");\n                                          disambiguator = 0 };\n                                         { Types.data = (Types.TypeNs \"num\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"ptr_try_from_impls\");\n                                           disambiguator = 0 };\n                                         { Types.data = Types.Impl;\n                                           disambiguator = 2 }\n                                         ]\n                                       }}\n                                   }\n                                 ];\n                               impl =\n                               Types.Concrete {\n                                 generics =\n                                 [(Types.Type (Types.Uint Types.Usize));\n                                   (Types.Type (Types.Uint Types.U32))];\n                                 id =\n                                 { Types.index = (2, 2546); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"convert\");\n                                      disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 6 }\n                                     ]\n                                   }}\n                               });\n                       ty =\n                       (Types.Arrow\n                          { Types.bound_vars = [];\n                            value =\n                            { Types.abi = Types.Abi {todo = \"Rust\"};\n                              c_variadic = false;\n                              inputs = [(Types.Uint Types.Usize)];\n                              output =\n                              Types.Adt {\n                                def_id =\n                                { Types.index = (2, 35147); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"result\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Result\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type (Types.Uint Types.U32));\n                                  (Types.Type\n                                     (Types.Alias\n                                        (Types.Projection,\n                                         { Types.def_id =\n                                           { Types.index = (2, 2518);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"convert\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"TryInto\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Error\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           substs =\n                                           [(Types.Type\n                                               (Types.Uint Types.Usize));\n                                             (Types.Type\n                                                (Types.Uint Types.U32))\n                                             ];\n                                           trait_def_id =\n                                           (Some ({ Types.index = (2, 2516);\n                                                    krate = \"core\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"convert\");\n                                                       disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs\n                                                           \"TryInto\");\n                                                        disambiguator = 0 }\n                                                      ]\n                                                    },\n                                                  { Types.args =\n                                                    [{ Types.args = [];\n                                                       impl =\n                                                       Types.Builtin {\n                                                         trait =\n                                                         { Types.def_id =\n                                                           { Types.index =\n                                                             (2, 2689);\n                                                             krate = \"core\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"marker\");\n                                                                disambiguator =\n                                                                0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"Sized\");\n                                                                 disambiguator =\n                                                                 0 }\n                                                               ]\n                                                             };\n                                                           generic_args =\n                                                           [(Types.Type\n                                                               (Types.Uint\n                                                                  Types.Usize))\n                                                             ]\n                                                           }}\n                                                       };\n                                                      { Types.args = [];\n                                                        impl =\n                                                        Types.Builtin {\n                                                          trait =\n                                                          { Types.def_id =\n                                                            { Types.index =\n                                                              (2, 2689);\n                                                              krate = \"core\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"marker\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"Sized\");\n                                                                  disambiguator =\n                                                                  0 }\n                                                                ]\n                                                              };\n                                                            generic_args =\n                                                            [(Types.Type\n                                                                (Types.Uint\n                                                                   Types.U32))\n                                                              ]\n                                                            }}\n                                                        };\n                                                      { Types.args = [];\n                                                        impl =\n                                                        Types.Concrete {\n                                                          generics = [];\n                                                          id =\n                                                          { Types.index =\n                                                            (2, 25071);\n                                                            krate = \"core\";\n                                                            path =\n                                                            [{ Types.data =\n                                                               (Types.TypeNs\n                                                                  \"convert\");\n                                                               disambiguator =\n                                                               0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"num\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"ptr_try_from_impls\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                Types.Impl;\n                                                                disambiguator =\n                                                                2 }\n                                                              ]\n                                                            }}\n                                                        }\n                                                      ];\n                                                    impl =\n                                                    Types.Concrete {\n                                                      generics =\n                                                      [(Types.Type\n                                                          (Types.Uint\n                                                             Types.Usize));\n                                                        (Types.Type\n                                                           (Types.Uint\n                                                              Types.U32))\n                                                        ];\n                                                      id =\n                                                      { Types.index =\n                                                        (2, 2546);\n                                                        krate = \"core\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"convert\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            Types.Impl;\n                                                            disambiguator = 6\n                                                            }\n                                                          ]\n                                                        }}\n                                                    }))\n                                           })))\n                                  ]};\n                              unsafety = Types.Normal }\n                            })};\n                     hir_id = (Some (\"200\", \"16\"));\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"36\"; line = \"26\" };\n                       lo = { Types.col = \"12\"; line = \"26\" } };\n                     ty =\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (2, 35147); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"result\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"Result\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       generic_args =\n                       [(Types.Type (Types.Uint Types.U32));\n                         (Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (2, 15596); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"num\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"error\");\n                                    disambiguator = 0 };\n                                  { Types.data =\n                                    (Types.TypeNs \"TryFromIntError\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []})\n                         ]}\n                     }\n                    ];\n                  fn_span =\n                  { Types.filename =\n                    (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                    hi = { Types.col = \"45\"; line = \"26\" };\n                    lo = { Types.col = \"37\"; line = \"26\" } };\n                  from_hir_call = true;\n                  fun' =\n                  { Types.attributes = [];\n                    contents =\n                    Types.GlobalName {\n                      id =\n                      { Types.index = (2, 8523); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"result\");\n                           disambiguator = 0 };\n                          { Types.data = Types.Impl; disambiguator = 0 };\n                          { Types.data = (Types.ValueNs \"unwrap\");\n                            disambiguator = 0 }\n                          ]\n                        }};\n                    hir_id = None;\n                    span =\n                    { Types.filename =\n                      (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                      hi = { Types.col = \"43\"; line = \"26\" };\n                      lo = { Types.col = \"37\"; line = \"26\" } };\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (2, 35147); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"result\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Result\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type (Types.Uint Types.U32));\n                                (Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (2, 15596);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"num\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"error\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"TryFromIntError\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []})\n                                ]}\n                             ];\n                           output = (Types.Uint Types.U32);\n                           unsafety = Types.Normal }\n                         })\n                    };\n                  impl = None;\n                  ty =\n                  (Types.Arrow\n                     { Types.bound_vars = [];\n                       value =\n                       { Types.abi = Types.Abi {todo = \"Rust\"};\n                         c_variadic = false;\n                         inputs =\n                         [Types.Adt {\n                            def_id =\n                            { Types.index = (2, 35147); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"result\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"Result\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type (Types.Uint Types.U32));\n                              (Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 15596);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"num\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"error\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"TryFromIntError\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []})\n                              ]}\n                           ];\n                         output = (Types.Uint Types.U32);\n                         unsafety = Types.Normal }\n                       })};\n                hir_id = (Some (\"200\", \"14\"));\n                span =\n                { Types.filename =\n                  (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                  hi = { Types.col = \"45\"; line = \"26\" };\n                  lo = { Types.col = \"12\"; line = \"26\" } };\n                ty = (Types.Uint Types.U32) };\n               { Types.attributes = [];\n                 contents =\n                 Types.ValueTypeAscription {\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.Cast {\n                       source =\n                       { Types.attributes = [];\n                         contents =\n                         Types.Call {\n                           args =\n                           [{ Types.attributes = [];\n                              contents =\n                              Types.Borrow {\n                                arg =\n                                { Types.attributes = [];\n                                  contents =\n                                  Types.Deref {\n                                    arg =\n                                    { Types.attributes = [];\n                                      contents =\n                                      Types.VarRef {\n                                        id =\n                                        { Types.id =\n                                          { Types.local_id = \"2\";\n                                            owner =\n                                            { Types.index = (0, 200);\n                                              krate = \"libcrux\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"hacl\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"sha3\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.ValueNs \"sha256\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              }\n                                            };\n                                          name = \"payload\" }};\n                                      hir_id = None;\n                                      span =\n                                      { Types.filename =\n                                        (Types.Real\n                                           (Types.LocalPath\n                                              \"src/hacl/sha3.rs\"));\n                                        hi =\n                                        { Types.col = \"19\"; line = \"27\" };\n                                        lo =\n                                        { Types.col = \"12\"; line = \"27\" } };\n                                      ty =\n                                      (Types.Ref\n                                         ({ Types.kind = Types.ReErased },\n                                          (Types.Slice (Types.Uint Types.U8)),\n                                          false))\n                                      }};\n                                  hir_id = None;\n                                  span =\n                                  { Types.filename =\n                                    (Types.Real\n                                       (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                    hi = { Types.col = \"28\"; line = \"27\" };\n                                    lo = { Types.col = \"12\"; line = \"27\" } };\n                                  ty = (Types.Slice (Types.Uint Types.U8)) };\n                                borrow_kind = Types.Shared};\n                              hir_id = (Some (\"200\", \"25\"));\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"28\"; line = \"27\" };\n                                lo = { Types.col = \"12\"; line = \"27\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  (Types.Slice (Types.Uint Types.U8)), false))\n                              }\n                             ];\n                           fn_span =\n                           { Types.filename =\n                             (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                             hi = { Types.col = \"28\"; line = \"27\" };\n                             lo = { Types.col = \"20\"; line = \"27\" } };\n                           from_hir_call = true;\n                           fun' =\n                           { Types.attributes = [];\n                             contents =\n                             Types.GlobalName {\n                               id =\n                               { Types.index = (2, 11039); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"slice\");\n                                    disambiguator = 0 };\n                                   { Types.data = Types.Impl;\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.ValueNs \"as_ptr\");\n                                     disambiguator = 0 }\n                                   ]\n                                 }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath \"src/hacl/sha3.rs\"));\n                               hi = { Types.col = \"26\"; line = \"27\" };\n                               lo = { Types.col = \"20\"; line = \"27\" } };\n                             ty =\n                             (Types.Arrow\n                                { Types.bound_vars =\n                                  [(Types.Region\n                                      (Types.BrNamed\n                                         ({ Types.index = (2, 56469);\n                                            krate = \"core\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"slice\");\n                                               disambiguator = 0 };\n                                              { Types.data = Types.Impl;\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.ValueNs \"as_ptr\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.LifetimeNs \"'_\");\n                                                disambiguator = 0 }\n                                              ]\n                                            },\n                                          \"'_\")))\n                                    ];\n                                  value =\n                                  { Types.abi = Types.Abi {todo = \"Rust\"};\n                                    c_variadic = false;\n                                    inputs =\n                                    [(Types.Ref\n                                        ({ Types.kind =\n                                           (Types.ReLateBound\n                                              (\"0\",\n                                               { Types.kind =\n                                                 (Types.BrNamed\n                                                    ({ Types.index =\n                                                       (2, 56469);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"slice\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           Types.Impl;\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.ValueNs\n                                                              \"as_ptr\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.LifetimeNs\n                                                              \"'_\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       },\n                                                     \"'_\"));\n                                                 var = \"0\" }))\n                                           },\n                                         (Types.Slice (Types.Uint Types.U8)),\n                                         false))\n                                      ];\n                                    output =\n                                    (Types.RawPtr\n                                       { Types.mutbl = false;\n                                         ty = (Types.Uint Types.U8) });\n                                    unsafety = Types.Normal }\n                                  })\n                             };\n                           impl = None;\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars =\n                                [(Types.Region\n                                    (Types.BrNamed\n                                       ({ Types.index = (2, 56469);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"slice\");\n                                             disambiguator = 0 };\n                                            { Types.data = Types.Impl;\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.ValueNs \"as_ptr\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.LifetimeNs \"'_\");\n                                              disambiguator = 0 }\n                                            ]\n                                          },\n                                        \"'_\")))\n                                  ];\n                                value =\n                                { Types.abi = Types.Abi {todo = \"Rust\"};\n                                  c_variadic = false;\n                                  inputs =\n                                  [(Types.Ref\n                                      ({ Types.kind =\n                                         (Types.ReLateBound\n                                            (\"0\",\n                                             { Types.kind =\n                                               (Types.BrNamed\n                                                  ({ Types.index = (2, 56469);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"slice\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         Types.Impl;\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.ValueNs\n                                                            \"as_ptr\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.LifetimeNs\n                                                            \"'_\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     },\n                                                   \"'_\"));\n                                               var = \"0\" }))\n                                         },\n                                       (Types.Slice (Types.Uint Types.U8)),\n                                       false))\n                                    ];\n                                  output =\n                                  (Types.RawPtr\n                                     { Types.mutbl = false;\n                                       ty = (Types.Uint Types.U8) });\n                                  unsafety = Types.Normal }\n                                })};\n                         hir_id = (Some (\"200\", \"23\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                           hi = { Types.col = \"28\"; line = \"27\" };\n                           lo = { Types.col = \"12\"; line = \"27\" } };\n                         ty =\n                         (Types.RawPtr\n                            { Types.mutbl = false; ty = (Types.Uint Types.U8)\n                              })\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"33\"; line = \"27\" };\n                       lo = { Types.col = \"12\"; line = \"27\" } };\n                     ty =\n                     (Types.RawPtr\n                        { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                     };\n                   user_ty =\n                   (Some { Types.max_universe = \"0\";\n                           value = (Types.Todo \"Ty(^0)\");\n                           variables = [(Types.Ty (Types.General \"0\"))] })};\n                 hir_id = (Some (\"200\", \"22\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"33\"; line = \"27\" };\n                   lo = { Types.col = \"12\"; line = \"27\" } };\n                 ty =\n                 (Types.RawPtr\n                    { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                 };\n               { Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Pointer {cast = Types.Unsize;\n                        source =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Borrow {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"9\";\n                                    owner =\n                                    { Types.index = (0, 200);\n                                      krate = \"libcrux\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"hacl\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"sha3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.ValueNs \"sha256\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"digest\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"18\"; line = \"28\" };\n                                lo = { Types.col = \"12\"; line = \"28\" } };\n                              ty =\n                              (Types.Array\n                                 ((Types.Uint Types.U8),\n                                  { Types.attributes = [];\n                                    contents =\n                                    (Types.Literal\n                                       (Types.Int\n                                          (Types.Uint (\"32\", Types.Usize))));\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath \"src/lib.rs\"));\n                                      hi = { Types.col = \"0\"; line = \"1\" };\n                                      lo = { Types.col = \"0\"; line = \"1\" } };\n                                    ty = (Types.Uint Types.Usize) }))\n                              };\n                            borrow_kind =\n                            Types.Mut {allow_two_phase_borrow = true}};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                            hi = { Types.col = \"31\"; line = \"28\" };\n                            lo = { Types.col = \"12\"; line = \"28\" } };\n                          ty =\n                          (Types.Ref\n                             ({ Types.kind = Types.ReErased },\n                              (Types.Array\n                                 ((Types.Uint Types.U8),\n                                  { Types.attributes = [];\n                                    contents =\n                                    (Types.Literal\n                                       (Types.Int\n                                          (Types.Uint (\"32\", Types.Usize))));\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath \"src/lib.rs\"));\n                                      hi = { Types.col = \"0\"; line = \"1\" };\n                                      lo = { Types.col = \"0\"; line = \"1\" } };\n                                    ty = (Types.Uint Types.Usize) })),\n                              true))\n                          }};\n                      hir_id = (Some (\"200\", \"30\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                        hi = { Types.col = \"31\"; line = \"28\" };\n                        lo = { Types.col = \"12\"; line = \"28\" } };\n                      ty =\n                      (Types.Ref\n                         ({ Types.kind = Types.ReErased },\n                          (Types.Slice (Types.Uint Types.U8)), true))\n                      }\n                     ];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                     hi = { Types.col = \"31\"; line = \"28\" };\n                     lo = { Types.col = \"19\"; line = \"28\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 11040); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"slice\");\n                            disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"as_mut_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"29\"; line = \"28\" };\n                       lo = { Types.col = \"19\"; line = \"28\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars =\n                          [(Types.Region\n                              (Types.BrNamed\n                                 ({ Types.index = (2, 56470); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"slice\");\n                                       disambiguator = 0 };\n                                      { Types.data = Types.Impl;\n                                        disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.ValueNs \"as_mut_ptr\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.LifetimeNs \"'_\");\n                                        disambiguator = 0 }\n                                      ]\n                                    },\n                                  \"'_\")))\n                            ];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [(Types.Ref\n                                ({ Types.kind =\n                                   (Types.ReLateBound\n                                      (\"0\",\n                                       { Types.kind =\n                                         (Types.BrNamed\n                                            ({ Types.index = (2, 56470);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"slice\");\n                                                  disambiguator = 0 };\n                                                 { Types.data = Types.Impl;\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.ValueNs\n                                                      \"as_mut_ptr\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.LifetimeNs \"'_\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               },\n                                             \"'_\"));\n                                         var = \"0\" }))\n                                   },\n                                 (Types.Slice (Types.Uint Types.U8)), true))\n                              ];\n                            output =\n                            (Types.RawPtr\n                               { Types.mutbl = true;\n                                 ty = (Types.Uint Types.U8) });\n                            unsafety = Types.Normal }\n                          })\n                     };\n                   impl = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars =\n                        [(Types.Region\n                            (Types.BrNamed\n                               ({ Types.index = (2, 56470); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"slice\");\n                                     disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.ValueNs \"as_mut_ptr\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.LifetimeNs \"'_\");\n                                      disambiguator = 0 }\n                                    ]\n                                  },\n                                \"'_\")))\n                          ];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [(Types.Ref\n                              ({ Types.kind =\n                                 (Types.ReLateBound\n                                    (\"0\",\n                                     { Types.kind =\n                                       (Types.BrNamed\n                                          ({ Types.index = (2, 56470);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"slice\");\n                                                disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.ValueNs \"as_mut_ptr\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.LifetimeNs \"'_\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             },\n                                           \"'_\"));\n                                       var = \"0\" }))\n                                 },\n                               (Types.Slice (Types.Uint Types.U8)), true))\n                            ];\n                          output =\n                          (Types.RawPtr\n                             { Types.mutbl = true; ty = (Types.Uint Types.U8)\n                               });\n                          unsafety = Types.Normal }\n                        })};\n                 hir_id = (Some (\"200\", \"28\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"31\"; line = \"28\" };\n                   lo = { Types.col = \"12\"; line = \"28\" } };\n                 ty =\n                 (Types.RawPtr\n                    { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                 }\n               ];\n             fn_span =\n             { Types.filename =\n               (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n               hi = { Types.col = \"9\"; line = \"29\" };\n               lo = { Types.col = \"8\"; line = \"25\" } };\n             from_hir_call = true;\n             fun' =\n             { Types.attributes = [];\n               contents =\n               Types.GlobalName {\n                 id =\n                 { Types.index = (22, 143); krate = \"libcrux_hacl\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"bindings\");\n                      disambiguator = 0 };\n                     { Types.data = Types.ForeignMod; disambiguator = 48 };\n                     { Types.data = (Types.ValueNs \"Hacl_SHA3_sha3_256\");\n                       disambiguator = 0 }\n                     ]\n                   }};\n               hir_id = None;\n               span =\n               { Types.filename =\n                 (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                 hi = { Types.col = \"26\"; line = \"25\" };\n                 lo = { Types.col = \"8\"; line = \"25\" } };\n               ty =\n               (Types.Arrow\n                  { Types.bound_vars = [];\n                    value =\n                    { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                      c_variadic = false;\n                      inputs =\n                      [(Types.Uint Types.U32);\n                        (Types.RawPtr\n                           { Types.mutbl = true; ty = (Types.Uint Types.U8) });\n                        (Types.RawPtr\n                           { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                        ];\n                      output = (Types.Tuple []); unsafety = Types.Unsafe }\n                    })\n               };\n             impl = None;\n             ty =\n             (Types.Arrow\n                { Types.bound_vars = [];\n                  value =\n                  { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                    c_variadic = false;\n                    inputs =\n                    [(Types.Uint Types.U32);\n                      (Types.RawPtr\n                         { Types.mutbl = true; ty = (Types.Uint Types.U8) });\n                      (Types.RawPtr\n                         { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                      ];\n                    output = (Types.Tuple []); unsafety = Types.Unsafe }\n                  })};\n           hir_id = (Some (\"200\", \"11\"));\n           span =\n           { Types.filename =\n             (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n             hi = { Types.col = \"9\"; line = \"29\" };\n             lo = { Types.col = \"8\"; line = \"25\" } };\n           ty = (Types.Tuple []) };\n         scope = { Types.data = Types.Node; id = \"32\" }};\n       opt_destruction_scope =\n       (Some { Types.data = Types.Destruction; id = \"32\" }) }\n      ];\n    targeted_by_break = false};\n  hir_id = (Some (\"200\", \"10\"));\n  span =\n  { Types.filename = (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n    hi = { Types.col = \"5\"; line = \"30\" };\n    lo = { Types.col = \"4\"; line = \"24\" } };\n  ty = (Types.Tuple []) }"

  in
  digest

let sha512 (payload: slice u8) : array u8 (sz 64) =
  let digest:array u8 (sz 64) = Rust_primitives.Hax.repeat 0uy (sz 64) in
  let _:Prims.unit =
    Rust_primitives.Hax.failure ""
      "{ Types.attributes = [];\n  contents =\n  Types.Block {expr = None; opt_destruction_scope = None;\n    region_scope = { Types.data = Types.Node; id = \"33\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename = (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n      hi = { Types.col = \"5\"; line = \"56\" };\n      lo = { Types.col = \"4\"; line = \"50\" } };\n    stmts =\n    [{ Types.kind =\n       Types.Expr {\n         expr =\n         { Types.attributes = [];\n           contents =\n           Types.Call {\n             args =\n             [{ Types.attributes = [];\n                contents =\n                Types.Call {\n                  args =\n                  [{ Types.attributes = [];\n                     contents =\n                     Types.Call {\n                       args =\n                       [{ Types.attributes = [];\n                          contents =\n                          Types.Call {\n                            args =\n                            [{ Types.attributes = [];\n                               contents =\n                               Types.Borrow {\n                                 arg =\n                                 { Types.attributes = [];\n                                   contents =\n                                   Types.Deref {\n                                     arg =\n                                     { Types.attributes = [];\n                                       contents =\n                                       Types.VarRef {\n                                         id =\n                                         { Types.id =\n                                           { Types.local_id = \"2\";\n                                             owner =\n                                             { Types.index = (0, 206);\n                                               krate = \"libcrux\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"hacl\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"sha3\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.ValueNs \"sha512\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               }\n                                             };\n                                           name = \"payload\" }};\n                                       hir_id = None;\n                                       span =\n                                       { Types.filename =\n                                         (Types.Real\n                                            (Types.LocalPath\n                                               \"src/hacl/sha3.rs\"));\n                                         hi =\n                                         { Types.col = \"19\"; line = \"52\" };\n                                         lo =\n                                         { Types.col = \"12\"; line = \"52\" } };\n                                       ty =\n                                       (Types.Ref\n                                          ({ Types.kind = Types.ReErased },\n                                           (Types.Slice (Types.Uint Types.U8)),\n                                           false))\n                                       }};\n                                   hir_id = None;\n                                   span =\n                                   { Types.filename =\n                                     (Types.Real\n                                        (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                     hi = { Types.col = \"25\"; line = \"52\" };\n                                     lo = { Types.col = \"12\"; line = \"52\" } };\n                                   ty = (Types.Slice (Types.Uint Types.U8)) };\n                                 borrow_kind = Types.Shared};\n                               hir_id = (Some (\"206\", \"20\"));\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                 hi = { Types.col = \"25\"; line = \"52\" };\n                                 lo = { Types.col = \"12\"; line = \"52\" } };\n                               ty =\n                               (Types.Ref\n                                  ({ Types.kind = Types.ReErased },\n                                   (Types.Slice (Types.Uint Types.U8)), false))\n                               }\n                              ];\n                            fn_span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath \"src/hacl/sha3.rs\"));\n                              hi = { Types.col = \"25\"; line = \"52\" };\n                              lo = { Types.col = \"20\"; line = \"52\" } };\n                            from_hir_call = true;\n                            fun' =\n                            { Types.attributes = [];\n                              contents =\n                              Types.GlobalName {\n                                id =\n                                { Types.index = (2, 10989); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"slice\");\n                                     disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.ValueNs \"len\");\n                                      disambiguator = 0 }\n                                    ]\n                                  }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"23\"; line = \"52\" };\n                                lo = { Types.col = \"20\"; line = \"52\" } };\n                              ty =\n                              (Types.Arrow\n                                 { Types.bound_vars =\n                                   [(Types.Region\n                                       (Types.BrNamed\n                                          ({ Types.index = (2, 56447);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"slice\");\n                                                disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.ValueNs \"len\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.LifetimeNs \"'_\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             },\n                                           \"'_\")))\n                                     ];\n                                   value =\n                                   { Types.abi = Types.Abi {todo = \"Rust\"};\n                                     c_variadic = false;\n                                     inputs =\n                                     [(Types.Ref\n                                         ({ Types.kind =\n                                            (Types.ReLateBound\n                                               (\"0\",\n                                                { Types.kind =\n                                                  (Types.BrNamed\n                                                     ({ Types.index =\n                                                        (2, 56447);\n                                                        krate = \"core\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"slice\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            Types.Impl;\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.ValueNs\n                                                               \"len\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.LifetimeNs\n                                                               \"'_\");\n                                                            disambiguator = 0\n                                                            }\n                                                          ]\n                                                        },\n                                                      \"'_\"));\n                                                  var = \"0\" }))\n                                            },\n                                          (Types.Slice (Types.Uint Types.U8)),\n                                          false))\n                                       ];\n                                     output = (Types.Uint Types.Usize);\n                                     unsafety = Types.Normal }\n                                   })\n                              };\n                            impl = None;\n                            ty =\n                            (Types.Arrow\n                               { Types.bound_vars =\n                                 [(Types.Region\n                                     (Types.BrNamed\n                                        ({ Types.index = (2, 56447);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"slice\");\n                                              disambiguator = 0 };\n                                             { Types.data = Types.Impl;\n                                               disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.ValueNs \"len\");\n                                               disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.LifetimeNs \"'_\");\n                                               disambiguator = 0 }\n                                             ]\n                                           },\n                                         \"'_\")))\n                                   ];\n                                 value =\n                                 { Types.abi = Types.Abi {todo = \"Rust\"};\n                                   c_variadic = false;\n                                   inputs =\n                                   [(Types.Ref\n                                       ({ Types.kind =\n                                          (Types.ReLateBound\n                                             (\"0\",\n                                              { Types.kind =\n                                                (Types.BrNamed\n                                                   ({ Types.index =\n                                                      (2, 56447);\n                                                      krate = \"core\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"slice\");\n                                                         disambiguator = 0 };\n                                                        { Types.data =\n                                                          Types.Impl;\n                                                          disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.ValueNs\n                                                             \"len\");\n                                                          disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.LifetimeNs\n                                                             \"'_\");\n                                                          disambiguator = 0 }\n                                                        ]\n                                                      },\n                                                    \"'_\"));\n                                                var = \"0\" }))\n                                          },\n                                        (Types.Slice (Types.Uint Types.U8)),\n                                        false))\n                                     ];\n                                   output = (Types.Uint Types.Usize);\n                                   unsafety = Types.Normal }\n                                 })};\n                          hir_id = (Some (\"206\", \"18\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                            hi = { Types.col = \"25\"; line = \"52\" };\n                            lo = { Types.col = \"12\"; line = \"52\" } };\n                          ty = (Types.Uint Types.Usize) }\n                         ];\n                       fn_span =\n                       { Types.filename =\n                         (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                         hi = { Types.col = \"36\"; line = \"52\" };\n                         lo = { Types.col = \"26\"; line = \"52\" } };\n                       from_hir_call = true;\n                       fun' =\n                       { Types.attributes = [];\n                         contents =\n                         Types.GlobalName {\n                           id =\n                           { Types.index = (2, 2519); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"convert\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"TryInto\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.ValueNs \"try_into\");\n                                 disambiguator = 0 }\n                               ]\n                             }};\n                         hir_id = None;\n                         span =\n                         { Types.filename =\n                           (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                           hi = { Types.col = \"34\"; line = \"52\" };\n                           lo = { Types.col = \"26\"; line = \"52\" } };\n                         ty =\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs = [(Types.Uint Types.Usize)];\n                                output =\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 35147); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"result\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Result\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type (Types.Uint Types.U32));\n                                    (Types.Type\n                                       (Types.Alias\n                                          (Types.Projection,\n                                           { Types.def_id =\n                                             { Types.index = (2, 2518);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"convert\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"TryInto\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Error\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             substs =\n                                             [(Types.Type\n                                                 (Types.Uint Types.Usize));\n                                               (Types.Type\n                                                  (Types.Uint Types.U32))\n                                               ];\n                                             trait_def_id =\n                                             (Some ({ Types.index = (2, 2516);\n                                                      krate = \"core\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"convert\");\n                                                         disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"TryInto\");\n                                                          disambiguator = 0 }\n                                                        ]\n                                                      },\n                                                    { Types.args =\n                                                      [{ Types.args = [];\n                                                         impl =\n                                                         Types.Builtin {\n                                                           trait =\n                                                           { Types.def_id =\n                                                             { Types.index =\n                                                               (2, 2689);\n                                                               krate = \"core\";\n                                                               path =\n                                                               [{ Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"marker\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"Sized\");\n                                                                   disambiguator =\n                                                                   0 }\n                                                                 ]\n                                                               };\n                                                             generic_args =\n                                                             [(Types.Type\n                                                                 (Types.Uint\n                                                                    Types.Usize))\n                                                               ]\n                                                             }}\n                                                         };\n                                                        { Types.args = [];\n                                                          impl =\n                                                          Types.Builtin {\n                                                            trait =\n                                                            { Types.def_id =\n                                                              { Types.index =\n                                                                (2, 2689);\n                                                                krate =\n                                                                \"core\";\n                                                                path =\n                                                                [{ Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"marker\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"Sized\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                  ]\n                                                                };\n                                                              generic_args =\n                                                              [(Types.Type\n                                                                  (Types.Uint\n                                                                    Types.U32))\n                                                                ]\n                                                              }}\n                                                          };\n                                                        { Types.args = [];\n                                                          impl =\n                                                          Types.Concrete {\n                                                            generics = [];\n                                                            id =\n                                                            { Types.index =\n                                                              (2, 25071);\n                                                              krate = \"core\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"convert\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"num\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"ptr_try_from_impls\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  Types.Impl;\n                                                                  disambiguator =\n                                                                  2 }\n                                                                ]\n                                                              }}\n                                                          }\n                                                        ];\n                                                      impl =\n                                                      Types.Concrete {\n                                                        generics =\n                                                        [(Types.Type\n                                                            (Types.Uint\n                                                               Types.Usize));\n                                                          (Types.Type\n                                                             (Types.Uint\n                                                                Types.U32))\n                                                          ];\n                                                        id =\n                                                        { Types.index =\n                                                          (2, 2546);\n                                                          krate = \"core\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"convert\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              Types.Impl;\n                                                              disambiguator =\n                                                              6 }\n                                                            ]\n                                                          }}\n                                                      }))\n                                             })))\n                                    ]};\n                                unsafety = Types.Normal }\n                              })\n                         };\n                       impl =\n                       (Some { Types.args =\n                               [{ Types.args = [];\n                                  impl =\n                                  Types.Builtin {\n                                    trait =\n                                    { Types.def_id =\n                                      { Types.index = (2, 2689);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"marker\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Sized\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type (Types.Uint Types.Usize))]\n                                      }}\n                                  };\n                                 { Types.args = [];\n                                   impl =\n                                   Types.Builtin {\n                                     trait =\n                                     { Types.def_id =\n                                       { Types.index = (2, 2689);\n                                         krate = \"core\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"marker\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"Sized\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args =\n                                       [(Types.Type (Types.Uint Types.U32))]\n                                       }}\n                                   };\n                                 { Types.args = [];\n                                   impl =\n                                   Types.Concrete {generics = [];\n                                     id =\n                                     { Types.index = (2, 25071);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"convert\");\n                                          disambiguator = 0 };\n                                         { Types.data = (Types.TypeNs \"num\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"ptr_try_from_impls\");\n                                           disambiguator = 0 };\n                                         { Types.data = Types.Impl;\n                                           disambiguator = 2 }\n                                         ]\n                                       }}\n                                   }\n                                 ];\n                               impl =\n                               Types.Concrete {\n                                 generics =\n                                 [(Types.Type (Types.Uint Types.Usize));\n                                   (Types.Type (Types.Uint Types.U32))];\n                                 id =\n                                 { Types.index = (2, 2546); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"convert\");\n                                      disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 6 }\n                                     ]\n                                   }}\n                               });\n                       ty =\n                       (Types.Arrow\n                          { Types.bound_vars = [];\n                            value =\n                            { Types.abi = Types.Abi {todo = \"Rust\"};\n                              c_variadic = false;\n                              inputs = [(Types.Uint Types.Usize)];\n                              output =\n                              Types.Adt {\n                                def_id =\n                                { Types.index = (2, 35147); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"result\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Result\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type (Types.Uint Types.U32));\n                                  (Types.Type\n                                     (Types.Alias\n                                        (Types.Projection,\n                                         { Types.def_id =\n                                           { Types.index = (2, 2518);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"convert\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"TryInto\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Error\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           substs =\n                                           [(Types.Type\n                                               (Types.Uint Types.Usize));\n                                             (Types.Type\n                                                (Types.Uint Types.U32))\n                                             ];\n                                           trait_def_id =\n                                           (Some ({ Types.index = (2, 2516);\n                                                    krate = \"core\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"convert\");\n                                                       disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs\n                                                           \"TryInto\");\n                                                        disambiguator = 0 }\n                                                      ]\n                                                    },\n                                                  { Types.args =\n                                                    [{ Types.args = [];\n                                                       impl =\n                                                       Types.Builtin {\n                                                         trait =\n                                                         { Types.def_id =\n                                                           { Types.index =\n                                                             (2, 2689);\n                                                             krate = \"core\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"marker\");\n                                                                disambiguator =\n                                                                0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"Sized\");\n                                                                 disambiguator =\n                                                                 0 }\n                                                               ]\n                                                             };\n                                                           generic_args =\n                                                           [(Types.Type\n                                                               (Types.Uint\n                                                                  Types.Usize))\n                                                             ]\n                                                           }}\n                                                       };\n                                                      { Types.args = [];\n                                                        impl =\n                                                        Types.Builtin {\n                                                          trait =\n                                                          { Types.def_id =\n                                                            { Types.index =\n                                                              (2, 2689);\n                                                              krate = \"core\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"marker\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"Sized\");\n                                                                  disambiguator =\n                                                                  0 }\n                                                                ]\n                                                              };\n                                                            generic_args =\n                                                            [(Types.Type\n                                                                (Types.Uint\n                                                                   Types.U32))\n                                                              ]\n                                                            }}\n                                                        };\n                                                      { Types.args = [];\n                                                        impl =\n                                                        Types.Concrete {\n                                                          generics = [];\n                                                          id =\n                                                          { Types.index =\n                                                            (2, 25071);\n                                                            krate = \"core\";\n                                                            path =\n                                                            [{ Types.data =\n                                                               (Types.TypeNs\n                                                                  \"convert\");\n                                                               disambiguator =\n                                                               0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"num\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"ptr_try_from_impls\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                Types.Impl;\n                                                                disambiguator =\n                                                                2 }\n                                                              ]\n                                                            }}\n                                                        }\n                                                      ];\n                                                    impl =\n                                                    Types.Concrete {\n                                                      generics =\n                                                      [(Types.Type\n                                                          (Types.Uint\n                                                             Types.Usize));\n                                                        (Types.Type\n                                                           (Types.Uint\n                                                              Types.U32))\n                                                        ];\n                                                      id =\n                                                      { Types.index =\n                                                        (2, 2546);\n                                                        krate = \"core\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"convert\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            Types.Impl;\n                                                            disambiguator = 6\n                                                            }\n                                                          ]\n                                                        }}\n                                                    }))\n                                           })))\n                                  ]};\n                              unsafety = Types.Normal }\n                            })};\n                     hir_id = (Some (\"206\", \"16\"));\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"36\"; line = \"52\" };\n                       lo = { Types.col = \"12\"; line = \"52\" } };\n                     ty =\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (2, 35147); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"result\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"Result\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       generic_args =\n                       [(Types.Type (Types.Uint Types.U32));\n                         (Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (2, 15596); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"num\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"error\");\n                                    disambiguator = 0 };\n                                  { Types.data =\n                                    (Types.TypeNs \"TryFromIntError\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []})\n                         ]}\n                     }\n                    ];\n                  fn_span =\n                  { Types.filename =\n                    (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                    hi = { Types.col = \"45\"; line = \"52\" };\n                    lo = { Types.col = \"37\"; line = \"52\" } };\n                  from_hir_call = true;\n                  fun' =\n                  { Types.attributes = [];\n                    contents =\n                    Types.GlobalName {\n                      id =\n                      { Types.index = (2, 8523); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"result\");\n                           disambiguator = 0 };\n                          { Types.data = Types.Impl; disambiguator = 0 };\n                          { Types.data = (Types.ValueNs \"unwrap\");\n                            disambiguator = 0 }\n                          ]\n                        }};\n                    hir_id = None;\n                    span =\n                    { Types.filename =\n                      (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                      hi = { Types.col = \"43\"; line = \"52\" };\n                      lo = { Types.col = \"37\"; line = \"52\" } };\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (2, 35147); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"result\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Result\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type (Types.Uint Types.U32));\n                                (Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (2, 15596);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"num\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"error\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"TryFromIntError\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []})\n                                ]}\n                             ];\n                           output = (Types.Uint Types.U32);\n                           unsafety = Types.Normal }\n                         })\n                    };\n                  impl = None;\n                  ty =\n                  (Types.Arrow\n                     { Types.bound_vars = [];\n                       value =\n                       { Types.abi = Types.Abi {todo = \"Rust\"};\n                         c_variadic = false;\n                         inputs =\n                         [Types.Adt {\n                            def_id =\n                            { Types.index = (2, 35147); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"result\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"Result\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type (Types.Uint Types.U32));\n                              (Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 15596);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"num\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"error\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"TryFromIntError\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []})\n                              ]}\n                           ];\n                         output = (Types.Uint Types.U32);\n                         unsafety = Types.Normal }\n                       })};\n                hir_id = (Some (\"206\", \"14\"));\n                span =\n                { Types.filename =\n                  (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                  hi = { Types.col = \"45\"; line = \"52\" };\n                  lo = { Types.col = \"12\"; line = \"52\" } };\n                ty = (Types.Uint Types.U32) };\n               { Types.attributes = [];\n                 contents =\n                 Types.ValueTypeAscription {\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.Cast {\n                       source =\n                       { Types.attributes = [];\n                         contents =\n                         Types.Call {\n                           args =\n                           [{ Types.attributes = [];\n                              contents =\n                              Types.Borrow {\n                                arg =\n                                { Types.attributes = [];\n                                  contents =\n                                  Types.Deref {\n                                    arg =\n                                    { Types.attributes = [];\n                                      contents =\n                                      Types.VarRef {\n                                        id =\n                                        { Types.id =\n                                          { Types.local_id = \"2\";\n                                            owner =\n                                            { Types.index = (0, 206);\n                                              krate = \"libcrux\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"hacl\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"sha3\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.ValueNs \"sha512\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              }\n                                            };\n                                          name = \"payload\" }};\n                                      hir_id = None;\n                                      span =\n                                      { Types.filename =\n                                        (Types.Real\n                                           (Types.LocalPath\n                                              \"src/hacl/sha3.rs\"));\n                                        hi =\n                                        { Types.col = \"19\"; line = \"53\" };\n                                        lo =\n                                        { Types.col = \"12\"; line = \"53\" } };\n                                      ty =\n                                      (Types.Ref\n                                         ({ Types.kind = Types.ReErased },\n                                          (Types.Slice (Types.Uint Types.U8)),\n                                          false))\n                                      }};\n                                  hir_id = None;\n                                  span =\n                                  { Types.filename =\n                                    (Types.Real\n                                       (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                    hi = { Types.col = \"28\"; line = \"53\" };\n                                    lo = { Types.col = \"12\"; line = \"53\" } };\n                                  ty = (Types.Slice (Types.Uint Types.U8)) };\n                                borrow_kind = Types.Shared};\n                              hir_id = (Some (\"206\", \"25\"));\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"28\"; line = \"53\" };\n                                lo = { Types.col = \"12\"; line = \"53\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  (Types.Slice (Types.Uint Types.U8)), false))\n                              }\n                             ];\n                           fn_span =\n                           { Types.filename =\n                             (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                             hi = { Types.col = \"28\"; line = \"53\" };\n                             lo = { Types.col = \"20\"; line = \"53\" } };\n                           from_hir_call = true;\n                           fun' =\n                           { Types.attributes = [];\n                             contents =\n                             Types.GlobalName {\n                               id =\n                               { Types.index = (2, 11039); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"slice\");\n                                    disambiguator = 0 };\n                                   { Types.data = Types.Impl;\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.ValueNs \"as_ptr\");\n                                     disambiguator = 0 }\n                                   ]\n                                 }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath \"src/hacl/sha3.rs\"));\n                               hi = { Types.col = \"26\"; line = \"53\" };\n                               lo = { Types.col = \"20\"; line = \"53\" } };\n                             ty =\n                             (Types.Arrow\n                                { Types.bound_vars =\n                                  [(Types.Region\n                                      (Types.BrNamed\n                                         ({ Types.index = (2, 56469);\n                                            krate = \"core\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"slice\");\n                                               disambiguator = 0 };\n                                              { Types.data = Types.Impl;\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.ValueNs \"as_ptr\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.LifetimeNs \"'_\");\n                                                disambiguator = 0 }\n                                              ]\n                                            },\n                                          \"'_\")))\n                                    ];\n                                  value =\n                                  { Types.abi = Types.Abi {todo = \"Rust\"};\n                                    c_variadic = false;\n                                    inputs =\n                                    [(Types.Ref\n                                        ({ Types.kind =\n                                           (Types.ReLateBound\n                                              (\"0\",\n                                               { Types.kind =\n                                                 (Types.BrNamed\n                                                    ({ Types.index =\n                                                       (2, 56469);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"slice\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           Types.Impl;\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.ValueNs\n                                                              \"as_ptr\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.LifetimeNs\n                                                              \"'_\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       },\n                                                     \"'_\"));\n                                                 var = \"0\" }))\n                                           },\n                                         (Types.Slice (Types.Uint Types.U8)),\n                                         false))\n                                      ];\n                                    output =\n                                    (Types.RawPtr\n                                       { Types.mutbl = false;\n                                         ty = (Types.Uint Types.U8) });\n                                    unsafety = Types.Normal }\n                                  })\n                             };\n                           impl = None;\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars =\n                                [(Types.Region\n                                    (Types.BrNamed\n                                       ({ Types.index = (2, 56469);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"slice\");\n                                             disambiguator = 0 };\n                                            { Types.data = Types.Impl;\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.ValueNs \"as_ptr\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.LifetimeNs \"'_\");\n                                              disambiguator = 0 }\n                                            ]\n                                          },\n                                        \"'_\")))\n                                  ];\n                                value =\n                                { Types.abi = Types.Abi {todo = \"Rust\"};\n                                  c_variadic = false;\n                                  inputs =\n                                  [(Types.Ref\n                                      ({ Types.kind =\n                                         (Types.ReLateBound\n                                            (\"0\",\n                                             { Types.kind =\n                                               (Types.BrNamed\n                                                  ({ Types.index = (2, 56469);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"slice\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         Types.Impl;\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.ValueNs\n                                                            \"as_ptr\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.LifetimeNs\n                                                            \"'_\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     },\n                                                   \"'_\"));\n                                               var = \"0\" }))\n                                         },\n                                       (Types.Slice (Types.Uint Types.U8)),\n                                       false))\n                                    ];\n                                  output =\n                                  (Types.RawPtr\n                                     { Types.mutbl = false;\n                                       ty = (Types.Uint Types.U8) });\n                                  unsafety = Types.Normal }\n                                })};\n                         hir_id = (Some (\"206\", \"23\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                           hi = { Types.col = \"28\"; line = \"53\" };\n                           lo = { Types.col = \"12\"; line = \"53\" } };\n                         ty =\n                         (Types.RawPtr\n                            { Types.mutbl = false; ty = (Types.Uint Types.U8)\n                              })\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"33\"; line = \"53\" };\n                       lo = { Types.col = \"12\"; line = \"53\" } };\n                     ty =\n                     (Types.RawPtr\n                        { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                     };\n                   user_ty =\n                   (Some { Types.max_universe = \"0\";\n                           value = (Types.Todo \"Ty(^0)\");\n                           variables = [(Types.Ty (Types.General \"0\"))] })};\n                 hir_id = (Some (\"206\", \"22\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"33\"; line = \"53\" };\n                   lo = { Types.col = \"12\"; line = \"53\" } };\n                 ty =\n                 (Types.RawPtr\n                    { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                 };\n               { Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Pointer {cast = Types.Unsize;\n                        source =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Borrow {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"9\";\n                                    owner =\n                                    { Types.index = (0, 206);\n                                      krate = \"libcrux\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"hacl\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"sha3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.ValueNs \"sha512\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"digest\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"18\"; line = \"54\" };\n                                lo = { Types.col = \"12\"; line = \"54\" } };\n                              ty =\n                              (Types.Array\n                                 ((Types.Uint Types.U8),\n                                  { Types.attributes = [];\n                                    contents =\n                                    (Types.Literal\n                                       (Types.Int\n                                          (Types.Uint (\"64\", Types.Usize))));\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath \"src/lib.rs\"));\n                                      hi = { Types.col = \"0\"; line = \"1\" };\n                                      lo = { Types.col = \"0\"; line = \"1\" } };\n                                    ty = (Types.Uint Types.Usize) }))\n                              };\n                            borrow_kind =\n                            Types.Mut {allow_two_phase_borrow = true}};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                            hi = { Types.col = \"31\"; line = \"54\" };\n                            lo = { Types.col = \"12\"; line = \"54\" } };\n                          ty =\n                          (Types.Ref\n                             ({ Types.kind = Types.ReErased },\n                              (Types.Array\n                                 ((Types.Uint Types.U8),\n                                  { Types.attributes = [];\n                                    contents =\n                                    (Types.Literal\n                                       (Types.Int\n                                          (Types.Uint (\"64\", Types.Usize))));\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath \"src/lib.rs\"));\n                                      hi = { Types.col = \"0\"; line = \"1\" };\n                                      lo = { Types.col = \"0\"; line = \"1\" } };\n                                    ty = (Types.Uint Types.Usize) })),\n                              true))\n                          }};\n                      hir_id = (Some (\"206\", \"30\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                        hi = { Types.col = \"31\"; line = \"54\" };\n                        lo = { Types.col = \"12\"; line = \"54\" } };\n                      ty =\n                      (Types.Ref\n                         ({ Types.kind = Types.ReErased },\n                          (Types.Slice (Types.Uint Types.U8)), true))\n                      }\n                     ];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                     hi = { Types.col = \"31\"; line = \"54\" };\n                     lo = { Types.col = \"19\"; line = \"54\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 11040); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"slice\");\n                            disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"as_mut_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"29\"; line = \"54\" };\n                       lo = { Types.col = \"19\"; line = \"54\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars =\n                          [(Types.Region\n                              (Types.BrNamed\n                                 ({ Types.index = (2, 56470); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"slice\");\n                                       disambiguator = 0 };\n                                      { Types.data = Types.Impl;\n                                        disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.ValueNs \"as_mut_ptr\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.LifetimeNs \"'_\");\n                                        disambiguator = 0 }\n                                      ]\n                                    },\n                                  \"'_\")))\n                            ];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [(Types.Ref\n                                ({ Types.kind =\n                                   (Types.ReLateBound\n                                      (\"0\",\n                                       { Types.kind =\n                                         (Types.BrNamed\n                                            ({ Types.index = (2, 56470);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"slice\");\n                                                  disambiguator = 0 };\n                                                 { Types.data = Types.Impl;\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.ValueNs\n                                                      \"as_mut_ptr\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.LifetimeNs \"'_\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               },\n                                             \"'_\"));\n                                         var = \"0\" }))\n                                   },\n                                 (Types.Slice (Types.Uint Types.U8)), true))\n                              ];\n                            output =\n                            (Types.RawPtr\n                               { Types.mutbl = true;\n                                 ty = (Types.Uint Types.U8) });\n                            unsafety = Types.Normal }\n                          })\n                     };\n                   impl = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars =\n                        [(Types.Region\n                            (Types.BrNamed\n                               ({ Types.index = (2, 56470); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"slice\");\n                                     disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.ValueNs \"as_mut_ptr\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.LifetimeNs \"'_\");\n                                      disambiguator = 0 }\n                                    ]\n                                  },\n                                \"'_\")))\n                          ];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [(Types.Ref\n                              ({ Types.kind =\n                                 (Types.ReLateBound\n                                    (\"0\",\n                                     { Types.kind =\n                                       (Types.BrNamed\n                                          ({ Types.index = (2, 56470);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"slice\");\n                                                disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.ValueNs \"as_mut_ptr\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.LifetimeNs \"'_\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             },\n                                           \"'_\"));\n                                       var = \"0\" }))\n                                 },\n                               (Types.Slice (Types.Uint Types.U8)), true))\n                            ];\n                          output =\n                          (Types.RawPtr\n                             { Types.mutbl = true; ty = (Types.Uint Types.U8)\n                               });\n                          unsafety = Types.Normal }\n                        })};\n                 hir_id = (Some (\"206\", \"28\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"31\"; line = \"54\" };\n                   lo = { Types.col = \"12\"; line = \"54\" } };\n                 ty =\n                 (Types.RawPtr\n                    { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                 }\n               ];\n             fn_span =\n             { Types.filename =\n               (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n               hi = { Types.col = \"9\"; line = \"55\" };\n               lo = { Types.col = \"8\"; line = \"51\" } };\n             from_hir_call = true;\n             fun' =\n             { Types.attributes = [];\n               contents =\n               Types.GlobalName {\n                 id =\n                 { Types.index = (22, 147); krate = \"libcrux_hacl\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"bindings\");\n                      disambiguator = 0 };\n                     { Types.data = Types.ForeignMod; disambiguator = 50 };\n                     { Types.data = (Types.ValueNs \"Hacl_SHA3_sha3_512\");\n                       disambiguator = 0 }\n                     ]\n                   }};\n               hir_id = None;\n               span =\n               { Types.filename =\n                 (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                 hi = { Types.col = \"26\"; line = \"51\" };\n                 lo = { Types.col = \"8\"; line = \"51\" } };\n               ty =\n               (Types.Arrow\n                  { Types.bound_vars = [];\n                    value =\n                    { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                      c_variadic = false;\n                      inputs =\n                      [(Types.Uint Types.U32);\n                        (Types.RawPtr\n                           { Types.mutbl = true; ty = (Types.Uint Types.U8) });\n                        (Types.RawPtr\n                           { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                        ];\n                      output = (Types.Tuple []); unsafety = Types.Unsafe }\n                    })\n               };\n             impl = None;\n             ty =\n             (Types.Arrow\n                { Types.bound_vars = [];\n                  value =\n                  { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                    c_variadic = false;\n                    inputs =\n                    [(Types.Uint Types.U32);\n                      (Types.RawPtr\n                         { Types.mutbl = true; ty = (Types.Uint Types.U8) });\n                      (Types.RawPtr\n                         { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                      ];\n                    output = (Types.Tuple []); unsafety = Types.Unsafe }\n                  })};\n           hir_id = (Some (\"206\", \"11\"));\n           span =\n           { Types.filename =\n             (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n             hi = { Types.col = \"9\"; line = \"55\" };\n             lo = { Types.col = \"8\"; line = \"51\" } };\n           ty = (Types.Tuple []) };\n         scope = { Types.data = Types.Node; id = \"32\" }};\n       opt_destruction_scope =\n       (Some { Types.data = Types.Destruction; id = \"32\" }) }\n      ];\n    targeted_by_break = false};\n  hir_id = (Some (\"206\", \"10\"));\n  span =\n  { Types.filename = (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n    hi = { Types.col = \"5\"; line = \"56\" };\n    lo = { Types.col = \"4\"; line = \"50\" } };\n  ty = (Types.Tuple []) }"

  in
  digest

let shake128 (#v_BYTES: usize) (data: slice u8) : array u8 v_BYTES =
  let out:array u8 v_BYTES = Rust_primitives.Hax.repeat 0uy v_BYTES in
  let _:Prims.unit =
    Rust_primitives.Hax.failure ""
      "{ Types.attributes = [];\n  contents =\n  Types.Block {expr = None; opt_destruction_scope = None;\n    region_scope = { Types.data = Types.Node; id = \"38\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename = (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n      hi = { Types.col = \"5\"; line = \"70\" };\n      lo = { Types.col = \"4\"; line = \"63\" } };\n    stmts =\n    [{ Types.kind =\n       Types.Expr {\n         expr =\n         { Types.attributes = [];\n           contents =\n           Types.Call {\n             args =\n             [{ Types.attributes = [];\n                contents =\n                Types.Cast {\n                  source =\n                  { Types.attributes = [];\n                    contents =\n                    Types.Call {\n                      args =\n                      [{ Types.attributes = [];\n                         contents =\n                         Types.Borrow {\n                           arg =\n                           { Types.attributes = [];\n                             contents =\n                             Types.Deref {\n                               arg =\n                               { Types.attributes = [];\n                                 contents =\n                                 Types.VarRef {\n                                   id =\n                                   { Types.id =\n                                     { Types.local_id = \"2\";\n                                       owner =\n                                       { Types.index = (0, 209);\n                                         krate = \"libcrux\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"hacl\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"sha3\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.ValueNs \"shake128\");\n                                             disambiguator = 0 }\n                                           ]\n                                         }\n                                       };\n                                     name = \"data\" }};\n                                 hir_id = None;\n                                 span =\n                                 { Types.filename =\n                                   (Types.Real\n                                      (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                   hi = { Types.col = \"16\"; line = \"65\" };\n                                   lo = { Types.col = \"12\"; line = \"65\" } };\n                                 ty =\n                                 (Types.Ref\n                                    ({ Types.kind = Types.ReErased },\n                                     (Types.Slice (Types.Uint Types.U8)),\n                                     false))\n                                 }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath \"src/hacl/sha3.rs\"));\n                               hi = { Types.col = \"22\"; line = \"65\" };\n                               lo = { Types.col = \"12\"; line = \"65\" } };\n                             ty = (Types.Slice (Types.Uint Types.U8)) };\n                           borrow_kind = Types.Shared};\n                         hir_id = (Some (\"209\", \"18\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                           hi = { Types.col = \"22\"; line = \"65\" };\n                           lo = { Types.col = \"12\"; line = \"65\" } };\n                         ty =\n                         (Types.Ref\n                            ({ Types.kind = Types.ReErased },\n                             (Types.Slice (Types.Uint Types.U8)), false))\n                         }\n                        ];\n                      fn_span =\n                      { Types.filename =\n                        (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                        hi = { Types.col = \"22\"; line = \"65\" };\n                        lo = { Types.col = \"17\"; line = \"65\" } };\n                      from_hir_call = true;\n                      fun' =\n                      { Types.attributes = [];\n                        contents =\n                        Types.GlobalName {\n                          id =\n                          { Types.index = (2, 10989); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"slice\");\n                               disambiguator = 0 };\n                              { Types.data = Types.Impl; disambiguator = 0 };\n                              { Types.data = (Types.ValueNs \"len\");\n                                disambiguator = 0 }\n                              ]\n                            }};\n                        hir_id = None;\n                        span =\n                        { Types.filename =\n                          (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                          hi = { Types.col = \"20\"; line = \"65\" };\n                          lo = { Types.col = \"17\"; line = \"65\" } };\n                        ty =\n                        (Types.Arrow\n                           { Types.bound_vars =\n                             [(Types.Region\n                                 (Types.BrNamed\n                                    ({ Types.index = (2, 56447);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"slice\");\n                                          disambiguator = 0 };\n                                         { Types.data = Types.Impl;\n                                           disambiguator = 0 };\n                                         { Types.data = (Types.ValueNs \"len\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.LifetimeNs \"'_\");\n                                           disambiguator = 0 }\n                                         ]\n                                       },\n                                     \"'_\")))\n                               ];\n                             value =\n                             { Types.abi = Types.Abi {todo = \"Rust\"};\n                               c_variadic = false;\n                               inputs =\n                               [(Types.Ref\n                                   ({ Types.kind =\n                                      (Types.ReLateBound\n                                         (\"0\",\n                                          { Types.kind =\n                                            (Types.BrNamed\n                                               ({ Types.index = (2, 56447);\n                                                  krate = \"core\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs \"slice\");\n                                                     disambiguator = 0 };\n                                                    { Types.data = Types.Impl;\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.ValueNs \"len\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.LifetimeNs \"'_\");\n                                                      disambiguator = 0 }\n                                                    ]\n                                                  },\n                                                \"'_\"));\n                                            var = \"0\" }))\n                                      },\n                                    (Types.Slice (Types.Uint Types.U8)),\n                                    false))\n                                 ];\n                               output = (Types.Uint Types.Usize);\n                               unsafety = Types.Normal }\n                             })\n                        };\n                      impl = None;\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars =\n                           [(Types.Region\n                               (Types.BrNamed\n                                  ({ Types.index = (2, 56447);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"slice\");\n                                        disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.ValueNs \"len\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.LifetimeNs \"'_\");\n                                         disambiguator = 0 }\n                                       ]\n                                     },\n                                   \"'_\")))\n                             ];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.Ref\n                                 ({ Types.kind =\n                                    (Types.ReLateBound\n                                       (\"0\",\n                                        { Types.kind =\n                                          (Types.BrNamed\n                                             ({ Types.index = (2, 56447);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"slice\");\n                                                   disambiguator = 0 };\n                                                  { Types.data = Types.Impl;\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.ValueNs \"len\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.LifetimeNs \"'_\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                },\n                                              \"'_\"));\n                                          var = \"0\" }))\n                                    },\n                                  (Types.Slice (Types.Uint Types.U8)), false))\n                               ];\n                             output = (Types.Uint Types.Usize);\n                             unsafety = Types.Normal }\n                           })};\n                    hir_id = (Some (\"209\", \"16\"));\n                    span =\n                    { Types.filename =\n                      (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                      hi = { Types.col = \"22\"; line = \"65\" };\n                      lo = { Types.col = \"12\"; line = \"65\" } };\n                    ty = (Types.Uint Types.Usize) }};\n                hir_id = (Some (\"209\", \"15\"));\n                span =\n                { Types.filename =\n                  (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                  hi = { Types.col = \"29\"; line = \"65\" };\n                  lo = { Types.col = \"12\"; line = \"65\" } };\n                ty = (Types.Uint Types.U32) };\n               { Types.attributes = [];\n                 contents =\n                 Types.ValueTypeAscription {\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.Cast {\n                       source =\n                       { Types.attributes = [];\n                         contents =\n                         Types.Call {\n                           args =\n                           [{ Types.attributes = [];\n                              contents =\n                              Types.Borrow {\n                                arg =\n                                { Types.attributes = [];\n                                  contents =\n                                  Types.Deref {\n                                    arg =\n                                    { Types.attributes = [];\n                                      contents =\n                                      Types.VarRef {\n                                        id =\n                                        { Types.id =\n                                          { Types.local_id = \"2\";\n                                            owner =\n                                            { Types.index = (0, 209);\n                                              krate = \"libcrux\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"hacl\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"sha3\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.ValueNs \"shake128\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              }\n                                            };\n                                          name = \"data\" }};\n                                      hir_id = None;\n                                      span =\n                                      { Types.filename =\n                                        (Types.Real\n                                           (Types.LocalPath\n                                              \"src/hacl/sha3.rs\"));\n                                        hi =\n                                        { Types.col = \"16\"; line = \"66\" };\n                                        lo =\n                                        { Types.col = \"12\"; line = \"66\" } };\n                                      ty =\n                                      (Types.Ref\n                                         ({ Types.kind = Types.ReErased },\n                                          (Types.Slice (Types.Uint Types.U8)),\n                                          false))\n                                      }};\n                                  hir_id = None;\n                                  span =\n                                  { Types.filename =\n                                    (Types.Real\n                                       (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                    hi = { Types.col = \"25\"; line = \"66\" };\n                                    lo = { Types.col = \"12\"; line = \"66\" } };\n                                  ty = (Types.Slice (Types.Uint Types.U8)) };\n                                borrow_kind = Types.Shared};\n                              hir_id = (Some (\"209\", \"25\"));\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"25\"; line = \"66\" };\n                                lo = { Types.col = \"12\"; line = \"66\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  (Types.Slice (Types.Uint Types.U8)), false))\n                              }\n                             ];\n                           fn_span =\n                           { Types.filename =\n                             (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                             hi = { Types.col = \"25\"; line = \"66\" };\n                             lo = { Types.col = \"17\"; line = \"66\" } };\n                           from_hir_call = true;\n                           fun' =\n                           { Types.attributes = [];\n                             contents =\n                             Types.GlobalName {\n                               id =\n                               { Types.index = (2, 11039); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"slice\");\n                                    disambiguator = 0 };\n                                   { Types.data = Types.Impl;\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.ValueNs \"as_ptr\");\n                                     disambiguator = 0 }\n                                   ]\n                                 }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath \"src/hacl/sha3.rs\"));\n                               hi = { Types.col = \"23\"; line = \"66\" };\n                               lo = { Types.col = \"17\"; line = \"66\" } };\n                             ty =\n                             (Types.Arrow\n                                { Types.bound_vars =\n                                  [(Types.Region\n                                      (Types.BrNamed\n                                         ({ Types.index = (2, 56469);\n                                            krate = \"core\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"slice\");\n                                               disambiguator = 0 };\n                                              { Types.data = Types.Impl;\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.ValueNs \"as_ptr\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.LifetimeNs \"'_\");\n                                                disambiguator = 0 }\n                                              ]\n                                            },\n                                          \"'_\")))\n                                    ];\n                                  value =\n                                  { Types.abi = Types.Abi {todo = \"Rust\"};\n                                    c_variadic = false;\n                                    inputs =\n                                    [(Types.Ref\n                                        ({ Types.kind =\n                                           (Types.ReLateBound\n                                              (\"0\",\n                                               { Types.kind =\n                                                 (Types.BrNamed\n                                                    ({ Types.index =\n                                                       (2, 56469);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"slice\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           Types.Impl;\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.ValueNs\n                                                              \"as_ptr\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.LifetimeNs\n                                                              \"'_\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       },\n                                                     \"'_\"));\n                                                 var = \"0\" }))\n                                           },\n                                         (Types.Slice (Types.Uint Types.U8)),\n                                         false))\n                                      ];\n                                    output =\n                                    (Types.RawPtr\n                                       { Types.mutbl = false;\n                                         ty = (Types.Uint Types.U8) });\n                                    unsafety = Types.Normal }\n                                  })\n                             };\n                           impl = None;\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars =\n                                [(Types.Region\n                                    (Types.BrNamed\n                                       ({ Types.index = (2, 56469);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"slice\");\n                                             disambiguator = 0 };\n                                            { Types.data = Types.Impl;\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.ValueNs \"as_ptr\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.LifetimeNs \"'_\");\n                                              disambiguator = 0 }\n                                            ]\n                                          },\n                                        \"'_\")))\n                                  ];\n                                value =\n                                { Types.abi = Types.Abi {todo = \"Rust\"};\n                                  c_variadic = false;\n                                  inputs =\n                                  [(Types.Ref\n                                      ({ Types.kind =\n                                         (Types.ReLateBound\n                                            (\"0\",\n                                             { Types.kind =\n                                               (Types.BrNamed\n                                                  ({ Types.index = (2, 56469);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"slice\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         Types.Impl;\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.ValueNs\n                                                            \"as_ptr\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.LifetimeNs\n                                                            \"'_\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     },\n                                                   \"'_\"));\n                                               var = \"0\" }))\n                                         },\n                                       (Types.Slice (Types.Uint Types.U8)),\n                                       false))\n                                    ];\n                                  output =\n                                  (Types.RawPtr\n                                     { Types.mutbl = false;\n                                       ty = (Types.Uint Types.U8) });\n                                  unsafety = Types.Normal }\n                                })};\n                         hir_id = (Some (\"209\", \"23\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                           hi = { Types.col = \"25\"; line = \"66\" };\n                           lo = { Types.col = \"12\"; line = \"66\" } };\n                         ty =\n                         (Types.RawPtr\n                            { Types.mutbl = false; ty = (Types.Uint Types.U8)\n                              })\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"30\"; line = \"66\" };\n                       lo = { Types.col = \"12\"; line = \"66\" } };\n                     ty =\n                     (Types.RawPtr\n                        { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                     };\n                   user_ty =\n                   (Some { Types.max_universe = \"0\";\n                           value = (Types.Todo \"Ty(^0)\");\n                           variables = [(Types.Ty (Types.General \"0\"))] })};\n                 hir_id = (Some (\"209\", \"22\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"30\"; line = \"66\" };\n                   lo = { Types.col = \"12\"; line = \"66\" } };\n                 ty =\n                 (Types.RawPtr\n                    { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                 };\n               { Types.attributes = [];\n                 contents =\n                 Types.Cast {\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.ConstParam {\n                       def_id =\n                       { Types.index = (0, 210); krate = \"libcrux\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"hacl\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"sha3\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"shake128\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"BYTES\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       param = { Types.index = 0; name = \"BYTES\" }};\n                     hir_id = (Some (\"209\", \"29\"));\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"17\"; line = \"67\" };\n                       lo = { Types.col = \"12\"; line = \"67\" } };\n                     ty = (Types.Uint Types.Usize) }};\n                 hir_id = (Some (\"209\", \"28\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"24\"; line = \"67\" };\n                   lo = { Types.col = \"12\"; line = \"67\" } };\n                 ty = (Types.Uint Types.U32) };\n               { Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Pointer {cast = Types.Unsize;\n                        source =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Borrow {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"10\";\n                                    owner =\n                                    { Types.index = (0, 209);\n                                      krate = \"libcrux\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"hacl\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"sha3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.ValueNs \"shake128\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"out\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"15\"; line = \"68\" };\n                                lo = { Types.col = \"12\"; line = \"68\" } };\n                              ty =\n                              (Types.Array\n                                 ((Types.Uint Types.U8),\n                                  { Types.attributes = [];\n                                    contents =\n                                    Types.ConstRef {\n                                      id =\n                                      { Types.index = 0; name = \"BYTES\" }};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath \"src/lib.rs\"));\n                                      hi = { Types.col = \"0\"; line = \"1\" };\n                                      lo = { Types.col = \"0\"; line = \"1\" } };\n                                    ty = (Types.Uint Types.Usize) }))\n                              };\n                            borrow_kind =\n                            Types.Mut {allow_two_phase_borrow = true}};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                            hi = { Types.col = \"28\"; line = \"68\" };\n                            lo = { Types.col = \"12\"; line = \"68\" } };\n                          ty =\n                          (Types.Ref\n                             ({ Types.kind = Types.ReErased },\n                              (Types.Array\n                                 ((Types.Uint Types.U8),\n                                  { Types.attributes = [];\n                                    contents =\n                                    Types.ConstRef {\n                                      id =\n                                      { Types.index = 0; name = \"BYTES\" }};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath \"src/lib.rs\"));\n                                      hi = { Types.col = \"0\"; line = \"1\" };\n                                      lo = { Types.col = \"0\"; line = \"1\" } };\n                                    ty = (Types.Uint Types.Usize) })),\n                              true))\n                          }};\n                      hir_id = (Some (\"209\", \"35\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                        hi = { Types.col = \"28\"; line = \"68\" };\n                        lo = { Types.col = \"12\"; line = \"68\" } };\n                      ty =\n                      (Types.Ref\n                         ({ Types.kind = Types.ReErased },\n                          (Types.Slice (Types.Uint Types.U8)), true))\n                      }\n                     ];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                     hi = { Types.col = \"28\"; line = \"68\" };\n                     lo = { Types.col = \"16\"; line = \"68\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 11040); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"slice\");\n                            disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"as_mut_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"26\"; line = \"68\" };\n                       lo = { Types.col = \"16\"; line = \"68\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars =\n                          [(Types.Region\n                              (Types.BrNamed\n                                 ({ Types.index = (2, 56470); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"slice\");\n                                       disambiguator = 0 };\n                                      { Types.data = Types.Impl;\n                                        disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.ValueNs \"as_mut_ptr\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.LifetimeNs \"'_\");\n                                        disambiguator = 0 }\n                                      ]\n                                    },\n                                  \"'_\")))\n                            ];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [(Types.Ref\n                                ({ Types.kind =\n                                   (Types.ReLateBound\n                                      (\"0\",\n                                       { Types.kind =\n                                         (Types.BrNamed\n                                            ({ Types.index = (2, 56470);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"slice\");\n                                                  disambiguator = 0 };\n                                                 { Types.data = Types.Impl;\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.ValueNs\n                                                      \"as_mut_ptr\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.LifetimeNs \"'_\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               },\n                                             \"'_\"));\n                                         var = \"0\" }))\n                                   },\n                                 (Types.Slice (Types.Uint Types.U8)), true))\n                              ];\n                            output =\n                            (Types.RawPtr\n                               { Types.mutbl = true;\n                                 ty = (Types.Uint Types.U8) });\n                            unsafety = Types.Normal }\n                          })\n                     };\n                   impl = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars =\n                        [(Types.Region\n                            (Types.BrNamed\n                               ({ Types.index = (2, 56470); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"slice\");\n                                     disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.ValueNs \"as_mut_ptr\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.LifetimeNs \"'_\");\n                                      disambiguator = 0 }\n                                    ]\n                                  },\n                                \"'_\")))\n                          ];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [(Types.Ref\n                              ({ Types.kind =\n                                 (Types.ReLateBound\n                                    (\"0\",\n                                     { Types.kind =\n                                       (Types.BrNamed\n                                          ({ Types.index = (2, 56470);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"slice\");\n                                                disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.ValueNs \"as_mut_ptr\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.LifetimeNs \"'_\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             },\n                                           \"'_\"));\n                                       var = \"0\" }))\n                                 },\n                               (Types.Slice (Types.Uint Types.U8)), true))\n                            ];\n                          output =\n                          (Types.RawPtr\n                             { Types.mutbl = true; ty = (Types.Uint Types.U8)\n                               });\n                          unsafety = Types.Normal }\n                        })};\n                 hir_id = (Some (\"209\", \"33\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"28\"; line = \"68\" };\n                   lo = { Types.col = \"12\"; line = \"68\" } };\n                 ty =\n                 (Types.RawPtr\n                    { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                 }\n               ];\n             fn_span =\n             { Types.filename =\n               (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n               hi = { Types.col = \"9\"; line = \"69\" };\n               lo = { Types.col = \"8\"; line = \"64\" } };\n             from_hir_call = true;\n             fun' =\n             { Types.attributes = [];\n               contents =\n               Types.GlobalName {\n                 id =\n                 { Types.index = (22, 137); krate = \"libcrux_hacl\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"bindings\");\n                      disambiguator = 0 };\n                     { Types.data = Types.ForeignMod; disambiguator = 45 };\n                     { Types.data = (Types.ValueNs \"Hacl_SHA3_shake128_hacl\");\n                       disambiguator = 0 }\n                     ]\n                   }};\n               hir_id = None;\n               span =\n               { Types.filename =\n                 (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                 hi = { Types.col = \"31\"; line = \"64\" };\n                 lo = { Types.col = \"8\"; line = \"64\" } };\n               ty =\n               (Types.Arrow\n                  { Types.bound_vars = [];\n                    value =\n                    { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                      c_variadic = false;\n                      inputs =\n                      [(Types.Uint Types.U32);\n                        (Types.RawPtr\n                           { Types.mutbl = true; ty = (Types.Uint Types.U8) });\n                        (Types.Uint Types.U32);\n                        (Types.RawPtr\n                           { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                        ];\n                      output = (Types.Tuple []); unsafety = Types.Unsafe }\n                    })\n               };\n             impl = None;\n             ty =\n             (Types.Arrow\n                { Types.bound_vars = [];\n                  value =\n                  { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                    c_variadic = false;\n                    inputs =\n                    [(Types.Uint Types.U32);\n                      (Types.RawPtr\n                         { Types.mutbl = true; ty = (Types.Uint Types.U8) });\n                      (Types.Uint Types.U32);\n                      (Types.RawPtr\n                         { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                      ];\n                    output = (Types.Tuple []); unsafety = Types.Unsafe }\n                  })};\n           hir_id = (Some (\"209\", \"12\"));\n           span =\n           { Types.filename =\n             (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n             hi = { Types.col = \"9\"; line = \"69\" };\n             lo = { Types.col = \"8\"; line = \"64\" } };\n           ty = (Types.Tuple []) };\n         scope = { Types.data = Types.Node; id = \"37\" }};\n       opt_destruction_scope =\n       (Some { Types.data = Types.Destruction; id = \"37\" }) }\n      ];\n    targeted_by_break = false};\n  hir_id = (Some (\"209\", \"11\"));\n  span =\n  { Types.filename = (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n    hi = { Types.col = \"5\"; line = \"70\" };\n    lo = { Types.col = \"4\"; line = \"63\" } };\n  ty = (Types.Tuple []) }"

  in
  out

let shake256 (#v_BYTES: usize) (data: slice u8) : array u8 v_BYTES =
  let out:array u8 v_BYTES = Rust_primitives.Hax.repeat 0uy v_BYTES in
  let _:Prims.unit =
    Rust_primitives.Hax.failure ""
      "{ Types.attributes = [];\n  contents =\n  Types.Block {expr = None; opt_destruction_scope = None;\n    region_scope = { Types.data = Types.Node; id = \"38\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename = (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n      hi = { Types.col = \"5\"; line = \"87\" };\n      lo = { Types.col = \"4\"; line = \"80\" } };\n    stmts =\n    [{ Types.kind =\n       Types.Expr {\n         expr =\n         { Types.attributes = [];\n           contents =\n           Types.Call {\n             args =\n             [{ Types.attributes = [];\n                contents =\n                Types.Cast {\n                  source =\n                  { Types.attributes = [];\n                    contents =\n                    Types.Call {\n                      args =\n                      [{ Types.attributes = [];\n                         contents =\n                         Types.Borrow {\n                           arg =\n                           { Types.attributes = [];\n                             contents =\n                             Types.Deref {\n                               arg =\n                               { Types.attributes = [];\n                                 contents =\n                                 Types.VarRef {\n                                   id =\n                                   { Types.id =\n                                     { Types.local_id = \"2\";\n                                       owner =\n                                       { Types.index = (0, 213);\n                                         krate = \"libcrux\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"hacl\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"sha3\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.ValueNs \"shake256\");\n                                             disambiguator = 0 }\n                                           ]\n                                         }\n                                       };\n                                     name = \"data\" }};\n                                 hir_id = None;\n                                 span =\n                                 { Types.filename =\n                                   (Types.Real\n                                      (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                   hi = { Types.col = \"16\"; line = \"82\" };\n                                   lo = { Types.col = \"12\"; line = \"82\" } };\n                                 ty =\n                                 (Types.Ref\n                                    ({ Types.kind = Types.ReErased },\n                                     (Types.Slice (Types.Uint Types.U8)),\n                                     false))\n                                 }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath \"src/hacl/sha3.rs\"));\n                               hi = { Types.col = \"22\"; line = \"82\" };\n                               lo = { Types.col = \"12\"; line = \"82\" } };\n                             ty = (Types.Slice (Types.Uint Types.U8)) };\n                           borrow_kind = Types.Shared};\n                         hir_id = (Some (\"213\", \"18\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                           hi = { Types.col = \"22\"; line = \"82\" };\n                           lo = { Types.col = \"12\"; line = \"82\" } };\n                         ty =\n                         (Types.Ref\n                            ({ Types.kind = Types.ReErased },\n                             (Types.Slice (Types.Uint Types.U8)), false))\n                         }\n                        ];\n                      fn_span =\n                      { Types.filename =\n                        (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                        hi = { Types.col = \"22\"; line = \"82\" };\n                        lo = { Types.col = \"17\"; line = \"82\" } };\n                      from_hir_call = true;\n                      fun' =\n                      { Types.attributes = [];\n                        contents =\n                        Types.GlobalName {\n                          id =\n                          { Types.index = (2, 10989); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"slice\");\n                               disambiguator = 0 };\n                              { Types.data = Types.Impl; disambiguator = 0 };\n                              { Types.data = (Types.ValueNs \"len\");\n                                disambiguator = 0 }\n                              ]\n                            }};\n                        hir_id = None;\n                        span =\n                        { Types.filename =\n                          (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                          hi = { Types.col = \"20\"; line = \"82\" };\n                          lo = { Types.col = \"17\"; line = \"82\" } };\n                        ty =\n                        (Types.Arrow\n                           { Types.bound_vars =\n                             [(Types.Region\n                                 (Types.BrNamed\n                                    ({ Types.index = (2, 56447);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"slice\");\n                                          disambiguator = 0 };\n                                         { Types.data = Types.Impl;\n                                           disambiguator = 0 };\n                                         { Types.data = (Types.ValueNs \"len\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.LifetimeNs \"'_\");\n                                           disambiguator = 0 }\n                                         ]\n                                       },\n                                     \"'_\")))\n                               ];\n                             value =\n                             { Types.abi = Types.Abi {todo = \"Rust\"};\n                               c_variadic = false;\n                               inputs =\n                               [(Types.Ref\n                                   ({ Types.kind =\n                                      (Types.ReLateBound\n                                         (\"0\",\n                                          { Types.kind =\n                                            (Types.BrNamed\n                                               ({ Types.index = (2, 56447);\n                                                  krate = \"core\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs \"slice\");\n                                                     disambiguator = 0 };\n                                                    { Types.data = Types.Impl;\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.ValueNs \"len\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.LifetimeNs \"'_\");\n                                                      disambiguator = 0 }\n                                                    ]\n                                                  },\n                                                \"'_\"));\n                                            var = \"0\" }))\n                                      },\n                                    (Types.Slice (Types.Uint Types.U8)),\n                                    false))\n                                 ];\n                               output = (Types.Uint Types.Usize);\n                               unsafety = Types.Normal }\n                             })\n                        };\n                      impl = None;\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars =\n                           [(Types.Region\n                               (Types.BrNamed\n                                  ({ Types.index = (2, 56447);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"slice\");\n                                        disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.ValueNs \"len\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.LifetimeNs \"'_\");\n                                         disambiguator = 0 }\n                                       ]\n                                     },\n                                   \"'_\")))\n                             ];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.Ref\n                                 ({ Types.kind =\n                                    (Types.ReLateBound\n                                       (\"0\",\n                                        { Types.kind =\n                                          (Types.BrNamed\n                                             ({ Types.index = (2, 56447);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"slice\");\n                                                   disambiguator = 0 };\n                                                  { Types.data = Types.Impl;\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.ValueNs \"len\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.LifetimeNs \"'_\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                },\n                                              \"'_\"));\n                                          var = \"0\" }))\n                                    },\n                                  (Types.Slice (Types.Uint Types.U8)), false))\n                               ];\n                             output = (Types.Uint Types.Usize);\n                             unsafety = Types.Normal }\n                           })};\n                    hir_id = (Some (\"213\", \"16\"));\n                    span =\n                    { Types.filename =\n                      (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                      hi = { Types.col = \"22\"; line = \"82\" };\n                      lo = { Types.col = \"12\"; line = \"82\" } };\n                    ty = (Types.Uint Types.Usize) }};\n                hir_id = (Some (\"213\", \"15\"));\n                span =\n                { Types.filename =\n                  (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                  hi = { Types.col = \"29\"; line = \"82\" };\n                  lo = { Types.col = \"12\"; line = \"82\" } };\n                ty = (Types.Uint Types.U32) };\n               { Types.attributes = [];\n                 contents =\n                 Types.ValueTypeAscription {\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.Cast {\n                       source =\n                       { Types.attributes = [];\n                         contents =\n                         Types.Call {\n                           args =\n                           [{ Types.attributes = [];\n                              contents =\n                              Types.Borrow {\n                                arg =\n                                { Types.attributes = [];\n                                  contents =\n                                  Types.Deref {\n                                    arg =\n                                    { Types.attributes = [];\n                                      contents =\n                                      Types.VarRef {\n                                        id =\n                                        { Types.id =\n                                          { Types.local_id = \"2\";\n                                            owner =\n                                            { Types.index = (0, 213);\n                                              krate = \"libcrux\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"hacl\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"sha3\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.ValueNs \"shake256\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              }\n                                            };\n                                          name = \"data\" }};\n                                      hir_id = None;\n                                      span =\n                                      { Types.filename =\n                                        (Types.Real\n                                           (Types.LocalPath\n                                              \"src/hacl/sha3.rs\"));\n                                        hi =\n                                        { Types.col = \"16\"; line = \"83\" };\n                                        lo =\n                                        { Types.col = \"12\"; line = \"83\" } };\n                                      ty =\n                                      (Types.Ref\n                                         ({ Types.kind = Types.ReErased },\n                                          (Types.Slice (Types.Uint Types.U8)),\n                                          false))\n                                      }};\n                                  hir_id = None;\n                                  span =\n                                  { Types.filename =\n                                    (Types.Real\n                                       (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                    hi = { Types.col = \"25\"; line = \"83\" };\n                                    lo = { Types.col = \"12\"; line = \"83\" } };\n                                  ty = (Types.Slice (Types.Uint Types.U8)) };\n                                borrow_kind = Types.Shared};\n                              hir_id = (Some (\"213\", \"25\"));\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"25\"; line = \"83\" };\n                                lo = { Types.col = \"12\"; line = \"83\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  (Types.Slice (Types.Uint Types.U8)), false))\n                              }\n                             ];\n                           fn_span =\n                           { Types.filename =\n                             (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                             hi = { Types.col = \"25\"; line = \"83\" };\n                             lo = { Types.col = \"17\"; line = \"83\" } };\n                           from_hir_call = true;\n                           fun' =\n                           { Types.attributes = [];\n                             contents =\n                             Types.GlobalName {\n                               id =\n                               { Types.index = (2, 11039); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"slice\");\n                                    disambiguator = 0 };\n                                   { Types.data = Types.Impl;\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.ValueNs \"as_ptr\");\n                                     disambiguator = 0 }\n                                   ]\n                                 }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath \"src/hacl/sha3.rs\"));\n                               hi = { Types.col = \"23\"; line = \"83\" };\n                               lo = { Types.col = \"17\"; line = \"83\" } };\n                             ty =\n                             (Types.Arrow\n                                { Types.bound_vars =\n                                  [(Types.Region\n                                      (Types.BrNamed\n                                         ({ Types.index = (2, 56469);\n                                            krate = \"core\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"slice\");\n                                               disambiguator = 0 };\n                                              { Types.data = Types.Impl;\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.ValueNs \"as_ptr\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.LifetimeNs \"'_\");\n                                                disambiguator = 0 }\n                                              ]\n                                            },\n                                          \"'_\")))\n                                    ];\n                                  value =\n                                  { Types.abi = Types.Abi {todo = \"Rust\"};\n                                    c_variadic = false;\n                                    inputs =\n                                    [(Types.Ref\n                                        ({ Types.kind =\n                                           (Types.ReLateBound\n                                              (\"0\",\n                                               { Types.kind =\n                                                 (Types.BrNamed\n                                                    ({ Types.index =\n                                                       (2, 56469);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"slice\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           Types.Impl;\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.ValueNs\n                                                              \"as_ptr\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.LifetimeNs\n                                                              \"'_\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       },\n                                                     \"'_\"));\n                                                 var = \"0\" }))\n                                           },\n                                         (Types.Slice (Types.Uint Types.U8)),\n                                         false))\n                                      ];\n                                    output =\n                                    (Types.RawPtr\n                                       { Types.mutbl = false;\n                                         ty = (Types.Uint Types.U8) });\n                                    unsafety = Types.Normal }\n                                  })\n                             };\n                           impl = None;\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars =\n                                [(Types.Region\n                                    (Types.BrNamed\n                                       ({ Types.index = (2, 56469);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"slice\");\n                                             disambiguator = 0 };\n                                            { Types.data = Types.Impl;\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.ValueNs \"as_ptr\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.LifetimeNs \"'_\");\n                                              disambiguator = 0 }\n                                            ]\n                                          },\n                                        \"'_\")))\n                                  ];\n                                value =\n                                { Types.abi = Types.Abi {todo = \"Rust\"};\n                                  c_variadic = false;\n                                  inputs =\n                                  [(Types.Ref\n                                      ({ Types.kind =\n                                         (Types.ReLateBound\n                                            (\"0\",\n                                             { Types.kind =\n                                               (Types.BrNamed\n                                                  ({ Types.index = (2, 56469);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"slice\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         Types.Impl;\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.ValueNs\n                                                            \"as_ptr\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.LifetimeNs\n                                                            \"'_\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     },\n                                                   \"'_\"));\n                                               var = \"0\" }))\n                                         },\n                                       (Types.Slice (Types.Uint Types.U8)),\n                                       false))\n                                    ];\n                                  output =\n                                  (Types.RawPtr\n                                     { Types.mutbl = false;\n                                       ty = (Types.Uint Types.U8) });\n                                  unsafety = Types.Normal }\n                                })};\n                         hir_id = (Some (\"213\", \"23\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                           hi = { Types.col = \"25\"; line = \"83\" };\n                           lo = { Types.col = \"12\"; line = \"83\" } };\n                         ty =\n                         (Types.RawPtr\n                            { Types.mutbl = false; ty = (Types.Uint Types.U8)\n                              })\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"30\"; line = \"83\" };\n                       lo = { Types.col = \"12\"; line = \"83\" } };\n                     ty =\n                     (Types.RawPtr\n                        { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                     };\n                   user_ty =\n                   (Some { Types.max_universe = \"0\";\n                           value = (Types.Todo \"Ty(^0)\");\n                           variables = [(Types.Ty (Types.General \"0\"))] })};\n                 hir_id = (Some (\"213\", \"22\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"30\"; line = \"83\" };\n                   lo = { Types.col = \"12\"; line = \"83\" } };\n                 ty =\n                 (Types.RawPtr\n                    { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                 };\n               { Types.attributes = [];\n                 contents =\n                 Types.Cast {\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.ConstParam {\n                       def_id =\n                       { Types.index = (0, 214); krate = \"libcrux\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"hacl\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"sha3\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"shake256\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"BYTES\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       param = { Types.index = 0; name = \"BYTES\" }};\n                     hir_id = (Some (\"213\", \"29\"));\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"17\"; line = \"84\" };\n                       lo = { Types.col = \"12\"; line = \"84\" } };\n                     ty = (Types.Uint Types.Usize) }};\n                 hir_id = (Some (\"213\", \"28\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"24\"; line = \"84\" };\n                   lo = { Types.col = \"12\"; line = \"84\" } };\n                 ty = (Types.Uint Types.U32) };\n               { Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Pointer {cast = Types.Unsize;\n                        source =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Borrow {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"10\";\n                                    owner =\n                                    { Types.index = (0, 213);\n                                      krate = \"libcrux\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"hacl\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"sha3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.ValueNs \"shake256\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"out\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath \"src/hacl/sha3.rs\"));\n                                hi = { Types.col = \"15\"; line = \"85\" };\n                                lo = { Types.col = \"12\"; line = \"85\" } };\n                              ty =\n                              (Types.Array\n                                 ((Types.Uint Types.U8),\n                                  { Types.attributes = [];\n                                    contents =\n                                    Types.ConstRef {\n                                      id =\n                                      { Types.index = 0; name = \"BYTES\" }};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath \"src/lib.rs\"));\n                                      hi = { Types.col = \"0\"; line = \"1\" };\n                                      lo = { Types.col = \"0\"; line = \"1\" } };\n                                    ty = (Types.Uint Types.Usize) }))\n                              };\n                            borrow_kind =\n                            Types.Mut {allow_two_phase_borrow = true}};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                            hi = { Types.col = \"28\"; line = \"85\" };\n                            lo = { Types.col = \"12\"; line = \"85\" } };\n                          ty =\n                          (Types.Ref\n                             ({ Types.kind = Types.ReErased },\n                              (Types.Array\n                                 ((Types.Uint Types.U8),\n                                  { Types.attributes = [];\n                                    contents =\n                                    Types.ConstRef {\n                                      id =\n                                      { Types.index = 0; name = \"BYTES\" }};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath \"src/lib.rs\"));\n                                      hi = { Types.col = \"0\"; line = \"1\" };\n                                      lo = { Types.col = \"0\"; line = \"1\" } };\n                                    ty = (Types.Uint Types.Usize) })),\n                              true))\n                          }};\n                      hir_id = (Some (\"213\", \"35\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                        hi = { Types.col = \"28\"; line = \"85\" };\n                        lo = { Types.col = \"12\"; line = \"85\" } };\n                      ty =\n                      (Types.Ref\n                         ({ Types.kind = Types.ReErased },\n                          (Types.Slice (Types.Uint Types.U8)), true))\n                      }\n                     ];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                     hi = { Types.col = \"28\"; line = \"85\" };\n                     lo = { Types.col = \"16\"; line = \"85\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 11040); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"slice\");\n                            disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"as_mut_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                       hi = { Types.col = \"26\"; line = \"85\" };\n                       lo = { Types.col = \"16\"; line = \"85\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars =\n                          [(Types.Region\n                              (Types.BrNamed\n                                 ({ Types.index = (2, 56470); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"slice\");\n                                       disambiguator = 0 };\n                                      { Types.data = Types.Impl;\n                                        disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.ValueNs \"as_mut_ptr\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.LifetimeNs \"'_\");\n                                        disambiguator = 0 }\n                                      ]\n                                    },\n                                  \"'_\")))\n                            ];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [(Types.Ref\n                                ({ Types.kind =\n                                   (Types.ReLateBound\n                                      (\"0\",\n                                       { Types.kind =\n                                         (Types.BrNamed\n                                            ({ Types.index = (2, 56470);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"slice\");\n                                                  disambiguator = 0 };\n                                                 { Types.data = Types.Impl;\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.ValueNs\n                                                      \"as_mut_ptr\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.LifetimeNs \"'_\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               },\n                                             \"'_\"));\n                                         var = \"0\" }))\n                                   },\n                                 (Types.Slice (Types.Uint Types.U8)), true))\n                              ];\n                            output =\n                            (Types.RawPtr\n                               { Types.mutbl = true;\n                                 ty = (Types.Uint Types.U8) });\n                            unsafety = Types.Normal }\n                          })\n                     };\n                   impl = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars =\n                        [(Types.Region\n                            (Types.BrNamed\n                               ({ Types.index = (2, 56470); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"slice\");\n                                     disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.ValueNs \"as_mut_ptr\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.LifetimeNs \"'_\");\n                                      disambiguator = 0 }\n                                    ]\n                                  },\n                                \"'_\")))\n                          ];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [(Types.Ref\n                              ({ Types.kind =\n                                 (Types.ReLateBound\n                                    (\"0\",\n                                     { Types.kind =\n                                       (Types.BrNamed\n                                          ({ Types.index = (2, 56470);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"slice\");\n                                                disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.ValueNs \"as_mut_ptr\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.LifetimeNs \"'_\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             },\n                                           \"'_\"));\n                                       var = \"0\" }))\n                                 },\n                               (Types.Slice (Types.Uint Types.U8)), true))\n                            ];\n                          output =\n                          (Types.RawPtr\n                             { Types.mutbl = true; ty = (Types.Uint Types.U8)\n                               });\n                          unsafety = Types.Normal }\n                        })};\n                 hir_id = (Some (\"213\", \"33\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                   hi = { Types.col = \"28\"; line = \"85\" };\n                   lo = { Types.col = \"12\"; line = \"85\" } };\n                 ty =\n                 (Types.RawPtr\n                    { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                 }\n               ];\n             fn_span =\n             { Types.filename =\n               (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n               hi = { Types.col = \"9\"; line = \"86\" };\n               lo = { Types.col = \"8\"; line = \"81\" } };\n             from_hir_call = true;\n             fun' =\n             { Types.attributes = [];\n               contents =\n               Types.GlobalName {\n                 id =\n                 { Types.index = (22, 139); krate = \"libcrux_hacl\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"bindings\");\n                      disambiguator = 0 };\n                     { Types.data = Types.ForeignMod; disambiguator = 46 };\n                     { Types.data = (Types.ValueNs \"Hacl_SHA3_shake256_hacl\");\n                       disambiguator = 0 }\n                     ]\n                   }};\n               hir_id = None;\n               span =\n               { Types.filename =\n                 (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n                 hi = { Types.col = \"31\"; line = \"81\" };\n                 lo = { Types.col = \"8\"; line = \"81\" } };\n               ty =\n               (Types.Arrow\n                  { Types.bound_vars = [];\n                    value =\n                    { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                      c_variadic = false;\n                      inputs =\n                      [(Types.Uint Types.U32);\n                        (Types.RawPtr\n                           { Types.mutbl = true; ty = (Types.Uint Types.U8) });\n                        (Types.Uint Types.U32);\n                        (Types.RawPtr\n                           { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                        ];\n                      output = (Types.Tuple []); unsafety = Types.Unsafe }\n                    })\n               };\n             impl = None;\n             ty =\n             (Types.Arrow\n                { Types.bound_vars = [];\n                  value =\n                  { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                    c_variadic = false;\n                    inputs =\n                    [(Types.Uint Types.U32);\n                      (Types.RawPtr\n                         { Types.mutbl = true; ty = (Types.Uint Types.U8) });\n                      (Types.Uint Types.U32);\n                      (Types.RawPtr\n                         { Types.mutbl = true; ty = (Types.Uint Types.U8) })\n                      ];\n                    output = (Types.Tuple []); unsafety = Types.Unsafe }\n                  })};\n           hir_id = (Some (\"213\", \"12\"));\n           span =\n           { Types.filename =\n             (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n             hi = { Types.col = \"9\"; line = \"86\" };\n             lo = { Types.col = \"8\"; line = \"81\" } };\n           ty = (Types.Tuple []) };\n         scope = { Types.data = Types.Node; id = \"37\" }};\n       opt_destruction_scope =\n       (Some { Types.data = Types.Destruction; id = \"37\" }) }\n      ];\n    targeted_by_break = false};\n  hir_id = (Some (\"213\", \"11\"));\n  span =\n  { Types.filename = (Types.Real (Types.LocalPath \"src/hacl/sha3.rs\"));\n    hi = { Types.col = \"5\"; line = \"87\" };\n    lo = { Types.col = \"4\"; line = \"80\" } };\n  ty = (Types.Tuple []) }"

  in
  out