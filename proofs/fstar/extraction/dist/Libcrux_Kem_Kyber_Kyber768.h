/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/franziskus/repos/everest/karamel/krml -tmpdir dist/ -skip-compilation obj/FStar_Pervasives_Native.krml obj/FStar_Pervasives.krml obj/FStar_Squash.krml obj/FStar_Classical.krml obj/FStar_StrongExcludedMiddle.krml obj/FStar_Classical_Sugar.krml obj/FStar_List_Tot_Base.krml obj/FStar_List_Tot_Properties.krml obj/FStar_List_Tot.krml obj/FStar_Float.krml obj/FStar_Mul.krml obj/FStar_Preorder.krml obj/FStar_Sealed.krml obj/FStar_Range.krml obj/FStar_Calc.krml obj/FStar_Seq_Base.krml obj/FStar_Seq_Properties.krml obj/FStar_Seq.krml obj/FStar_Math_Lib.krml obj/FStar_Math_Lemmas.krml obj/FStar_BitVector.krml obj/FStar_UInt.krml obj/FStar_UInt32.krml obj/FStar_Char.krml obj/FStar_Issue.krml obj/FStar_Monotonic_Pure.krml obj/FStar_VConfig.krml obj/FStar_Sealed_Inhabited.krml obj/FStar_Order.krml obj/FStar_FunctionalExtensionality.krml obj/FStar_Set.krml obj/FStar_Ghost.krml obj/FStar_ErasedLogic.krml obj/FStar_PropositionalExtensionality.krml obj/FStar_PredicateExtensionality.krml obj/FStar_TSet.krml obj/FStar_Monotonic_Heap.krml obj/FStar_Heap.krml obj/FStar_Map.krml obj/FStar_Monotonic_Witnessed.krml obj/FStar_Monotonic_HyperHeap.krml obj/FStar_Monotonic_HyperStack.krml obj/FStar_HyperStack.krml obj/FStar_HyperStack_ST.krml obj/FStar_Universe.krml obj/FStar_GSet.krml obj/FStar_ModifiesGen.krml obj/FStar_IndefiniteDescription.krml obj/FStar_BigOps.krml obj/LowStar_Monotonic_Buffer.krml obj/LowStar_Buffer.krml obj/LowStar_BufferOps.krml obj/Spec_Loops.krml obj/FStar_UInt64.krml obj/C_Loops.krml obj/FStar_Int.krml obj/FStar_Int64.krml obj/FStar_Int32.krml obj/FStar_Int16.krml obj/FStar_Int8.krml obj/FStar_UInt16.krml obj/FStar_UInt8.krml obj/FStar_Int_Cast.krml obj/FStar_Exn.krml obj/FStar_ST.krml obj/FStar_All.krml obj/FStar_List.krml obj/FStar_BV.krml obj/FStar_UInt128.krml obj/FStar_Int_Cast_Full.krml obj/FStar_Int128.krml obj/Lib_IntTypes.krml obj/Lib_Loops.krml obj/Rust_primitives_Integers.krml obj/Rust_primitives_Arrays.krml obj/Rust_primitives.krml obj/Core_Array.krml obj/Core_Result.krml obj/Core_Ops_Index_IndexMut.krml obj/Core_Ops_Index.krml obj/Core_Ops.krml obj/Core_Slice_Iter.krml obj/Core_Slice.krml obj/Rust_primitives_Hax.krml obj/Core_Iter_Adapters_Step_by.krml obj/Core_Iter_Adapters_Enumerate.krml obj/Core_Iter_Traits_Iterator.krml obj/Core_Ops_Range.krml obj/Core_Iter.krml obj/Core_Num_Error.krml obj/Core_Num.krml obj/Core.krml obj/Libcrux_Digest.krml obj/Libcrux_Kem_Kyber_Constants.krml obj/Rust_primitives_Hax_Monomorphized_update_at.krml obj/Libcrux_Kem_Kyber_Constant_time_ops.krml obj/Core_Option.krml obj/Core_Convert.krml obj/Libcrux_Kem_Kyber_Hash_functions.krml obj/Core_Panicking.krml obj/Libcrux_Kem_Kyber_Conversions.krml obj/Core_Ops_Arith_Neg.krml obj/Libcrux_Kem_Kyber_Arithmetic.krml obj/Libcrux_Kem_Kyber_Ntt.krml obj/Libcrux_Kem_Kyber_Matrix.krml obj/Libcrux_Kem_Kyber_Compress.krml obj/Libcrux_Kem_Kyber_Serialize.krml obj/Core_Clone.krml obj/Libcrux_Kem_Kyber_Types.krml obj/Libcrux_Kem_Kyber_Sampling.krml obj/Libcrux_Kem_Kyber_Ind_cpa.krml obj/Libcrux_Kem_Kyber.krml obj/Libcrux_Kem_Kyber_Kyber768.krml -warn-error @4@5@18 -fparentheses -bundle LowStar.*,Prims -bundle Libcrux.Kem.Kyber.Kyber768=Rust_primitives.*,Rust_primitives,Core.*,Core,Hax_lib.*,Hax_lib,Libcrux.Digest,Libcrux.Kem.Kyber.*,Libcrux.Kem.Kyber -minimal -bundle FStar.* -add-include <stdint.h> -add-include "krml/internal/target.h" -bundle Hacl.Spec.*,Spec.*[rename=Hacl_Spec] -bundle Lib.*[rename=Hacl_Lib] -drop Lib.IntVector.Intrinsics -drop Lib.IntTypes.Intrinsics -drop Lib.IntTypes.Intrinsics_128 -fparentheses -fno-shadow -fcurly-braces -fnoreturn-else -bundle Prims,C.Failure,C,C.String,C.Loops,Spec.Loops,C.Endianness,FStar.*,LowStar.*[rename=Hacl_Krmllib] -bundle Meta.* -minimal -add-early-include <string.h> -add-early-include "krml/internal/types.h" -add-early-include "krml/lowstar_endianness.h" -dmonomorphization
  F* version: d0aa54cf
  KaRaMeL version: 4ad70196
 */

#ifndef __Libcrux_Kem_Kyber_Kyber768_H
#define __Libcrux_Kem_Kyber_Kyber768_H

#include "krmllib.h"

#include <string.h>
#include "krml/internal/types.h"
#include "krml/lowstar_endianness.h"

#include <stdint.h>
#include "krml/internal/target.h"

#define Libcrux_Kem_Kyber_Types_Error_RejectionSampling 0

typedef uint8_t Libcrux_Kem_Kyber_Types_t_Error;

typedef struct Libcrux_Kem_Kyber_Types_t_KyberKeyPair_s
{
  uint8_t *f_sk;
  uint8_t *f_pk;
}
Libcrux_Kem_Kyber_Types_t_KyberKeyPair;

#define Core_Result_Result_Ok 0
#define Core_Result_Result_Err 1

typedef uint8_t Core_Result_t_Result___uint8_t__Core_Array_t_TryFromSliceError_tags;

typedef struct K___Libcrux_Kem_Kyber_Types_t_KyberCiphertext__uint8_t__s
{
  uint8_t *fst;
  uint8_t *snd;
}
K___Libcrux_Kem_Kyber_Types_t_KyberCiphertext__uint8_t_;

typedef struct
Core_Result_t_Result__Libcrux_Kem_Kyber_Types_t_KyberCiphertext____uint8_t__Libcrux_Kem_Kyber_Types_t_Error_s
{
  Core_Result_t_Result___uint8_t__Core_Array_t_TryFromSliceError_tags tag;
  union {
    K___Libcrux_Kem_Kyber_Types_t_KyberCiphertext__uint8_t_ case_Result_Ok;
    Libcrux_Kem_Kyber_Types_t_Error case_Result_Err;
  }
  ;
}
Core_Result_t_Result__Libcrux_Kem_Kyber_Types_t_KyberCiphertext____uint8_t__Libcrux_Kem_Kyber_Types_t_Error;

typedef struct
Core_Result_t_Result__Libcrux_Kem_Kyber_Types_t_KyberKeyPair_Libcrux_Kem_Kyber_Types_t_Error_s
{
  Core_Result_t_Result___uint8_t__Core_Array_t_TryFromSliceError_tags tag;
  union {
    Libcrux_Kem_Kyber_Types_t_KyberKeyPair case_Result_Ok;
    Libcrux_Kem_Kyber_Types_t_Error case_Result_Err;
  }
  ;
}
Core_Result_t_Result__Libcrux_Kem_Kyber_Types_t_KyberKeyPair_Libcrux_Kem_Kyber_Types_t_Error;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_ETA1;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_ETA1_RANDOMNESS_SIZE;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_ETA2;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_ETA2_RANDOMNESS_SIZE;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_RANK_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_CPA_PKE_SECRET_KEY_SIZE_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_RANKED_BYTES_PER_RING_ELEMENT_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_T_AS_NTT_ENCODED_SIZE_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_CPA_PKE_PUBLIC_KEY_SIZE_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_SECRET_KEY_SIZE_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_VECTOR_U_COMPRESSION_FACTOR_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_C1_BLOCK_SIZE_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_C1_SIZE_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_VECTOR_V_COMPRESSION_FACTOR_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_C2_SIZE_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_CPA_PKE_CIPHERTEXT_SIZE_768_;

extern uint32_t Libcrux_Kem_Kyber_Kyber768_v_IMPLICIT_REJECTION_HASH_INPUT_SIZE;

typedef uint8_t *Libcrux_Kem_Kyber_Kyber768_t_Kyber768Ciphertext;

typedef uint8_t *Libcrux_Kem_Kyber_Kyber768_t_Kyber768PrivateKey;

typedef uint8_t *Libcrux_Kem_Kyber_Kyber768_t_Kyber768PublicKey;

uint8_t *Libcrux_Kem_Kyber_Kyber768_decapsulate_768_(uint8_t *secret_key, uint8_t *ciphertext);

Core_Result_t_Result__Libcrux_Kem_Kyber_Types_t_KyberCiphertext____uint8_t__Libcrux_Kem_Kyber_Types_t_Error
Libcrux_Kem_Kyber_Kyber768_encapsulate_768_(uint8_t *public_key, uint8_t *randomness);

Core_Result_t_Result__Libcrux_Kem_Kyber_Types_t_KyberKeyPair_Libcrux_Kem_Kyber_Types_t_Error
Libcrux_Kem_Kyber_Kyber768_generate_key_pair_768_(uint8_t *randomness);


#define __Libcrux_Kem_Kyber_Kyber768_H_DEFINED
#endif
