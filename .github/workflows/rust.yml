name: Build & Test

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        bits: [32, 64]
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        exclude:
          - bits: 32
            os: "macos-latest"
          # FIXME: Linking isn't working here yet for hacl #42
          - bits: 32
            os: "windows-latest"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - run: echo "RUST_TARGET_FLAG=" > $GITHUB_ENV
        if: ${{ matrix.bits == 64 }}

      - name: Setup Ubuntu x86
        if: ${{ matrix.bits == 32 &&  matrix.os == 'ubuntu-latest' }}
        run: |
          rustup target add i686-unknown-linux-gnu
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib

      # Set up 32 bit systems

      - name: Config Windows x86
        run: echo "RUST_TARGET_FLAG=--target=i686-pc-windows-msvc" > $GITHUB_ENV
        if: ${{ matrix.bits == 32 && matrix.os == 'windows-latest' }}

      - name: Config Linux x86
        run: |
          echo "RUST_TARGET_FLAG=--target=i686-unknown-linux-gnu" > $GITHUB_ENV
        if: ${{ matrix.bits == 32 && matrix.os == 'ubuntu-latest' }}

      # Set up windows

      - name: Setup Windows x86
        if: ${{ matrix.bits == 32 && matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x86-windows-static-md

      - name: Setup Windows x64
        if: ${{ matrix.bits == 64 && matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md

      # Build ...

      - name: Build
        run: cargo build --verbose $RUST_TARGET_FLAG

      - name: Build Release
        run: cargo build --verbose --release $RUST_TARGET_FLAG

      # Test ...

      - name: Test
        run: cargo test --verbose $RUST_TARGET_FLAG

      - name: Test Release
        run: cargo test --verbose --release $RUST_TARGET_FLAG

      - name: Build sys/hacl
        working-directory: sys/hacl
        run: cargo build --verbose $RUST_TARGET_FLAG

  wasm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: mymindstorm/setup-emsdk@v11

      - name: Setup
        run: |
          rustup target add wasm32-unknown-unknown
          cargo install wasm-pack

      - run: CC=emcc AR=emar wasm-pack test --node --features wasm
