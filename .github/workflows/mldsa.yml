name: ML-DSA

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev", "*"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        bits: [32, 64]
        os:
          - macos-13 # Intel mac
          - macos-latest # macos-14 m1
          - ubuntu-latest
          - windows-latest
        exclude:
          - bits: 32
            os: "macos-latest"
          - bits: 32
            os: "macos-13"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: libcrux-ml-dsa

    steps:
      - uses: actions/checkout@v4

      - name: Update dependencies
        run: cargo update

      - run: echo "RUST_TARGET_FLAG=" > $GITHUB_ENV
        if: ${{ matrix.bits == 64 }}

      - name: 🛠️ Setup Rust Nightly
        run: rustup toolchain install nightly

      - name: 🛠️ Setup Ubuntu x86
        if: ${{ matrix.bits == 32 &&  matrix.os == 'ubuntu-latest' }}
        run: |
          rustup target add i686-unknown-linux-gnu
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib

      - name: 🛠️ Setup Ubuntu x64
        if: ${{ matrix.bits == 64 &&  matrix.os == 'ubuntu-latest' }}
        run: |
          rustup target add aarch64-unknown-linux-gnu

      # Set up 32 bit systems

      - name: 🛠️ Config Windows x86
        run: echo "RUST_TARGET_FLAG=--target=i686-pc-windows-msvc" > $GITHUB_ENV
        if: ${{ matrix.bits == 32 && matrix.os == 'windows-latest' }}

      - name: 🛠️ Config Linux x86
        run: |
          echo "RUST_TARGET_FLAG=--target=i686-unknown-linux-gnu" > $GITHUB_ENV
        if: ${{ matrix.bits == 32 && matrix.os == 'ubuntu-latest' }}

      # Build ...

      - name: 🔨 Build
        run: |
          rustc --print=cfg
          cargo build --verbose $RUST_TARGET_FLAG

      - name: 🔨 Build Release
        run: cargo build --verbose --release $RUST_TARGET_FLAG

      - name: 🏃🏻 Asan MacOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: RUSTDOCFLAGS=-Zsanitizer=address RUSTFLAGS=-Zsanitizer=address cargo +nightly test --release --target aarch64-apple-darwin

      # Test ML-DSA

      - name: 🏃🏻‍♀️ Test
        run: |
          cargo clean
          cargo test --verbose $RUST_TARGET_FLAG

      - name: 🏃🏻‍♀️ Test Release
        run: |
          cargo clean
          cargo test --verbose --release $RUST_TARGET_FLAG
