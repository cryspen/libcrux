name: AEAD - Build & Test

on:
  merge_group:
  push:
    branches: ["main", "dev"]
    paths: ['crates/primitives/aead', 'chacha20poly1305', 'traits/src/aead']
  pull_request:
    branches: ["main", "dev", "*"]
    paths: ['crates/primitives/aead', 'chacha20poly1305', 'traits/src/aead']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-intel-mac:
    if: ${{ github.event_name != 'merge_group' }}
    runs-on: macos-13
    defaults:
      run:
        shell: bash
        working-directory: crates/primitives/aead
    steps:
      - uses: actions/checkout@v5

      - name: 🛠️ Setup Rust Nightly
        run: rustup toolchain install nightly-2024-12-14

      - name: 🔨 Build
        run: |
          rustc --print=cfg
          cargo build --verbose $RUST_TARGET_FLAG

  build:
    if: ${{ github.event_name != 'merge_group' }}
    strategy:
      fail-fast: false
      matrix:
        bits: [32, 64]
        os:
          - macos-latest # macos-15 on apple silicon
          - ubuntu-latest
          - windows-latest
        exclude:
          - bits: 32
            os: "macos-latest"
          - bits: 32 # FIXME: Linking isn't working here yet for hacl #42
            os: "windows-latest"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: crates/primitives/aead

    steps:
      - uses: actions/checkout@v5

      - run: echo "RUST_TARGET_FLAG=" > $GITHUB_ENV
        if: ${{ matrix.bits == 64 }}

      - name: 🛠️ Setup Rust Nightly
        run: rustup toolchain install nightly-2024-12-14

      - name: 🛠️ Setup Ubuntu x86
        if: ${{ matrix.bits == 32 &&  matrix.os == 'ubuntu-latest' }}
        run: |
          rustup target add i686-unknown-linux-gnu
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib

      # Set up 32 bit systems

      - name: 🛠️ Config Windows x86
        run: echo "RUST_TARGET_FLAG=--target=i686-pc-windows-msvc" > $GITHUB_ENV
        if: ${{ matrix.bits == 32 && matrix.os == 'windows-latest' }}

      - name: 🛠️ Config Linux x86
        run: |
          echo "RUST_TARGET_FLAG=--target=i686-unknown-linux-gnu" > $GITHUB_ENV
        if: ${{ matrix.bits == 32 && matrix.os == 'ubuntu-latest' }}

      # Build ...

      - name: 🧐 Check Secret Independene
        run: |
          rustc --print=cfg
          cargo check --verbose -F check-secret-independence -p libcrux-aead
          cargo check --verbose -F check-secret-independence -p libcrux-chacha20poly1305

      - name: 🔨 Build
        run: |
          rustc --print=cfg
          cargo build --verbose $RUST_TARGET_FLAG

      - name: 🔨 Build Release
        run: cargo build --verbose --release $RUST_TARGET_FLAG

      # TODO: https://github.com/cryspen/libcrux/issues/717
      - name: 🏃🏻 Asan MacOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: RUSTDOCFLAGS=-Zsanitizer=address RUSTFLAGS=-Zsanitizer=address cargo +nightly-2024-12-14 test --release --target aarch64-apple-darwin

      # - name: ⬆ Upload build
      #   uses: ./.github/actions/upload_artifacts
      #   with:
      #     name: build_${{ matrix.os }}_${{ matrix.bits }}

      # We get false positives here.
      # TODO: Figure out what is going on here
      # - name: 🏃🏻 Asan Linux
      #   if: ${{ matrix.bits == 64 && matrix.os == 'ubuntu-latest' }}
      #   run: RUSTDOCFLAGS=-Zsanitizer=address RUSTFLAGS=-Zsanitizer=address cargo +nightly test --release --target x86_64-unknown-linux-gnu

      # Test ...

      - name: 🏃🏻‍♀️ Test
        run: |
          cargo clean
          cargo test --verbose $RUST_TARGET_FLAG

      - name: 🏃🏻‍♀️ Test Release
        run: |
          cargo clean
          cargo test --verbose --release $RUST_TARGET_FLAG

      - name: 🏃🏻‍♀️ Test Portable
        run: |
          cargo clean
          LIBCRUX_DISABLE_SIMD128=1 LIBCRUX_DISABLE_SIMD256=1 cargo test --verbose $RUST_TARGET_FLAG

      - name: 🏃🏻‍♀️ Test Portable Release
        run: |
          cargo clean
          LIBCRUX_DISABLE_SIMD128=1 LIBCRUX_DISABLE_SIMD256=1 cargo test --verbose --release $RUST_TARGET_FLAG
  aead-build-test-status:
    if: ${{ always() }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Successful
        if: ${{ !(contains(needs.*.result, 'failure')) }} 
        run: exit 0 
      - name: Failing
        if: ${{ (contains(needs.*.result, 'failure')) }} 
        run: exit 1 
