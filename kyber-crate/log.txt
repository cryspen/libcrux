1/465
Visiting global: libcrux_kyber::constants::FIELD_MODULUS
  global libcrux_kyber::constants::FIELD_MODULUS : i32 = libcrux_kyber::constants::FIELD_MODULUS
Corresponding body:  fn libcrux_kyber::constants::FIELD_MODULUS() -> i32  
{
    v@0 : i32;

    v@0 := (3329: i32 : i32);
    return
  }
2/465
Visiting global: libcrux_kyber::constants::BITS_PER_COEFFICIENT
  global libcrux_kyber::constants::BITS_PER_COEFFICIENT : usize = libcrux_kyber::constants::BITS_PER_COEFFICIENT
Corresponding body:  fn libcrux_kyber::constants::BITS_PER_COEFFICIENT() -> usize  
{
    v@0 : usize;

    v@0 := (12: usize : usize);
    return
  }
3/465
Visiting global: libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT
  global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT : usize = libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT
Corresponding body:  fn libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT() -> usize  
{
    v@0 : usize;

    v@0 := (256: usize : usize);
    return
  }
4/465
Visiting global: libcrux_kyber::constants::BITS_PER_RING_ELEMENT
  global libcrux_kyber::constants::BITS_PER_RING_ELEMENT : usize = libcrux_kyber::constants::BITS_PER_RING_ELEMENT
Corresponding body:  fn libcrux_kyber::constants::BITS_PER_RING_ELEMENT() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@0 := move v@1 * (12: usize : usize);
    return
  }
5/465
Visiting global: libcrux_kyber::constants::BYTES_PER_RING_ELEMENT
  global libcrux_kyber::constants::BYTES_PER_RING_ELEMENT : usize = libcrux_kyber::constants::BYTES_PER_RING_ELEMENT
Corresponding body:  fn libcrux_kyber::constants::BYTES_PER_RING_ELEMENT() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::constants::BITS_PER_RING_ELEMENT;
    v@0 := move v@1 / (8: usize : usize);
    return
  }
6/465
Visiting global: libcrux_kyber::constants::REJECTION_SAMPLING_SEED_SIZE
  global libcrux_kyber::constants::REJECTION_SAMPLING_SEED_SIZE : usize = libcrux_kyber::constants::REJECTION_SAMPLING_SEED_SIZE
Corresponding body:  fn libcrux_kyber::constants::REJECTION_SAMPLING_SEED_SIZE() -> usize  
{
    v@0 : usize;

    v@0 := (168: usize : usize) * (5: usize : usize);
    return
  }
7/465
Visiting global: libcrux_kyber::constants::SHARED_SECRET_SIZE
  global libcrux_kyber::constants::SHARED_SECRET_SIZE : usize = libcrux_kyber::constants::SHARED_SECRET_SIZE
Corresponding body:  fn libcrux_kyber::constants::SHARED_SECRET_SIZE() -> usize  
{
    v@0 : usize;

    v@0 := (32: usize : usize);
    return
  }
8/465
Visiting global: libcrux_kyber::constants::CPA_PKE_KEY_GENERATION_SEED_SIZE
  global libcrux_kyber::constants::CPA_PKE_KEY_GENERATION_SEED_SIZE : usize = libcrux_kyber::constants::CPA_PKE_KEY_GENERATION_SEED_SIZE
Corresponding body:  fn libcrux_kyber::constants::CPA_PKE_KEY_GENERATION_SEED_SIZE() -> usize  
{
    v@0 : usize;

    v@0 := (32: usize : usize);
    return
  }
9/465
Visiting global: libcrux_kyber::constants::H_DIGEST_SIZE
  global libcrux_kyber::constants::H_DIGEST_SIZE : usize = libcrux_kyber::constants::H_DIGEST_SIZE
Corresponding body:  fn libcrux_kyber::constants::H_DIGEST_SIZE() -> usize  
{
    v@0 : usize;

    v@0 := (32: usize : usize);
    return
  }
10/465
Visiting global: libcrux_kyber::arithmetic::MONTGOMERY_SHIFT
  global libcrux_kyber::arithmetic::MONTGOMERY_SHIFT : u8 = libcrux_kyber::arithmetic::MONTGOMERY_SHIFT
Corresponding body:  fn libcrux_kyber::arithmetic::MONTGOMERY_SHIFT() -> u8  
{
    v@0 : u8;

    v@0 := (16: u8 : u8);
    return
  }
11/465
Visiting global: libcrux_kyber::arithmetic::MONTGOMERY_R
  global libcrux_kyber::arithmetic::MONTGOMERY_R : i32 = libcrux_kyber::arithmetic::MONTGOMERY_R
Corresponding body:  fn libcrux_kyber::arithmetic::MONTGOMERY_R() -> i32  
{
    v@0 : i32;
    v@1 : u8;

    v@1 := global libcrux_kyber::arithmetic::MONTGOMERY_SHIFT;
    v@0 := (1: i32 : i32) << move v@1;
    return
  }
12/465
Visiting function: libcrux_kyber::arithmetic::get_n_least_significant_bits
  fn libcrux_kyber::arithmetic::get_n_least_significant_bits(n^1 : u8, value^2 : u32) -> u32  
{
    v@0 : u32;
    n^1 : u8;
    value^2 : u32;
    v@3 : u32;
    v@4 : u32;
    v@5 : u32;
    v@6 : u8;

    v@3 := copy value^2;
    v@6 := copy n^1;
    v@5 := (1: u32 : u32) << move v@6;
    drop v@6;
    v@4 := move v@5 - (1: u32 : u32);
    drop v@5;
    v@0 := move v@3 & move v@4;
    drop v@4;
    drop v@3;
    return
  }
13/465
Visiting global: libcrux_kyber::arithmetic::BARRETT_SHIFT
  global libcrux_kyber::arithmetic::BARRETT_SHIFT : i64 = libcrux_kyber::arithmetic::BARRETT_SHIFT
Corresponding body:  fn libcrux_kyber::arithmetic::BARRETT_SHIFT() -> i64  
{
    v@0 : i64;

    v@0 := (26: i64 : i64);
    return
  }
14/465
Visiting global: libcrux_kyber::arithmetic::BARRETT_R
  global libcrux_kyber::arithmetic::BARRETT_R : i64 = libcrux_kyber::arithmetic::BARRETT_R
Corresponding body:  fn libcrux_kyber::arithmetic::BARRETT_R() -> i64  
{
    v@0 : i64;
    v@1 : i64;
    v@2 : i64;

    v@1 := global libcrux_kyber::arithmetic::BARRETT_SHIFT;
    v@2 := global libcrux_kyber::arithmetic::BARRETT_SHIFT;
    v@0 := (1: i64 : i64) << move v@2;
    return
  }
15/465
Visiting global: libcrux_kyber::arithmetic::BARRETT_MULTIPLIER
  global libcrux_kyber::arithmetic::BARRETT_MULTIPLIER : i64 = libcrux_kyber::arithmetic::BARRETT_MULTIPLIER
Corresponding body:  fn libcrux_kyber::arithmetic::BARRETT_MULTIPLIER() -> i64  
{
    v@0 : i64;

    v@0 := (20159: i64 : i64);
    return
  }
16/465
17/465
Visiting opaque function: core::convert::num::{i64#59}::from
  opaque fn core::convert::num::{i64#59}::from(i32) -> i64
18/465
19/465
Visiting opaque function: core::convert::From::from
  opaque fn core::convert::From::from<Self, T>(T) -> Self
20/465
Visiting function: libcrux_kyber::arithmetic::barrett_reduce
  fn libcrux_kyber::arithmetic::barrett_reduce(value^1 : i32) -> i32  
{
    v@0 : i32;
    value^1 : i32;
    t^2 : i64;
    v@3 : i64;
    v@4 : i64;
    v@5 : i32;
    v@6 : i64;
    quotient^7 : i32;
    v@8 : i64;
    v@9 : i64;
    result^10 : i32;
    v@11 : i32;
    v@12 : i32;
    v@13 : i32;
    v@14 : i64;
    v@15 : i64;
    v@16 : i64;
    v@17 : i32;

    v@5 := copy value^1;
    v@4 := move core::convert::num::{i64#59}::from(move v@5);
    drop v@5;
    v@14 := global libcrux_kyber::arithmetic::BARRETT_MULTIPLIER;
    v@3 := move v@4 * move v@14;
    drop v@4;
    v@15 := global libcrux_kyber::arithmetic::BARRETT_R;
    v@6 := move v@15 >> (1: i32 : i32);
    t^2 := move v@3 + move v@6;
    drop v@6;
    drop v@3;
    fake_read t^2;
    v@9 := copy t^2;
    v@16 := global libcrux_kyber::arithmetic::BARRETT_SHIFT;
    v@8 := move v@9 >> move v@16;
    drop v@9;
    quotient^7 := cast<i64,i32> move v@8;
    drop v@8;
    fake_read quotient^7;
    v@11 := copy value^1;
    v@13 := copy quotient^7;
    v@17 := global libcrux_kyber::constants::FIELD_MODULUS;
    v@12 := move v@13 * move v@17;
    drop v@13;
    result^10 := move v@11 - move v@12;
    drop v@12;
    drop v@11;
    fake_read result^10;
    v@0 := copy result^10;
    drop result^10;
    drop quotient^7;
    drop t^2;
    return
  }
Visiting call: core::convert::num::{i64#59}::from
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: core::convert::From<i64, i32>::from
--> name: core::convert::num::{i64#59}::from
--> args: i32, ret: i64
21/465
Visiting global: libcrux_kyber::arithmetic::INVERSE_OF_MODULUS_MOD_R
  global libcrux_kyber::arithmetic::INVERSE_OF_MODULUS_MOD_R : u32 = libcrux_kyber::arithmetic::INVERSE_OF_MODULUS_MOD_R
Corresponding body:  fn libcrux_kyber::arithmetic::INVERSE_OF_MODULUS_MOD_R() -> u32  
{
    v@0 : u32;

    v@0 := (62209: u32 : u32);
    return
  }
22/465
Visiting function: libcrux_kyber::arithmetic::montgomery_reduce
  fn libcrux_kyber::arithmetic::montgomery_reduce(value^1 : i32) -> i32  
{
    v@0 : i32;
    value^1 : i32;
    v@2 : i32;
    t^3 : u32;
    v@4 : u32;
    v@5 : u32;
    v@6 : i32;
    k^7 : i16;
    v@8 : u32;
    v@9 : u32;
    k_times_modulus^10 : i32;
    v@11 : i32;
    v@12 : i16;
    c^13 : i32;
    v@14 : i32;
    value_high^15 : i32;
    v@16 : i32;
    v@17 : i32;
    v@18 : i32;
    v@19 : i32;
    v@20 : u8;
    v@21 : u32;
    v@22 : u8;
    v@23 : i32;
    v@24 : u8;
    v@25 : u8;

    v@19 := global libcrux_kyber::arithmetic::MONTGOMERY_R;
    v@2 := move v@19;
    fake_read v@2;
    drop v@2;
    v@6 := copy value^1;
    v@5 := cast<i32,u32> move v@6;
    drop v@6;
    v@20 := global libcrux_kyber::arithmetic::MONTGOMERY_SHIFT;
    v@4 := move libcrux_kyber::arithmetic::get_n_least_significant_bits(move v@20, move v@5);
    drop v@5;
    v@21 := global libcrux_kyber::arithmetic::INVERSE_OF_MODULUS_MOD_R;
    t^3 := move v@4 * move v@21;
    drop v@4;
    fake_read t^3;
    v@9 := copy t^3;
    v@22 := global libcrux_kyber::arithmetic::MONTGOMERY_SHIFT;
    v@8 := move libcrux_kyber::arithmetic::get_n_least_significant_bits(move v@22, move v@9);
    drop v@9;
    k^7 := cast<u32,i16> move v@8;
    drop v@8;
    fake_read k^7;
    v@12 := copy k^7;
    v@11 := cast<i16,i32> move v@12;
    drop v@12;
    v@23 := global libcrux_kyber::constants::FIELD_MODULUS;
    k_times_modulus^10 := move v@11 * move v@23;
    drop v@11;
    fake_read k_times_modulus^10;
    v@14 := copy k_times_modulus^10;
    v@24 := global libcrux_kyber::arithmetic::MONTGOMERY_SHIFT;
    c^13 := move v@14 >> move v@24;
    drop v@14;
    fake_read c^13;
    v@16 := copy value^1;
    v@25 := global libcrux_kyber::arithmetic::MONTGOMERY_SHIFT;
    value_high^15 := move v@16 >> move v@25;
    drop v@16;
    fake_read value_high^15;
    v@17 := copy value_high^15;
    v@18 := copy c^13;
    v@0 := move v@17 - move v@18;
    drop v@18;
    drop v@17;
    drop value_high^15;
    drop c^13;
    drop k_times_modulus^10;
    drop k^7;
    drop t^3;
    return
  }
Visiting call: libcrux_kyber::arithmetic::get_n_least_significant_bits
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::get_n_least_significant_bits
--> name: libcrux_kyber::arithmetic::get_n_least_significant_bits
--> args: u8 ++ u32, ret: u32
Visiting call: libcrux_kyber::arithmetic::get_n_least_significant_bits
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::get_n_least_significant_bits
--> name: libcrux_kyber::arithmetic::get_n_least_significant_bits
--> args: u8 ++ u32, ret: u32
23/465
Visiting function: libcrux_kyber::arithmetic::montgomery_multiply_sfe_by_fer
  fn libcrux_kyber::arithmetic::montgomery_multiply_sfe_by_fer(fe^1 : i32, fer^2 : i32) -> i32  
{
    v@0 : i32;
    fe^1 : i32;
    fer^2 : i32;
    v@3 : i32;
    v@4 : i32;
    v@5 : i32;

    v@4 := copy fe^1;
    v@5 := copy fer^2;
    v@3 := move v@4 * move v@5;
    drop v@5;
    drop v@4;
    v@0 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@3);
    drop v@3;
    return
  }
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
24/465
Visiting global: libcrux_kyber::arithmetic::MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS
  global libcrux_kyber::arithmetic::MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS : i32 = libcrux_kyber::arithmetic::MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS
Corresponding body:  fn libcrux_kyber::arithmetic::MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS() -> i32  
{
    v@0 : i32;

    v@0 := (1353: i32 : i32);
    return
  }
25/465
Visiting function: libcrux_kyber::arithmetic::to_standard_domain
  fn libcrux_kyber::arithmetic::to_standard_domain(mfe^1 : i32) -> i32  
{
    v@0 : i32;
    mfe^1 : i32;
    v@2 : i32;
    v@3 : i32;
    v@4 : i32;

    v@3 := copy mfe^1;
    v@4 := global libcrux_kyber::arithmetic::MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS;
    v@2 := move v@3 * move v@4;
    drop v@3;
    v@0 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@2);
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
26/465
Visiting function: libcrux_kyber::arithmetic::to_unsigned_representative
  fn libcrux_kyber::arithmetic::to_unsigned_representative(fe^1 : i32) -> u16  
{
    v@0 : u16;
    fe^1 : i32;
    v@2 : i32;
    v@3 : i32;
    v@4 : i32;
    v@5 : i32;
    v@6 : i32;
    v@7 : i32;

    v@3 := copy fe^1;
    v@6 := copy fe^1;
    v@5 := move v@6 >> (31: i32 : i32);
    drop v@6;
    v@7 := global libcrux_kyber::constants::FIELD_MODULUS;
    v@4 := move v@7 & move v@5;
    drop v@5;
    v@2 := move v@3 + move v@4;
    drop v@4;
    drop v@3;
    v@0 := cast<i32,u16> move v@2;
    drop v@2;
    return
  }
27/465
Visiting type: libcrux_kyber::arithmetic::PolynomialRingElement
struct libcrux_kyber::arithmetic::PolynomialRingElement
{
  coefficients : @Array<i32, 256: usize>
}
28/465
29/465
Visiting function: libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement#1}::clone
  fn libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement#1}::clone<0>(self^1 : &0 (libcrux_kyber::arithmetic::PolynomialRingElement)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    self^1 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);

    v@0 := copy *(self^1);
    return
  }
30/465
31/465
32/465
33/465
Visiting global: libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO
  global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO : libcrux_kyber::arithmetic::PolynomialRingElement = libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO
Corresponding body:  fn libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO() -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@1 : @Array<i32, 256: usize>;

    v@1 := move @ArrayRepeat<'_, i32, 256: usize>((0: i32 : i32));
    v@0 := libcrux_kyber::arithmetic::PolynomialRingElement { coefficients = move v@1; };
    drop v@1;
    return
  }
34/465
Visiting type: core::ops::range::Range
struct core::ops::range::Range<Idx>
{
  start : Idx,
  end : Idx
}
35/465
Visiting type: core::option::Option
enum core::option::Option<T>
  =
|  None()
|  Some(T)
36/465
Visiting opaque function: core::slice::{@Slice<T>}::len
  opaque fn core::slice::{@Slice<T>}::len<0, T>(&0 (@Slice<T>)) -> usize
37/465
38/465
39/465
Visiting opaque function: core::iter::traits::collect::{I}::into_iter
  opaque fn core::iter::traits::collect::{I}::into_iter<I>(I) -> I
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::traits::iterator::Iterator<I>,
40/465
41/465
42/465
Visiting type: core::cmp::Ordering
enum core::cmp::Ordering
  =
|  Less()
|  Equal()
|  Greater()
43/465
44/465
45/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::next
  opaque fn core::iter::range::{core::ops::range::Range<A>#3}::next<0, A>(&0 mut (core::ops::range::Range<A>)) -> core::option::Option<A>
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
46/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::size_hint
  opaque fn core::iter::range::{core::ops::range::Range<A>#3}::size_hint<0, A>(&0 (core::ops::range::Range<A>)) -> (usize, core::option::Option<usize>)
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
47/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::nth
  opaque fn core::iter::range::{core::ops::range::Range<A>#3}::nth<0, A>(&0 mut (core::ops::range::Range<A>), usize) -> core::option::Option<A>
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
48/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::last
  opaque fn core::iter::range::{core::ops::range::Range<A>#3}::last<A>(core::ops::range::Range<A>) -> core::option::Option<A>
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
49/465
50/465
51/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::min
  opaque fn core::iter::range::{core::ops::range::Range<A>#3}::min<A>(core::ops::range::Range<A>) -> core::option::Option<A>
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
    // Local clauses
    [TraitClause@1]: core::cmp::Ord<A>,
52/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::max
  opaque fn core::iter::range::{core::ops::range::Range<A>#3}::max<A>(core::ops::range::Range<A>) -> core::option::Option<A>
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
    // Local clauses
    [TraitClause@1]: core::cmp::Ord<A>,
53/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::is_sorted
  opaque fn core::iter::range::{core::ops::range::Range<A>#3}::is_sorted<A>(core::ops::range::Range<A>) -> bool
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
54/465
Visiting type: core::result::Result
enum core::result::Result<T, E>
  =
|  Ok(T)
|  Err(E)
55/465
Visiting type: core::num::nonzero::NonZeroUsize
opaque type core::num::nonzero::NonZeroUsize
56/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::advance_by
  opaque fn core::iter::range::{core::ops::range::Range<A>#3}::advance_by<0, A>(&0 mut (core::ops::range::Range<A>), usize) -> core::result::Result<(), core::num::nonzero::NonZeroUsize>
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
57/465
58/465
Visiting opaque function: core::iter::range::{core::ops::range::Range<A>#3}::__iterator_get_unchecked
  opaque unsafe fn core::iter::range::{core::ops::range::Range<A>#3}::__iterator_get_unchecked<0, A>(&0 mut (core::ops::range::Range<A>), usize) -> core::iter::range::{core::ops::range::Range<A>#3}<A>[TraitClause@0]::Item
  where
    // Inherited clauses
    [TraitClause@0]: core::iter::range::Step<A>,
    // Local clauses
    [TraitClause@1]: core::iter::adapters::zip::TrustedRandomAccessNoCoerce<core::ops::range::Range<A>>,
ERROR translating core::iter::range::{core::ops::range::Range<A>#3}::__iterator_get_unchecked: Failure("TODO: TraitTypes core::iter::range::{core::ops::range::Range<A>#3}<T@0>[TraitClause@0]::Item")

59/465
60/465
Visiting opaque function: core::clone::impls::{usize#5}::clone
  opaque fn core::clone::impls::{usize#5}::clone<0>(&0 (usize)) -> usize
61/465
62/465
Visiting opaque function: core::cmp::impls::{usize#21}::eq
  opaque fn core::cmp::impls::{usize#21}::eq<0, 1>(&0 (usize), &1 (usize)) -> bool
63/465
Visiting opaque function: core::cmp::impls::{usize#21}::ne
  opaque fn core::cmp::impls::{usize#21}::ne<0, 1>(&0 (usize), &1 (usize)) -> bool
64/465
65/465
Visiting opaque function: core::cmp::impls::{usize#54}::partial_cmp
  opaque fn core::cmp::impls::{usize#54}::partial_cmp<0, 1>(&0 (usize), &1 (usize)) -> core::option::Option<core::cmp::Ordering>
66/465
Visiting opaque function: core::cmp::impls::{usize#54}::lt
  opaque fn core::cmp::impls::{usize#54}::lt<0, 1>(&0 (usize), &1 (usize)) -> bool
67/465
Visiting opaque function: core::cmp::impls::{usize#54}::le
  opaque fn core::cmp::impls::{usize#54}::le<0, 1>(&0 (usize), &1 (usize)) -> bool
68/465
Visiting opaque function: core::cmp::impls::{usize#54}::ge
  opaque fn core::cmp::impls::{usize#54}::ge<0, 1>(&0 (usize), &1 (usize)) -> bool
69/465
Visiting opaque function: core::cmp::impls::{usize#54}::gt
  opaque fn core::cmp::impls::{usize#54}::gt<0, 1>(&0 (usize), &1 (usize)) -> bool
70/465
71/465
Visiting opaque function: core::iter::range::{usize#37}::steps_between
  opaque fn core::iter::range::{usize#37}::steps_between<0, 1>(&0 (usize), &1 (usize)) -> core::option::Option<usize>
72/465
Visiting opaque function: core::iter::range::{usize#37}::forward_checked
  opaque fn core::iter::range::{usize#37}::forward_checked(usize, usize) -> core::option::Option<usize>
73/465
Visiting opaque function: core::iter::range::{usize#37}::backward_checked
  opaque fn core::iter::range::{usize#37}::backward_checked(usize, usize) -> core::option::Option<usize>
74/465
Visiting opaque function: core::iter::range::{usize#37}::forward_unchecked
  opaque unsafe fn core::iter::range::{usize#37}::forward_unchecked(usize, usize) -> usize
75/465
Visiting opaque function: core::iter::range::{usize#37}::backward_unchecked
  opaque unsafe fn core::iter::range::{usize#37}::backward_unchecked(usize, usize) -> usize
76/465
Visiting opaque function: core::iter::range::{usize#37}::forward
  opaque fn core::iter::range::{usize#37}::forward(usize, usize) -> usize
77/465
Visiting opaque function: core::iter::range::{usize#37}::backward
  opaque fn core::iter::range::{usize#37}::backward(usize, usize) -> usize
78/465
79/465
Visiting opaque function: core::iter::traits::collect::IntoIterator::into_iter
  opaque fn core::iter::traits::collect::IntoIterator::into_iter<Self>(Self) -> Self::IntoIter
ERROR translating core::iter::traits::collect::IntoIterator::into_iter: Failure("TODO: TraitTypes Self::IntoIter")

80/465
Visiting opaque function: core::iter::traits::iterator::Iterator::next
  opaque fn core::iter::traits::iterator::Iterator::next<0, Self>(&0 mut (Self)) -> core::option::Option<Self::Item>
ERROR translating core::iter::traits::iterator::Iterator::next: Failure("TODO: TraitTypes Self::Item")

81/465
Visiting function: libcrux_kyber::arithmetic::add_to_ring_element
  fn libcrux_kyber::arithmetic::add_to_ring_element<0, K>(lhs^1 : libcrux_kyber::arithmetic::PolynomialRingElement, rhs^2 : &0 (libcrux_kyber::arithmetic::PolynomialRingElement)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    lhs^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    rhs^2 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@3 : ();
    v@4 : core::ops::range::Range<usize>;
    v@5 : core::ops::range::Range<usize>;
    v@6 : usize;
    v@7 : &'_ (@Slice<i32>);
    v@8 : &'_ (@Array<i32, 256: usize>);
    iter^9 : core::ops::range::Range<usize>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<usize>;
    v@13 : &'_ mut (core::ops::range::Range<usize>);
    v@14 : &'_ mut (core::ops::range::Range<usize>);
    i^15 : usize;
    v@16 : i32;
    v@17 : usize;
    v@18 : usize;
    v@19 : ();
    v@20 : ();
    v@21 : ();
    v@22 : &'_ mut (@Array<i32, 256: usize>);
    v@23 : &'_ mut (i32);
    v@24 : &'_ (@Array<i32, 256: usize>);
    v@25 : &'_ (i32);
    v@26 : &'_ (@Array<i32, 256: usize>);
    v@27 : &'_ (i32);

    v@8 := &(lhs^1).coefficients;
    v@7 := move @ArrayToSliceShared<'_, i32, 256: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::len<i32>(move v@7);
    drop v@7;
    v@5 := core::ops::range::Range { start = (0: usize : usize); end = move v@6; };
    drop v@6;
    v@4 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@5);
    drop v@5;
    fake_read v@4;
    iter^9 := move v@4;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^15 := copy (v@12 as core::option::Option::Some).0;
          v@17 := copy i^15;
          v@26 := &(*(rhs^2)).coefficients;
          v@27 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@26, copy v@17);
          v@16 := copy *(v@27);
          v@18 := copy i^15;
          v@22 := &mut (lhs^1).coefficients;
          v@23 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@22, copy v@18);
          v@24 := &(lhs^1).coefficients;
          v@25 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@24, copy v@18);
          *(v@23) := copy *(v@25) + move v@16;
          drop v@16;
          drop v@18;
          drop v@17;
          v@20 := ();
          v@11 := move v@20;
          drop i^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@21 := ();
          v@10 := move v@21;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@19 := ();
    v@3 := move v@19;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@4;
    drop v@3;
    v@0 := copy lhs^1;
    return
  }
Visiting call: @ArrayToSliceShared<'_, i32, 256: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, i32, 256>
Visiting call: core::slice::{@Slice<T>}::len<i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::len<i32>
--> name: core::slice::{@Slice<T>}::len
--> args: &'0_0 (@Slice<T@0>), ret: usize
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
82/465
Visiting function: libcrux_kyber::compress::compress_message_coefficient
  fn libcrux_kyber::compress::compress_message_coefficient(fe^1 : u16) -> u8  
{
    v@0 : u8;
    fe^1 : u16;
    shifted^2 : i16;
    v@3 : i16;
    v@4 : u16;
    mask^5 : i16;
    v@6 : i16;
    shifted_to_positive^7 : i16;
    v@8 : i16;
    v@9 : i16;
    shifted_positive_in_range^10 : i16;
    v@11 : i16;
    v@12 : i16;
    v@13 : i16;
    v@14 : i16;

    v@4 := copy fe^1;
    v@3 := cast<u16,i16> move v@4;
    drop v@4;
    shifted^2 := (1664: i16 : i16) - move v@3;
    drop v@3;
    fake_read shifted^2;
    v@6 := copy shifted^2;
    mask^5 := move v@6 >> (15: i32 : i32);
    drop v@6;
    fake_read mask^5;
    v@8 := copy mask^5;
    v@9 := copy shifted^2;
    shifted_to_positive^7 := move v@8 ^ move v@9;
    drop v@9;
    drop v@8;
    fake_read shifted_to_positive^7;
    v@11 := copy shifted_to_positive^7;
    shifted_positive_in_range^10 := move v@11 - (832: i16 : i16);
    drop v@11;
    fake_read shifted_positive_in_range^10;
    v@14 := copy shifted_positive_in_range^10;
    v@13 := move v@14 >> (15: i32 : i32);
    drop v@14;
    v@12 := move v@13 & (1: i16 : i16);
    drop v@13;
    v@0 := cast<i16,u8> move v@12;
    drop v@12;
    drop shifted_positive_in_range^10;
    drop shifted_to_positive^7;
    drop mask^5;
    drop shifted^2;
    return
  }
83/465
Visiting function: libcrux_kyber::compress::compress_ciphertext_coefficient
  fn libcrux_kyber::compress::compress_ciphertext_coefficient(coefficient_bits^1 : u8, fe^2 : u16) -> i32  
{
    v@0 : i32;
    coefficient_bits^1 : u8;
    fe^2 : u16;
    compressed^3 : u32;
    v@4 : u32;
    v@5 : u16;
    v@6 : u8;
    v@7 : u8;
    v@8 : u32;
    v@9 : u32;
    v@10 : i32;
    v@11 : u32;
    v@12 : u8;
    v@13 : u32;
    v@14 : i32;
    v@15 : i32;

    v@5 := copy fe^2;
    v@4 := cast<u16,u32> move v@5;
    drop v@5;
    v@7 := copy coefficient_bits^1;
    v@6 := move v@7 + (1: u8 : u8);
    drop v@7;
    compressed^3 := move v@4 << move v@6;
    drop v@6;
    drop v@4;
    fake_read compressed^3;
    v@14 := global libcrux_kyber::constants::FIELD_MODULUS;
    v@8 := cast<i32,u32> move v@14;
    compressed^3 := copy compressed^3 + move v@8;
    drop v@8;
    v@15 := global libcrux_kyber::constants::FIELD_MODULUS;
    v@10 := move v@15 << (1: i32 : i32);
    v@9 := cast<i32,u32> move v@10;
    drop v@10;
    compressed^3 := copy compressed^3 / move v@9;
    drop v@9;
    v@12 := copy coefficient_bits^1;
    v@13 := copy compressed^3;
    v@11 := move libcrux_kyber::arithmetic::get_n_least_significant_bits(move v@12, move v@13);
    drop v@13;
    drop v@12;
    v@0 := cast<u32,i32> move v@11;
    drop v@11;
    drop compressed^3;
    return
  }
Visiting call: libcrux_kyber::arithmetic::get_n_least_significant_bits
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::get_n_least_significant_bits
--> name: libcrux_kyber::arithmetic::get_n_least_significant_bits
--> args: u8 ++ u32, ret: u32
84/465
Visiting function: libcrux_kyber::compress::decompress_message_coefficient
  fn libcrux_kyber::compress::decompress_message_coefficient(fe^1 : i32) -> i32  
{
    v@0 : i32;
    fe^1 : i32;
    v@2 : i32;
    v@3 : i32;
    v@4 : i32;
    v@5 : i32;
    v@6 : i32;

    v@3 := copy fe^1;
    v@2 := - move v@3;
    drop v@3;
    v@6 := global libcrux_kyber::constants::FIELD_MODULUS;
    v@5 := move v@6 + (1: i32 : i32);
    v@4 := move v@5 / (2: i32 : i32);
    drop v@5;
    v@0 := move v@2 & move v@4;
    drop v@4;
    drop v@2;
    return
  }
85/465
Visiting function: libcrux_kyber::compress::decompress_ciphertext_coefficient
  fn libcrux_kyber::compress::decompress_ciphertext_coefficient(coefficient_bits^1 : u8, fe^2 : i32) -> i32  
{
    v@0 : i32;
    coefficient_bits^1 : u8;
    fe^2 : i32;
    decompressed^3 : u32;
    v@4 : u32;
    v@5 : i32;
    v@6 : u32;
    v@7 : u32;
    v@8 : u32;
    v@9 : u32;
    v@10 : u8;
    v@11 : u8;
    v@12 : u8;
    v@13 : u32;
    v@14 : i32;

    v@5 := copy fe^2;
    v@4 := cast<i32,u32> move v@5;
    drop v@5;
    v@14 := global libcrux_kyber::constants::FIELD_MODULUS;
    v@6 := cast<i32,u32> move v@14;
    decompressed^3 := move v@4 * move v@6;
    drop v@6;
    drop v@4;
    fake_read decompressed^3;
    v@8 := copy decompressed^3;
    v@7 := move v@8 << (1: i32 : i32);
    drop v@8;
    v@10 := copy coefficient_bits^1;
    v@9 := (1: u32 : u32) << move v@10;
    drop v@10;
    decompressed^3 := move v@7 + move v@9;
    drop v@9;
    drop v@7;
    v@12 := copy coefficient_bits^1;
    v@11 := move v@12 + (1: u8 : u8);
    drop v@12;
    decompressed^3 := copy decompressed^3 >> move v@11;
    drop v@11;
    v@13 := copy decompressed^3;
    v@0 := cast<u32,i32> move v@13;
    drop v@13;
    drop decompressed^3;
    return
  }
86/465
Visiting opaque function: core::num::{u16#7}::wrapping_add
  opaque fn core::num::{u16#7}::wrapping_add(u16, u16) -> u16
87/465
Visiting function: libcrux_kyber::constant_time_ops::is_non_zero
  fn libcrux_kyber::constant_time_ops::is_non_zero(value^1 : u8) -> u8  
{
    v@0 : u8;
    value^1 : u8;
    value^2 : u16;
    v@3 : u8;
    result^4 : u16;
    v@5 : u16;
    v@6 : u16;
    v@7 : u16;
    v@8 : u16;
    v@9 : u16;
    v@10 : u16;
    v@11 : u16;

    v@3 := copy value^1;
    value^2 := cast<u8,u16> move v@3;
    drop v@3;
    fake_read value^2;
    v@7 := copy value^2;
    v@10 := copy value^2;
    v@9 := ¬ move v@10;
    drop v@10;
    v@8 := move core::num::{u16#7}::wrapping_add(move v@9, (1: u16 : u16));
    drop v@9;
    v@6 := move v@7 | move v@8;
    drop v@8;
    drop v@7;
    v@5 := move v@6 >> (8: i32 : i32);
    drop v@6;
    result^4 := move v@5 & (1: u16 : u16);
    drop v@5;
    fake_read result^4;
    v@11 := copy result^4;
    v@0 := cast<u16,u8> move v@11;
    drop v@11;
    drop result^4;
    drop value^2;
    return
  }
Visiting call: core::num::{u16#7}::wrapping_add
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: core::num::{u16}::wrapping_add
--> name: core::num::{u16#7}::wrapping_add
--> args: u16 ++ u16, ret: u16
88/465
Visiting function: libcrux_kyber::constant_time_ops::compare_ciphertexts_in_constant_time
  fn libcrux_kyber::constant_time_ops::compare_ciphertexts_in_constant_time<0, 1, CIPHERTEXT_SIZE>(lhs^1 : &0 (@Slice<u8>), rhs^2 : &1 (@Slice<u8>)) -> u8  
{
    v@0 : u8;
    lhs^1 : &'_ (@Slice<u8>);
    rhs^2 : &'_ (@Slice<u8>);
    r^3 : u8;
    v@4 : ();
    v@5 : core::ops::range::Range<usize>;
    v@6 : core::ops::range::Range<usize>;
    iter^7 : core::ops::range::Range<usize>;
    v@8 : ();
    v@9 : ();
    v@10 : core::option::Option<usize>;
    v@11 : &'_ mut (core::ops::range::Range<usize>);
    v@12 : &'_ mut (core::ops::range::Range<usize>);
    i^13 : usize;
    v@14 : u8;
    v@15 : u8;
    v@16 : usize;
    v@17 : u8;
    v@18 : usize;
    v@19 : u8;
    v@20 : ();
    v@21 : ();
    v@22 : ();
    v@23 : &'_ (@Slice<u8>);
    v@24 : &'_ (u8);
    v@25 : &'_ (@Slice<u8>);
    v@26 : &'_ (u8);

    r^3 := (0: u8 : u8);
    fake_read r^3;
    v@6 := core::ops::range::Range { start = (0: usize : usize); end = CIPHERTEXT_SIZE; };
    v@5 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^7 := move v@5;
    loop {
      v@12 := &mut iter^7;
      v@11 := &two-phase *(v@12);
      v@10 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@11);
      drop v@11;
      fake_read v@10;
      match (v@10) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^13 := copy (v@10 as core::option::Option::Some).0;
          v@16 := copy i^13;
          v@25 := &*(lhs^1);
          v@26 := move @SliceIndexShared<'_, u8>(move v@25, copy v@16);
          v@15 := copy *(v@26);
          v@18 := copy i^13;
          v@23 := &*(rhs^2);
          v@24 := move @SliceIndexShared<'_, u8>(move v@23, copy v@18);
          v@17 := copy *(v@24);
          v@14 := move v@15 ^ move v@17;
          drop v@17;
          drop v@15;
          r^3 := copy r^3 | move v@14;
          drop v@14;
          drop v@18;
          drop v@16;
          v@21 := ();
          v@9 := move v@21;
          drop i^13;
          drop v@12;
          drop v@10;
          drop v@9;
          v@22 := ();
          v@8 := move v@22;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@20 := ();
    v@4 := move v@20;
    drop v@12;
    drop v@10;
    drop v@9;
    drop iter^7;
    drop v@5;
    drop v@4;
    v@19 := copy r^3;
    v@0 := move libcrux_kyber::constant_time_ops::is_non_zero(move v@19);
    drop v@19;
    drop r^3;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: libcrux_kyber::constant_time_ops::is_non_zero
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::constant_time_ops::is_non_zero
--> name: libcrux_kyber::constant_time_ops::is_non_zero
--> args: u8, ret: u8
89/465
Visiting opaque function: core::num::{u8#6}::wrapping_sub
  opaque fn core::num::{u8#6}::wrapping_sub(u8, u8) -> u8
90/465
Visiting function: libcrux_kyber::constant_time_ops::select_shared_secret_in_constant_time
  fn libcrux_kyber::constant_time_ops::select_shared_secret_in_constant_time<0, 1>(lhs^1 : &0 (@Slice<u8>), rhs^2 : &1 (@Slice<u8>), selector^3 : u8) -> @Array<u8, 32: usize>  
{
    v@0 : @Array<u8, 32: usize>;
    lhs^1 : &'_ (@Slice<u8>);
    rhs^2 : &'_ (@Slice<u8>);
    selector^3 : u8;
    mask^4 : u8;
    v@5 : u8;
    v@6 : u8;
    out^7 : @Array<u8, 32: usize>;
    v@8 : ();
    v@9 : core::ops::range::Range<usize>;
    v@10 : core::ops::range::Range<usize>;
    iter^11 : core::ops::range::Range<usize>;
    v@12 : ();
    v@13 : ();
    v@14 : core::option::Option<usize>;
    v@15 : &'_ mut (core::ops::range::Range<usize>);
    v@16 : &'_ mut (core::ops::range::Range<usize>);
    i^17 : usize;
    v@18 : u8;
    v@19 : u8;
    v@20 : u8;
    v@21 : usize;
    v@22 : u8;
    v@23 : u8;
    v@24 : u8;
    v@25 : usize;
    v@26 : u8;
    v@27 : u8;
    v@28 : usize;
    v@29 : usize;
    v@30 : ();
    v@31 : ();
    v@32 : ();
    v@33 : &'_ mut (@Array<u8, 32: usize>);
    v@34 : &'_ mut (u8);
    v@35 : &'_ (@Array<u8, 32: usize>);
    v@36 : &'_ (u8);
    v@37 : &'_ (@Slice<u8>);
    v@38 : &'_ (u8);
    v@39 : &'_ (@Slice<u8>);
    v@40 : &'_ (u8);

    v@6 := copy selector^3;
    v@5 := move libcrux_kyber::constant_time_ops::is_non_zero(move v@6);
    drop v@6;
    mask^4 := move core::num::{u8#6}::wrapping_sub(move v@5, (1: u8 : u8));
    drop v@5;
    fake_read mask^4;
    out^7 := move @ArrayRepeat<'_, u8, 32: usize>((0: u8 : u8));
    fake_read out^7;
    v@29 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@10 := core::ops::range::Range { start = (0: usize : usize); end = move v@29; };
    v@9 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@10);
    drop v@10;
    fake_read v@9;
    iter^11 := move v@9;
    loop {
      v@16 := &mut iter^11;
      v@15 := &two-phase *(v@16);
      v@14 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@15);
      drop v@15;
      fake_read v@14;
      match (v@14) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^17 := copy (v@14 as core::option::Option::Some).0;
          v@21 := copy i^17;
          v@39 := &*(lhs^1);
          v@40 := move @SliceIndexShared<'_, u8>(move v@39, copy v@21);
          v@20 := copy *(v@40);
          v@22 := copy mask^4;
          v@19 := move v@20 & move v@22;
          drop v@22;
          drop v@20;
          v@25 := copy i^17;
          v@37 := &*(rhs^2);
          v@38 := move @SliceIndexShared<'_, u8>(move v@37, copy v@25);
          v@24 := copy *(v@38);
          v@27 := copy mask^4;
          v@26 := ¬ move v@27;
          drop v@27;
          v@23 := move v@24 & move v@26;
          drop v@26;
          drop v@24;
          v@18 := move v@19 | move v@23;
          drop v@23;
          drop v@19;
          v@28 := copy i^17;
          v@33 := &mut out^7;
          v@34 := move @ArrayIndexMut<'_, u8, 32: usize>(move v@33, copy v@28);
          v@35 := &out^7;
          v@36 := move @ArrayIndexShared<'_, u8, 32: usize>(move v@35, copy v@28);
          *(v@34) := copy *(v@36) | move v@18;
          drop v@18;
          drop v@28;
          drop v@25;
          drop v@21;
          v@31 := ();
          v@13 := move v@31;
          drop i^17;
          drop v@16;
          drop v@14;
          drop v@13;
          v@32 := ();
          v@12 := move v@32;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@30 := ();
    v@8 := move v@30;
    drop v@16;
    drop v@14;
    drop v@13;
    drop iter^11;
    drop v@9;
    drop v@8;
    v@0 := copy out^7;
    drop out^7;
    drop mask^4;
    return
  }
Visiting call: libcrux_kyber::constant_time_ops::is_non_zero
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::constant_time_ops::is_non_zero
--> name: libcrux_kyber::constant_time_ops::is_non_zero
--> args: u8, ret: u8
Visiting call: core::num::{u8#6}::wrapping_sub
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: core::num::{u8}::wrapping_sub
--> name: core::num::{u8#6}::wrapping_sub
--> args: u8 ++ u8, ret: u8
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
91/465
Visiting opaque function: libcrux::digest::sha3_512
  opaque fn libcrux::digest::sha3_512<0>(&0 (@Slice<u8>)) -> @Array<u8, 64: usize>
92/465
Visiting function: libcrux_kyber::hash_functions::G
  fn libcrux_kyber::hash_functions::G<0>(input^1 : &0 (@Slice<u8>)) -> @Array<u8, 64: usize>  
{
    v@0 : @Array<u8, 64: usize>;
    input^1 : &'_ (@Slice<u8>);
    v@2 : &'_ (@Slice<u8>);

    v@2 := &*(input^1);
    v@0 := move libcrux::digest::sha3_512(move v@2);
    drop v@2;
    return
  }
Visiting call: libcrux::digest::sha3_512
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux::digest::sha3_512
--> name: libcrux::digest::sha3_512
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, 64: usize>
93/465
Visiting opaque function: libcrux::digest::sha3_256
  opaque fn libcrux::digest::sha3_256<0>(&0 (@Slice<u8>)) -> @Array<u8, 32: usize>
94/465
Visiting function: libcrux_kyber::hash_functions::H
  fn libcrux_kyber::hash_functions::H<0>(input^1 : &0 (@Slice<u8>)) -> @Array<u8, 32: usize>  
{
    v@0 : @Array<u8, 32: usize>;
    input^1 : &'_ (@Slice<u8>);
    v@2 : &'_ (@Slice<u8>);

    v@2 := &*(input^1);
    v@0 := move libcrux::digest::sha3_256(move v@2);
    drop v@2;
    return
  }
Visiting call: libcrux::digest::sha3_256
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux::digest::sha3_256
--> name: libcrux::digest::sha3_256
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, 32: usize>
95/465
Visiting opaque function: libcrux::digest::shake256
  opaque fn libcrux::digest::shake256<0, LEN>(&0 (@Slice<u8>)) -> @Array<u8, LEN>
96/465
Visiting function: libcrux_kyber::hash_functions::PRF
  fn libcrux_kyber::hash_functions::PRF<0, LEN>(input^1 : &0 (@Slice<u8>)) -> @Array<u8, LEN>  
{
    v@0 : @Array<u8, LEN>;
    input^1 : &'_ (@Slice<u8>);
    v@2 : &'_ (@Slice<u8>);

    v@2 := &*(input^1);
    v@0 := move libcrux::digest::shake256<LEN>(move v@2);
    drop v@2;
    return
  }
Visiting call: libcrux::digest::shake256<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux::digest::shake256<@>
--> name: libcrux::digest::shake256
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
97/465
Visiting opaque function: libcrux_platform::simd256_support
  opaque fn libcrux_platform::simd256_support() -> bool
98/465
Visiting opaque function: libcrux::digest::shake128
  opaque fn libcrux::digest::shake128<0, LEN>(&0 (@Slice<u8>)) -> @Array<u8, LEN>
99/465
Visiting opaque function: libcrux::digest::shake128x4
  opaque fn libcrux::digest::shake128x4<0, 1, 2, 3, LEN>(&0 (@Slice<u8>), &1 (@Slice<u8>), &2 (@Slice<u8>), &3 (@Slice<u8>)) -> (@Array<u8, LEN>, @Array<u8, LEN>, @Array<u8, LEN>, @Array<u8, LEN>)
100/465
Visiting function: libcrux_kyber::hash_functions::XOFx4
  fn libcrux_kyber::hash_functions::XOFx4<K>(input^1 : @Array<@Array<u8, 34: usize>, K>) -> @Array<@Array<u8, 840: usize>, K>  
{
    v@0 : @Array<@Array<u8, 840: usize>, K>;
    input^1 : @Array<@Array<u8, 34: usize>, K>;
    out^2 : @Array<@Array<u8, 840: usize>, K>;
    v@3 : @Array<u8, 840: usize>;
    v@4 : ();
    v@5 : bool;
    v@6 : bool;
    v@7 : bool;
    v@8 : bool;
    v@9 : core::ops::range::Range<usize>;
    v@10 : core::ops::range::Range<usize>;
    iter^11 : core::ops::range::Range<usize>;
    v@12 : ();
    v@13 : ();
    v@14 : core::option::Option<usize>;
    v@15 : &'_ mut (core::ops::range::Range<usize>);
    v@16 : &'_ mut (core::ops::range::Range<usize>);
    i^17 : usize;
    v@18 : @Array<u8, 840: usize>;
    v@19 : &'_ (@Slice<u8>);
    v@20 : &'_ (@Array<u8, 34: usize>);
    v@21 : &'_ (@Array<u8, 34: usize>);
    v@22 : usize;
    v@23 : usize;
    v@24 : ();
    v@25 : u8;
    d0^26 : @Array<u8, 840: usize>;
    d1^27 : @Array<u8, 840: usize>;
    v@28 : (@Array<u8, 840: usize>, @Array<u8, 840: usize>, @Array<u8, 840: usize>, @Array<u8, 840: usize>);
    v@29 : &'_ (@Slice<u8>);
    v@30 : &'_ (@Array<u8, 34: usize>);
    v@31 : &'_ (@Array<u8, 34: usize>);
    v@32 : usize;
    v@33 : &'_ (@Slice<u8>);
    v@34 : &'_ (@Array<u8, 34: usize>);
    v@35 : &'_ (@Array<u8, 34: usize>);
    v@36 : usize;
    v@37 : &'_ (@Slice<u8>);
    v@38 : &'_ (@Array<u8, 34: usize>);
    v@39 : &'_ (@Array<u8, 34: usize>);
    v@40 : usize;
    v@41 : &'_ (@Slice<u8>);
    v@42 : &'_ (@Array<u8, 34: usize>);
    v@43 : &'_ (@Array<u8, 34: usize>);
    v@44 : usize;
    v@45 : @Array<u8, 840: usize>;
    v@46 : usize;
    v@47 : @Array<u8, 840: usize>;
    v@48 : usize;
    d0^49 : @Array<u8, 840: usize>;
    d1^50 : @Array<u8, 840: usize>;
    d2^51 : @Array<u8, 840: usize>;
    v@52 : (@Array<u8, 840: usize>, @Array<u8, 840: usize>, @Array<u8, 840: usize>, @Array<u8, 840: usize>);
    v@53 : &'_ (@Slice<u8>);
    v@54 : &'_ (@Array<u8, 34: usize>);
    v@55 : &'_ (@Array<u8, 34: usize>);
    v@56 : usize;
    v@57 : &'_ (@Slice<u8>);
    v@58 : &'_ (@Array<u8, 34: usize>);
    v@59 : &'_ (@Array<u8, 34: usize>);
    v@60 : usize;
    v@61 : &'_ (@Slice<u8>);
    v@62 : &'_ (@Array<u8, 34: usize>);
    v@63 : &'_ (@Array<u8, 34: usize>);
    v@64 : usize;
    v@65 : &'_ (@Slice<u8>);
    v@66 : &'_ (@Array<u8, 34: usize>);
    v@67 : &'_ (@Array<u8, 34: usize>);
    v@68 : usize;
    v@69 : @Array<u8, 840: usize>;
    v@70 : usize;
    v@71 : @Array<u8, 840: usize>;
    v@72 : usize;
    v@73 : @Array<u8, 840: usize>;
    v@74 : usize;
    d0^75 : @Array<u8, 840: usize>;
    d1^76 : @Array<u8, 840: usize>;
    d2^77 : @Array<u8, 840: usize>;
    d3^78 : @Array<u8, 840: usize>;
    v@79 : (@Array<u8, 840: usize>, @Array<u8, 840: usize>, @Array<u8, 840: usize>, @Array<u8, 840: usize>);
    v@80 : &'_ (@Slice<u8>);
    v@81 : &'_ (@Array<u8, 34: usize>);
    v@82 : &'_ (@Array<u8, 34: usize>);
    v@83 : usize;
    v@84 : &'_ (@Slice<u8>);
    v@85 : &'_ (@Array<u8, 34: usize>);
    v@86 : &'_ (@Array<u8, 34: usize>);
    v@87 : usize;
    v@88 : &'_ (@Slice<u8>);
    v@89 : &'_ (@Array<u8, 34: usize>);
    v@90 : &'_ (@Array<u8, 34: usize>);
    v@91 : usize;
    v@92 : &'_ (@Slice<u8>);
    v@93 : &'_ (@Array<u8, 34: usize>);
    v@94 : &'_ (@Array<u8, 34: usize>);
    v@95 : usize;
    v@96 : @Array<u8, 840: usize>;
    v@97 : usize;
    v@98 : @Array<u8, 840: usize>;
    v@99 : usize;
    v@100 : @Array<u8, 840: usize>;
    v@101 : usize;
    v@102 : @Array<u8, 840: usize>;
    v@103 : usize;
    v@104 : ();
    v@105 : ();
    v@106 : ();
    v@107 : ();
    v@108 : ();
    v@109 : ();
    v@110 : ();
    v@111 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@112 : &'_ mut (@Array<u8, 840: usize>);
    v@113 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@114 : &'_ (@Array<u8, 34: usize>);
    v@115 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@116 : &'_ mut (@Array<u8, 840: usize>);
    v@117 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@118 : &'_ mut (@Array<u8, 840: usize>);
    v@119 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@120 : &'_ (@Array<u8, 34: usize>);
    v@121 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@122 : &'_ (@Array<u8, 34: usize>);
    v@123 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@124 : &'_ (@Array<u8, 34: usize>);
    v@125 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@126 : &'_ (@Array<u8, 34: usize>);
    v@127 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@128 : &'_ mut (@Array<u8, 840: usize>);
    v@129 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@130 : &'_ mut (@Array<u8, 840: usize>);
    v@131 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@132 : &'_ mut (@Array<u8, 840: usize>);
    v@133 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@134 : &'_ (@Array<u8, 34: usize>);
    v@135 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@136 : &'_ (@Array<u8, 34: usize>);
    v@137 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@138 : &'_ (@Array<u8, 34: usize>);
    v@139 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@140 : &'_ (@Array<u8, 34: usize>);
    v@141 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@142 : &'_ mut (@Array<u8, 840: usize>);
    v@143 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@144 : &'_ mut (@Array<u8, 840: usize>);
    v@145 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@146 : &'_ mut (@Array<u8, 840: usize>);
    v@147 : &'_ mut (@Array<@Array<u8, 840: usize>, K>);
    v@148 : &'_ mut (@Array<u8, 840: usize>);
    v@149 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@150 : &'_ (@Array<u8, 34: usize>);
    v@151 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@152 : &'_ (@Array<u8, 34: usize>);
    v@153 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@154 : &'_ (@Array<u8, 34: usize>);
    v@155 : &'_ (@Array<@Array<u8, 34: usize>, K>);
    v@156 : &'_ (@Array<u8, 34: usize>);

    v@3 := move @ArrayRepeat<'_, u8, 840: usize>((0: u8 : u8));
    out^2 := move @ArrayRepeat<'_, @Array<u8, 840: usize>, K>(move v@3);
    drop v@3;
    fake_read out^2;
    v@7 := move libcrux_platform::simd256_support();
    v@6 := ¬ move v@7;
    drop v@7;
    if (move v@6) {
      v@5 := (true : bool)
    }
    else {
      v@8 := ¬ (false : bool);
      v@5 := move v@8
    };
    drop v@8;
    drop v@6;
    if (move v@5) {
      v@10 := core::ops::range::Range { start = (0: usize : usize); end = K; };
      v@9 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@10);
      drop v@10;
      fake_read v@9;
      iter^11 := move v@9;
      loop {
        v@16 := &mut iter^11;
        v@15 := &two-phase *(v@16);
        v@14 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@15);
        drop v@15;
        fake_read v@14;
        match (v@14) {
        | 0 => {
            break 0
          }
        | 1 => {
            i^17 := copy (v@14 as core::option::Option::Some).0;
            v@22 := copy i^17;
            v@113 := &input^1;
            v@114 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@113, copy v@22);
            v@21 := &*(v@114);
            v@20 := &*(v@21);
            v@19 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@20);
            drop v@20;
            v@18 := move libcrux::digest::shake128<840: usize>(move v@19);
            drop v@19;
            v@23 := copy i^17;
            v@111 := &mut out^2;
            v@112 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@111, copy v@23);
            *(v@112) := move v@18;
            drop v@18;
            drop v@23;
            drop v@22;
            drop v@21;
            v@105 := ();
            v@13 := move v@105;
            drop i^17;
            drop v@16;
            drop v@14;
            drop v@13;
            v@106 := ();
            v@12 := move v@106;
            continue 0
          }
          _ => {
            panic
          }
        }
      };
      v@104 := ();
      v@4 := move v@104;
      drop v@16;
      drop v@14;
      drop v@13;
      drop iter^11;
      drop v@9
    }
    else {
      v@25 := cast<usize,u8> K;
      fake_read v@25;
      switch (copy v@25) {
      | 2: u8 => {
          v@32 := (0: usize : usize);
          v@125 := &input^1;
          v@126 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@125, copy v@32);
          v@31 := &*(v@126);
          v@30 := &*(v@31);
          v@29 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@30);
          drop v@30;
          v@36 := (1: usize : usize);
          v@123 := &input^1;
          v@124 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@123, copy v@36);
          v@35 := &*(v@124);
          v@34 := &*(v@35);
          v@33 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@34);
          drop v@34;
          v@40 := (0: usize : usize);
          v@121 := &input^1;
          v@122 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@121, copy v@40);
          v@39 := &*(v@122);
          v@38 := &*(v@39);
          v@37 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@38);
          drop v@38;
          v@44 := (1: usize : usize);
          v@119 := &input^1;
          v@120 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@119, copy v@44);
          v@43 := &*(v@120);
          v@42 := &*(v@43);
          v@41 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@42);
          drop v@42;
          v@28 := move libcrux::digest::shake128x4<840: usize>(move v@29, move v@33, move v@37, move v@41);
          drop v@41;
          drop v@37;
          drop v@33;
          drop v@29;
          fake_read v@28;
          d0^26 := copy (v@28).0;
          d1^27 := copy (v@28).1;
          drop v@44;
          drop v@43;
          drop v@40;
          drop v@39;
          drop v@36;
          drop v@35;
          drop v@32;
          drop v@31;
          drop v@28;
          v@45 := copy d0^26;
          v@46 := (0: usize : usize);
          v@117 := &mut out^2;
          v@118 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@117, copy v@46);
          *(v@118) := move v@45;
          drop v@45;
          drop v@46;
          v@47 := copy d1^27;
          v@48 := (1: usize : usize);
          v@115 := &mut out^2;
          v@116 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@115, copy v@48);
          *(v@116) := move v@47;
          drop v@47;
          drop v@48;
          v@107 := ();
          v@24 := move v@107;
          drop d1^27;
          drop d0^26;
          drop v@25;
          drop v@24;
          v@108 := ();
          v@4 := move v@108
        }
      | 3: u8 => {
          v@56 := (0: usize : usize);
          v@139 := &input^1;
          v@140 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@139, copy v@56);
          v@55 := &*(v@140);
          v@54 := &*(v@55);
          v@53 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@54);
          drop v@54;
          v@60 := (1: usize : usize);
          v@137 := &input^1;
          v@138 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@137, copy v@60);
          v@59 := &*(v@138);
          v@58 := &*(v@59);
          v@57 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@58);
          drop v@58;
          v@64 := (2: usize : usize);
          v@135 := &input^1;
          v@136 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@135, copy v@64);
          v@63 := &*(v@136);
          v@62 := &*(v@63);
          v@61 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@62);
          drop v@62;
          v@68 := (0: usize : usize);
          v@133 := &input^1;
          v@134 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@133, copy v@68);
          v@67 := &*(v@134);
          v@66 := &*(v@67);
          v@65 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@66);
          drop v@66;
          v@52 := move libcrux::digest::shake128x4<840: usize>(move v@53, move v@57, move v@61, move v@65);
          drop v@65;
          drop v@61;
          drop v@57;
          drop v@53;
          fake_read v@52;
          d0^49 := copy (v@52).0;
          d1^50 := copy (v@52).1;
          d2^51 := copy (v@52).2;
          drop v@68;
          drop v@67;
          drop v@64;
          drop v@63;
          drop v@60;
          drop v@59;
          drop v@56;
          drop v@55;
          drop v@52;
          v@69 := copy d0^49;
          v@70 := (0: usize : usize);
          v@131 := &mut out^2;
          v@132 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@131, copy v@70);
          *(v@132) := move v@69;
          drop v@69;
          drop v@70;
          v@71 := copy d1^50;
          v@72 := (1: usize : usize);
          v@129 := &mut out^2;
          v@130 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@129, copy v@72);
          *(v@130) := move v@71;
          drop v@71;
          drop v@72;
          v@73 := copy d2^51;
          v@74 := (2: usize : usize);
          v@127 := &mut out^2;
          v@128 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@127, copy v@74);
          *(v@128) := move v@73;
          drop v@73;
          drop v@74;
          v@109 := ();
          v@24 := move v@109;
          drop d2^51;
          drop d1^50;
          drop d0^49;
          drop v@25;
          drop v@24;
          v@108 := ();
          v@4 := move v@108
        }
      | 4: u8 => {
          v@83 := (0: usize : usize);
          v@155 := &input^1;
          v@156 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@155, copy v@83);
          v@82 := &*(v@156);
          v@81 := &*(v@82);
          v@80 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@81);
          drop v@81;
          v@87 := (1: usize : usize);
          v@153 := &input^1;
          v@154 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@153, copy v@87);
          v@86 := &*(v@154);
          v@85 := &*(v@86);
          v@84 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@85);
          drop v@85;
          v@91 := (2: usize : usize);
          v@151 := &input^1;
          v@152 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@151, copy v@91);
          v@90 := &*(v@152);
          v@89 := &*(v@90);
          v@88 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@89);
          drop v@89;
          v@95 := (3: usize : usize);
          v@149 := &input^1;
          v@150 := move @ArrayIndexShared<'_, @Array<u8, 34: usize>, K>(move v@149, copy v@95);
          v@94 := &*(v@150);
          v@93 := &*(v@94);
          v@92 := move @ArrayToSliceShared<'_, u8, 34: usize>(move v@93);
          drop v@93;
          v@79 := move libcrux::digest::shake128x4<840: usize>(move v@80, move v@84, move v@88, move v@92);
          drop v@92;
          drop v@88;
          drop v@84;
          drop v@80;
          fake_read v@79;
          d0^75 := copy (v@79).0;
          d1^76 := copy (v@79).1;
          d2^77 := copy (v@79).2;
          d3^78 := copy (v@79).3;
          drop v@95;
          drop v@94;
          drop v@91;
          drop v@90;
          drop v@87;
          drop v@86;
          drop v@83;
          drop v@82;
          drop v@79;
          v@96 := copy d0^75;
          v@97 := (0: usize : usize);
          v@147 := &mut out^2;
          v@148 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@147, copy v@97);
          *(v@148) := move v@96;
          drop v@96;
          drop v@97;
          v@98 := copy d1^76;
          v@99 := (1: usize : usize);
          v@145 := &mut out^2;
          v@146 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@145, copy v@99);
          *(v@146) := move v@98;
          drop v@98;
          drop v@99;
          v@100 := copy d2^77;
          v@101 := (2: usize : usize);
          v@143 := &mut out^2;
          v@144 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@143, copy v@101);
          *(v@144) := move v@100;
          drop v@100;
          drop v@101;
          v@102 := copy d3^78;
          v@103 := (3: usize : usize);
          v@141 := &mut out^2;
          v@142 := move @ArrayIndexMut<'_, @Array<u8, 840: usize>, K>(move v@141, copy v@103);
          *(v@142) := move v@102;
          drop v@102;
          drop v@103;
          v@110 := ();
          v@24 := move v@110;
          drop d3^78;
          drop d2^77;
          drop d1^76;
          drop d0^75;
          drop v@25;
          drop v@24;
          v@108 := ();
          v@4 := move v@108
        }
        _ => {
          panic
        }
      }
    };
    drop v@5;
    drop v@4;
    v@0 := copy out^2;
    drop out^2;
    return
  }
Visiting call: libcrux_platform::simd256_support
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_platform::simd256_support
--> name: libcrux_platform::simd256_support
--> args: , ret: bool
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: libcrux::digest::shake128<840: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux::digest::shake128<840>
--> name: libcrux::digest::shake128
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: libcrux::digest::shake128x4<840: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux::digest::shake128x4<840>
--> name: libcrux::digest::shake128x4
--> args: &'0_0 (@Slice<u8>) ++ &'0_1 (@Slice<u8>) ++ &'0_2 (@Slice<u8>) ++ &'0_3 (@Slice<u8>), ret: (@Array<u8, C@0>, @Array<u8, C@0>, @Array<u8, C@0>, @Array<u8, C@0>)
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: libcrux::digest::shake128x4<840: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux::digest::shake128x4<840>
--> name: libcrux::digest::shake128x4
--> args: &'0_0 (@Slice<u8>) ++ &'0_1 (@Slice<u8>) ++ &'0_2 (@Slice<u8>) ++ &'0_3 (@Slice<u8>), ret: (@Array<u8, C@0>, @Array<u8, C@0>, @Array<u8, C@0>, @Array<u8, C@0>)
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: @ArrayToSliceShared<'_, u8, 34: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 34>
Visiting call: libcrux::digest::shake128x4<840: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux::digest::shake128x4<840>
--> name: libcrux::digest::shake128x4
--> args: &'0_0 (@Slice<u8>) ++ &'0_1 (@Slice<u8>) ++ &'0_2 (@Slice<u8>) ++ &'0_3 (@Slice<u8>), ret: (@Array<u8, C@0>, @Array<u8, C@0>, @Array<u8, C@0>, @Array<u8, C@0>)
101/465
102/465
103/465
Visiting opaque function: core::array::{@Array<T, N>#15}::index
  opaque fn core::array::{@Array<T, N>#15}::index<0, T, I, N>(&0 (@Array<T, N>), I) -> &0 (core::array::{@Array<T, N>#15}<T, I, N>[TraitClause@0]::Output)
  where
    // Inherited clauses
    [TraitClause@0]: core::ops::index::Index<@Slice<T>, I>,
ERROR translating core::array::{@Array<T, N>#15}::index: Failure("TODO: TraitTypes core::array::{@Array<T, N>#15}<T@0, T@1, C@0>[TraitClause@0]::Output")

104/465
105/465
Visiting opaque function: core::array::{@Array<T, N>#16}::index_mut
  opaque fn core::array::{@Array<T, N>#16}::index_mut<0, T, I, N>(&0 mut (@Array<T, N>), I) -> &0 mut (core::array::{@Array<T, N>#15}<T, I, N>[parent(TraitClause@0)::TraitClause@0]::Output)
  where
    // Inherited clauses
    [TraitClause@0]: core::ops::index::IndexMut<@Slice<T>, I>,
ERROR translating core::array::{@Array<T, N>#16}::index_mut: Failure("TODO: TraitTypes core::array::{@Array<T, N>#15}<T@0, T@1, C@0>[parent(TraitClause@0)::TraitClause@0]::Output")

106/465
107/465
108/465
109/465
Visiting opaque function: core::slice::index::{@Slice<T>}::index
  opaque fn core::slice::index::{@Slice<T>}::index<0, T, I>(&0 (@Slice<T>), I) -> &0 (TraitClause@0::Output)
  where
    // Inherited clauses
    [TraitClause@0]: core::slice::index::SliceIndex<I, @Slice<T>>,
ERROR translating core::slice::index::{@Slice<T>}::index: Failure("TODO: TraitTypes TraitClause@0::Output")

110/465
111/465
Visiting opaque function: core::slice::index::{@Slice<T>#1}::index_mut
  opaque fn core::slice::index::{@Slice<T>#1}::index_mut<0, T, I>(&0 mut (@Slice<T>), I) -> &0 mut (TraitClause@0::Output)
  where
    // Inherited clauses
    [TraitClause@0]: core::slice::index::SliceIndex<I, @Slice<T>>,
ERROR translating core::slice::index::{@Slice<T>#1}::index_mut: Failure("TODO: TraitTypes TraitClause@0::Output")

112/465
113/465
114/465
Visiting opaque function: core::slice::index::{core::ops::range::Range<usize>#4}::get
  opaque fn core::slice::index::{core::ops::range::Range<usize>#4}::get<0, T>(core::ops::range::Range<usize>, &0 (@Slice<T>)) -> core::option::Option<&0 (@Slice<T>)>
115/465
Visiting opaque function: core::slice::index::{core::ops::range::Range<usize>#4}::get_mut
  opaque fn core::slice::index::{core::ops::range::Range<usize>#4}::get_mut<0, T>(core::ops::range::Range<usize>, &0 mut (@Slice<T>)) -> core::option::Option<&0 mut (@Slice<T>)>
116/465
Visiting opaque function: core::slice::index::{core::ops::range::Range<usize>#4}::get_unchecked
  opaque unsafe fn core::slice::index::{core::ops::range::Range<usize>#4}::get_unchecked<T>(core::ops::range::Range<usize>, *const @Slice<T>) -> *const @Slice<T>
ERROR translating core::slice::index::{core::ops::range::Range<usize>#4}::get_unchecked: Failure("TODO: TRawPtr")

117/465
Visiting opaque function: core::slice::index::{core::ops::range::Range<usize>#4}::get_unchecked_mut
  opaque unsafe fn core::slice::index::{core::ops::range::Range<usize>#4}::get_unchecked_mut<T>(core::ops::range::Range<usize>, *mut @Slice<T>) -> *mut @Slice<T>
ERROR translating core::slice::index::{core::ops::range::Range<usize>#4}::get_unchecked_mut: Failure("TODO: TRawPtr")

118/465
Visiting opaque function: core::slice::index::{core::ops::range::Range<usize>#4}::index
  opaque fn core::slice::index::{core::ops::range::Range<usize>#4}::index<0, T>(core::ops::range::Range<usize>, &0 (@Slice<T>)) -> &0 (@Slice<T>)
119/465
Visiting opaque function: core::slice::index::{core::ops::range::Range<usize>#4}::index_mut
  opaque fn core::slice::index::{core::ops::range::Range<usize>#4}::index_mut<0, T>(core::ops::range::Range<usize>, &0 mut (@Slice<T>)) -> &0 mut (@Slice<T>)
120/465
121/465
Visiting opaque function: core::ops::index::IndexMut::index_mut
  opaque fn core::ops::index::IndexMut::index_mut<0, Self, Idx>(&0 mut (Self), Idx) -> &0 mut (parent(Self)::TraitClause@0::Output)
ERROR translating core::ops::index::IndexMut::index_mut: Failure("TODO: TraitTypes parent(Self)::TraitClause@0::Output")

122/465
Visiting opaque function: core::slice::{@Slice<T>}::copy_from_slice
  opaque fn core::slice::{@Slice<T>}::copy_from_slice<0, 1, T>(&0 mut (@Slice<T>), &1 (@Slice<T>))
123/465
Visiting opaque function: core::clone::impls::{u8#6}::clone
  opaque fn core::clone::impls::{u8#6}::clone<0>(&0 (u8)) -> u8
124/465
125/465
126/465
Visiting function: libcrux_kyber::ind_cpa::into_padded_array
  fn libcrux_kyber::ind_cpa::into_padded_array<0, LEN>(slice^1 : &0 (@Slice<u8>)) -> @Array<u8, LEN>  
{
    v@0 : @Array<u8, LEN>;
    slice^1 : &'_ (@Slice<u8>);
    v@2 : ();
    v@3 : bool;
    v@4 : ();
    v@5 : bool;
    v@6 : bool;
    v@7 : usize;
    v@8 : &'_ (@Slice<u8>);
    out^9 : @Array<u8, LEN>;
    v@10 : ();
    v@11 : &'_ mut (@Slice<u8>);
    v@12 : &'_ mut (@Slice<u8>);
    v@13 : &'_ mut (@Array<u8, LEN>);
    v@14 : core::ops::range::Range<usize>;
    v@15 : usize;
    v@16 : &'_ (@Slice<u8>);
    v@17 : &'_ (@Slice<u8>);
    v@18 : ();
    v@19 : ();
    v@20 : ();

    v@3 := (false : bool);
    if (move v@3) {
      v@8 := &*(slice^1);
      v@7 := move core::slice::{@Slice<T>}::len<u8>(move v@8);
      drop v@8;
      v@6 := move v@7 <= LEN;
      drop v@7;
      v@5 := ¬ move v@6;
      drop v@6;
      assert(¬move v@5);
      v@19 := ();
      v@4 := move v@19;
      drop v@5;
      drop v@4;
      v@20 := ();
      v@2 := move v@20
    }
    else {
      v@18 := ();
      v@2 := move v@18
    };
    drop v@3;
    drop v@2;
    out^9 := move @ArrayRepeat<'_, u8, LEN>((0: u8 : u8));
    fake_read out^9;
    v@13 := &mut out^9;
    v@16 := &*(slice^1);
    v@15 := move core::slice::{@Slice<T>}::len<u8>(move v@16);
    drop v@16;
    v@14 := core::ops::range::Range { start = (0: usize : usize); end = move v@15; };
    drop v@15;
    v@12 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, LEN>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut(move v@13, move v@14);
    v@11 := &two-phase *(v@12);
    drop v@14;
    drop v@13;
    v@17 := &*(slice^1);
    v@10 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@11, move v@17);
    drop v@17;
    drop v@11;
    drop v@12;
    drop v@10;
    v@0 := copy out^9;
    drop out^9;
    return
  }
Visiting call: core::slice::{@Slice<T>}::len<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::len<u8>
--> name: core::slice::{@Slice<T>}::len
--> args: &'0_0 (@Slice<T@0>), ret: usize
Visiting call: core::slice::{@Slice<T>}::len<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::len<u8>
--> name: core::slice::{@Slice<T>}::len
--> args: &'0_0 (@Slice<T@0>), ret: usize
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, C@0>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::Range<usize>>::index_mut
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
127/465
Visiting type: core::ops::range::RangeFrom
struct core::ops::range::RangeFrom<Idx>
{
  start : Idx
}
128/465
Visiting type: core::slice::iter::Iter
opaque type core::slice::iter::Iter<'a, T>
where
  T : 'a,
  T : 'a,
129/465
Visiting opaque function: core::slice::{@Slice<T>}::iter
  opaque fn core::slice::{@Slice<T>}::iter<0, T>(&0 (@Slice<T>)) -> core::slice::iter::Iter<0, T>
130/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next<'a, 1, T>(&1 mut (core::slice::iter::Iter<'a, T>)) -> core::option::Option<&'a (T)>
131/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::size_hint
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::size_hint<'a, 1, T>(&1 (core::slice::iter::Iter<'a, T>)) -> (usize, core::option::Option<usize>)
132/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::count
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::count<'a, T>(core::slice::iter::Iter<'a, T>) -> usize
133/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::nth
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::nth<'a, 1, T>(&1 mut (core::slice::iter::Iter<'a, T>), usize) -> core::option::Option<&'a (T)>
134/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::advance_by
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::advance_by<'a, 1, T>(&1 mut (core::slice::iter::Iter<'a, T>), usize) -> core::result::Result<(), core::num::nonzero::NonZeroUsize>
135/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::last
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::last<'a, T>(core::slice::iter::Iter<'a, T>) -> core::option::Option<&'a (T)>
136/465
137/465
138/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::for_each
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::for_each<'a, T, F>(core::slice::iter::Iter<'a, T>, F)
  where
    [TraitClause@0]: core::ops::function::FnMut<F, (&'_ (T))>,
    parent(TraitClause@0)::TraitClause@0 = (),
139/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::all
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::all<'a, 1, T, F>(&1 mut (core::slice::iter::Iter<'a, T>), F) -> bool
  where
    [TraitClause@0]: core::ops::function::FnMut<F, (&'_ (T))>,
    parent(TraitClause@0)::TraitClause@0 = bool,
140/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::any
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::any<'a, 1, T, F>(&1 mut (core::slice::iter::Iter<'a, T>), F) -> bool
  where
    [TraitClause@0]: core::ops::function::FnMut<F, (&'_ (T))>,
    parent(TraitClause@0)::TraitClause@0 = bool,
141/465
142/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::find_map
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::find_map<'a, 1, T, B, F>(&1 mut (core::slice::iter::Iter<'a, T>), F) -> core::option::Option<B>
  where
    [TraitClause@0]: core::ops::function::FnMut<F, (&'_ (T))>,
    parent(TraitClause@0)::TraitClause@0 = core::option::Option<B>,
143/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::position
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::position<'a, 1, T, P>(&1 mut (core::slice::iter::Iter<'a, T>), P) -> core::option::Option<usize>
  where
    [TraitClause@0]: core::ops::function::FnMut<P, (&'_ (T))>,
    parent(TraitClause@0)::TraitClause@0 = bool,
144/465
145/465
146/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::rposition
  opaque fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::rposition<'a, 1, T, P>(&1 mut (core::slice::iter::Iter<'a, T>), P) -> core::option::Option<usize>
  where
    [TraitClause@0]: core::ops::function::FnMut<P, (parent(TraitClause@1)::TraitClause@0::Item)>,
    [TraitClause@1]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Iter<'_, T>>,
    [TraitClause@2]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'_, T>>,
    parent(TraitClause@0)::TraitClause@0 = bool,
147/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::__iterator_get_unchecked
  opaque unsafe fn core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::__iterator_get_unchecked<'a, 1, T>(&1 mut (core::slice::iter::Iter<'a, T>), usize) -> core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'a, T>::Item
ERROR translating core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::__iterator_get_unchecked: Failure("TODO: TraitTypes core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'0_0, T@0>::Item")

148/465
149/465
150/465
Visiting type: core::slice::iter::ChunksExact
opaque type core::slice::iter::ChunksExact<'a, T>
where
  T : 'a,
  T : 'a,
151/465
Visiting opaque function: core::slice::{@Slice<T>}::chunks_exact
  opaque fn core::slice::{@Slice<T>}::chunks_exact<0, T>(&0 (@Slice<T>), usize) -> core::slice::iter::ChunksExact<0, T>
152/465
Visiting opaque function: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
  opaque fn core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next<'a, 1, T>(&1 mut (core::slice::iter::ChunksExact<'a, T>)) -> core::option::Option<&'a (@Slice<T>)>
153/465
Visiting opaque function: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::size_hint
  opaque fn core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::size_hint<'a, 1, T>(&1 (core::slice::iter::ChunksExact<'a, T>)) -> (usize, core::option::Option<usize>)
154/465
Visiting opaque function: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::count
  opaque fn core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::count<'a, T>(core::slice::iter::ChunksExact<'a, T>) -> usize
155/465
Visiting opaque function: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::nth
  opaque fn core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::nth<'a, 1, T>(&1 mut (core::slice::iter::ChunksExact<'a, T>), usize) -> core::option::Option<core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'a, T>::Item>
ERROR translating core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::nth: Failure("TODO: TraitTypes core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'0_0, T@0>::Item")

156/465
Visiting opaque function: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::last
  opaque fn core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::last<'a, T>(core::slice::iter::ChunksExact<'a, T>) -> core::option::Option<core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'a, T>::Item>
ERROR translating core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::last: Failure("TODO: TraitTypes core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'0_0, T@0>::Item")

157/465
Visiting opaque function: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::__iterator_get_unchecked
  opaque unsafe fn core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::__iterator_get_unchecked<'a, 1, T>(&1 mut (core::slice::iter::ChunksExact<'a, T>), usize) -> core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'a, T>::Item
ERROR translating core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::__iterator_get_unchecked: Failure("TODO: TraitTypes core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'0_0, T@0>::Item")

158/465
159/465
Visiting function: libcrux_kyber::serialize::compress_coefficients_3
  fn libcrux_kyber::serialize::compress_coefficients_3(coefficient1^1 : u16, coefficient2^2 : u16) -> (u8, u8, u8)  
{
    v@0 : (u8, u8, u8);
    coefficient1^1 : u16;
    coefficient2^2 : u16;
    coef1^3 : u8;
    v@4 : u16;
    v@5 : u16;
    coef2^6 : u8;
    v@7 : u16;
    v@8 : u16;
    v@9 : u16;
    v@10 : u16;
    v@11 : u16;
    v@12 : u16;
    coef3^13 : u8;
    v@14 : u16;
    v@15 : u16;
    v@16 : u16;
    v@17 : u8;
    v@18 : u8;
    v@19 : u8;

    v@5 := copy coefficient1^1;
    v@4 := move v@5 & (255: u16 : u16);
    drop v@5;
    coef1^3 := cast<u16,u8> move v@4;
    drop v@4;
    fake_read coef1^3;
    v@9 := copy coefficient1^1;
    v@8 := move v@9 >> (8: i32 : i32);
    drop v@9;
    v@12 := copy coefficient2^2;
    v@11 := move v@12 & (15: u16 : u16);
    drop v@12;
    v@10 := move v@11 << (4: i32 : i32);
    drop v@11;
    v@7 := move v@8 | move v@10;
    drop v@10;
    drop v@8;
    coef2^6 := cast<u16,u8> move v@7;
    drop v@7;
    fake_read coef2^6;
    v@16 := copy coefficient2^2;
    v@15 := move v@16 >> (4: i32 : i32);
    drop v@16;
    v@14 := move v@15 & (255: u16 : u16);
    drop v@15;
    coef3^13 := cast<u16,u8> move v@14;
    drop v@14;
    fake_read coef3^13;
    v@17 := copy coef1^3;
    v@18 := copy coef2^6;
    v@19 := copy coef3^13;
    v@0 := (move v@17, move v@18, move v@19);
    drop v@19;
    drop v@18;
    drop v@17;
    drop coef3^13;
    drop coef2^6;
    drop coef1^3;
    return
  }
160/465
Visiting function: libcrux_kyber::serialize::serialize_uncompressed_ring_element
  fn libcrux_kyber::serialize::serialize_uncompressed_ring_element(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> @Array<u8, 384: usize>  
{
    v@0 : @Array<u8, 384: usize>;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^2 : @Array<u8, 384: usize>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, i32>;
    v@6 : core::slice::iter::ChunksExact<'_, i32>;
    v@7 : &'_ (@Slice<i32>);
    v@8 : &'_ (@Array<i32, 256: usize>);
    iter^9 : core::slice::iter::ChunksExact<'_, i32>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (@Slice<i32>)>;
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    v@14 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    coefficients^15 : &'_ (@Slice<i32>);
    v@16 : ();
    coefficient1^17 : u16;
    v@18 : i32;
    v@19 : usize;
    coefficient2^20 : u16;
    v@21 : i32;
    v@22 : usize;
    coef1^23 : u8;
    coef2^24 : u8;
    coef3^25 : u8;
    v@26 : (u8, u8, u8);
    v@27 : u16;
    v@28 : u16;
    v@29 : u8;
    v@30 : usize;
    v@31 : usize;
    v@32 : u8;
    v@33 : usize;
    v@34 : usize;
    v@35 : usize;
    v@36 : u8;
    v@37 : usize;
    v@38 : usize;
    v@39 : usize;
    v@40 : ();
    v@41 : ();
    v@42 : ();
    v@43 : ();
    v@44 : &'_ mut (@Array<u8, 384: usize>);
    v@45 : &'_ mut (u8);
    v@46 : &'_ mut (@Array<u8, 384: usize>);
    v@47 : &'_ mut (u8);
    v@48 : &'_ mut (@Array<u8, 384: usize>);
    v@49 : &'_ mut (u8);
    v@50 : &'_ (@Slice<i32>);
    v@51 : &'_ (i32);
    v@52 : &'_ (@Slice<i32>);
    v@53 : &'_ (i32);

    serialized^2 := move @ArrayRepeat<'_, u8, 384: usize>((0: u8 : u8));
    fake_read serialized^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &(re^1).coefficients;
    v@7 := move @ArrayToSliceShared<'_, i32, 256: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<i32>(move v@7, (2: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          coefficients^15 := copy (v@12 as core::option::Option::Some).0;
          v@19 := (0: usize : usize);
          v@52 := &*(coefficients^15);
          v@53 := move @SliceIndexShared<'_, i32>(move v@52, copy v@19);
          v@18 := copy *(v@53);
          coefficient1^17 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@18);
          drop v@18;
          fake_read coefficient1^17;
          drop v@19;
          v@22 := (1: usize : usize);
          v@50 := &*(coefficients^15);
          v@51 := move @SliceIndexShared<'_, i32>(move v@50, copy v@22);
          v@21 := copy *(v@51);
          coefficient2^20 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@21);
          drop v@21;
          fake_read coefficient2^20;
          drop v@22;
          v@27 := copy coefficient1^17;
          v@28 := copy coefficient2^20;
          v@26 := move libcrux_kyber::serialize::compress_coefficients_3(move v@27, move v@28);
          drop v@28;
          drop v@27;
          fake_read v@26;
          coef1^23 := copy (v@26).0;
          coef2^24 := copy (v@26).1;
          coef3^25 := copy (v@26).2;
          drop v@26;
          v@29 := copy coef1^23;
          v@31 := copy i^4;
          v@30 := (3: usize : usize) * move v@31;
          drop v@31;
          v@48 := &mut serialized^2;
          v@49 := move @ArrayIndexMut<'_, u8, 384: usize>(move v@48, copy v@30);
          *(v@49) := move v@29;
          drop v@29;
          drop v@30;
          v@32 := copy coef2^24;
          v@35 := copy i^4;
          v@34 := (3: usize : usize) * move v@35;
          drop v@35;
          v@33 := move v@34 + (1: usize : usize);
          drop v@34;
          v@46 := &mut serialized^2;
          v@47 := move @ArrayIndexMut<'_, u8, 384: usize>(move v@46, copy v@33);
          *(v@47) := move v@32;
          drop v@32;
          drop v@33;
          v@36 := copy coef3^25;
          v@39 := copy i^4;
          v@38 := (3: usize : usize) * move v@39;
          drop v@39;
          v@37 := move v@38 + (2: usize : usize);
          drop v@38;
          v@44 := &mut serialized^2;
          v@45 := move @ArrayIndexMut<'_, u8, 384: usize>(move v@44, copy v@37);
          *(v@45) := move v@36;
          drop v@36;
          drop v@37;
          v@41 := ();
          v@16 := move v@41;
          drop coef3^25;
          drop coef2^24;
          drop coef1^23;
          drop coefficient2^20;
          drop coefficient1^17;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@42 := ();
          v@11 := move v@42;
          drop coefficients^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@43 := ();
          v@10 := move v@43;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@40 := ();
    v@3 := move v@40;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy serialized^2;
    drop serialized^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, i32, 256: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, i32, 256>
Visiting call: core::slice::{@Slice<T>}::chunks_exact<i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<i32>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, i32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, i32>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::serialize::compress_coefficients_3
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::compress_coefficients_3
--> name: libcrux_kyber::serialize::compress_coefficients_3
--> args: u16 ++ u16, ret: (u8, u8, u8)
161/465
Visiting function: libcrux_kyber::ind_cpa::serialize_secret_key
  fn libcrux_kyber::ind_cpa::serialize_secret_key<K, OUT_LEN>(key^1 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>) -> @Array<u8, OUT_LEN>  
{
    v@0 : @Array<u8, OUT_LEN>;
    key^1 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    out^2 : @Array<u8, OUT_LEN>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@6 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@7 : &'_ (@Slice<libcrux_kyber::arithmetic::PolynomialRingElement>);
    v@8 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    iter^9 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (libcrux_kyber::arithmetic::PolynomialRingElement)>;
    v@13 : &'_ mut (core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>);
    v@14 : &'_ mut (core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>);
    re^15 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@16 : ();
    v@17 : ();
    v@18 : &'_ mut (@Slice<u8>);
    v@19 : &'_ mut (@Slice<u8>);
    v@20 : &'_ mut (@Array<u8, OUT_LEN>);
    v@21 : core::ops::range::Range<usize>;
    v@22 : usize;
    v@23 : usize;
    v@24 : usize;
    v@25 : usize;
    v@26 : usize;
    v@27 : &'_ (@Slice<u8>);
    v@28 : &'_ (@Array<u8, 384: usize>);
    v@29 : &'_ (@Array<u8, 384: usize>);
    v@30 : @Array<u8, 384: usize>;
    v@31 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@32 : usize;
    v@33 : usize;
    v@34 : ();
    v@35 : ();
    v@36 : ();
    v@37 : ();

    out^2 := move @ArrayRepeat<'_, u8, OUT_LEN>((0: u8 : u8));
    fake_read out^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &key^1;
    v@7 := move @ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>(move v@7);
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          re^15 := copy (v@12 as core::option::Option::Some).0;
          v@20 := &mut out^2;
          v@23 := copy i^4;
          v@32 := global libcrux_kyber::constants::BYTES_PER_RING_ELEMENT;
          v@22 := move v@23 * move v@32;
          drop v@23;
          v@26 := copy i^4;
          v@25 := move v@26 + (1: usize : usize);
          drop v@26;
          v@33 := global libcrux_kyber::constants::BYTES_PER_RING_ELEMENT;
          v@24 := move v@25 * move v@33;
          drop v@25;
          v@21 := core::ops::range::Range { start = move v@22; end = move v@24; };
          drop v@24;
          drop v@22;
          v@19 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, OUT_LEN>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut(move v@20, move v@21);
          v@18 := &two-phase *(v@19);
          drop v@21;
          drop v@20;
          v@31 := copy *(re^15);
          v@30 := move libcrux_kyber::serialize::serialize_uncompressed_ring_element(move v@31);
          drop v@31;
          v@29 := &v@30;
          v@28 := &*(v@29);
          v@27 := move @ArrayToSliceShared<'_, u8, 384: usize>(move v@28);
          drop v@28;
          v@17 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@18, move v@27);
          drop v@27;
          drop v@18;
          drop v@30;
          drop v@29;
          drop v@19;
          drop v@17;
          v@35 := ();
          v@16 := move v@35;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@36 := ();
          v@11 := move v@36;
          drop re^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@37 := ();
          v@10 := move v@37;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@34 := ();
    v@3 := move v@34;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy out^2;
    drop out^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, @>
Visiting call: core::slice::{@Slice<T>}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, C@1>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::Range<usize>>::index_mut
Visiting call: libcrux_kyber::serialize::serialize_uncompressed_ring_element
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::serialize_uncompressed_ring_element
--> name: libcrux_kyber::serialize::serialize_uncompressed_ring_element
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: @Array<u8, 384: usize>
Visiting call: @ArrayToSliceShared<'_, u8, 384: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 384>
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
162/465
163/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get
  opaque fn core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get<0, T>(core::ops::range::RangeFrom<usize>, &0 (@Slice<T>)) -> core::option::Option<&0 (@Slice<T>)>
164/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get_mut
  opaque fn core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get_mut<0, T>(core::ops::range::RangeFrom<usize>, &0 mut (@Slice<T>)) -> core::option::Option<&0 mut (@Slice<T>)>
165/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get_unchecked
  opaque unsafe fn core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get_unchecked<T>(core::ops::range::RangeFrom<usize>, *const @Slice<T>) -> *const @Slice<T>
ERROR translating core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get_unchecked: Failure("TODO: TRawPtr")

166/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get_unchecked_mut
  opaque unsafe fn core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get_unchecked_mut<T>(core::ops::range::RangeFrom<usize>, *mut @Slice<T>) -> *mut @Slice<T>
ERROR translating core::slice::index::{core::ops::range::RangeFrom<usize>#6}::get_unchecked_mut: Failure("TODO: TRawPtr")

167/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeFrom<usize>#6}::index
  opaque fn core::slice::index::{core::ops::range::RangeFrom<usize>#6}::index<0, T>(core::ops::range::RangeFrom<usize>, &0 (@Slice<T>)) -> &0 (@Slice<T>)
168/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeFrom<usize>#6}::index_mut
  opaque fn core::slice::index::{core::ops::range::RangeFrom<usize>#6}::index_mut<0, T>(core::ops::range::RangeFrom<usize>, &0 mut (@Slice<T>)) -> &0 mut (@Slice<T>)
169/465
170/465
Visiting function: libcrux_kyber::ind_cpa::serialize_public_key
  fn libcrux_kyber::ind_cpa::serialize_public_key<0, K, RANKED_BYTES_PER_RING_ELEMENT, PUBLIC_KEY_SIZE>(t_as_ntt^1 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, seed_for_a^2 : &0 (@Slice<u8>)) -> @Array<u8, PUBLIC_KEY_SIZE>  
{
    v@0 : @Array<u8, PUBLIC_KEY_SIZE>;
    t_as_ntt^1 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    seed_for_a^2 : &'_ (@Slice<u8>);
    public_key_serialized^3 : @Array<u8, PUBLIC_KEY_SIZE>;
    v@4 : ();
    v@5 : &'_ mut (@Slice<u8>);
    v@6 : &'_ mut (@Slice<u8>);
    v@7 : &'_ mut (@Array<u8, PUBLIC_KEY_SIZE>);
    v@8 : core::ops::range::Range<usize>;
    v@9 : &'_ (@Slice<u8>);
    v@10 : &'_ (@Array<u8, RANKED_BYTES_PER_RING_ELEMENT>);
    v@11 : &'_ (@Array<u8, RANKED_BYTES_PER_RING_ELEMENT>);
    v@12 : @Array<u8, RANKED_BYTES_PER_RING_ELEMENT>;
    v@13 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@14 : ();
    v@15 : &'_ mut (@Slice<u8>);
    v@16 : &'_ mut (@Slice<u8>);
    v@17 : &'_ mut (@Array<u8, PUBLIC_KEY_SIZE>);
    v@18 : core::ops::range::RangeFrom<usize>;
    v@19 : &'_ (@Slice<u8>);

    public_key_serialized^3 := move @ArrayRepeat<'_, u8, PUBLIC_KEY_SIZE>((0: u8 : u8));
    fake_read public_key_serialized^3;
    v@7 := &mut public_key_serialized^3;
    v@8 := core::ops::range::Range { start = (0: usize : usize); end = RANKED_BYTES_PER_RING_ELEMENT; };
    v@6 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, PUBLIC_KEY_SIZE>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut(move v@7, move v@8);
    v@5 := &two-phase *(v@6);
    drop v@8;
    drop v@7;
    v@13 := copy t_as_ntt^1;
    v@12 := move libcrux_kyber::ind_cpa::serialize_secret_key<K, RANKED_BYTES_PER_RING_ELEMENT>(move v@13);
    drop v@13;
    v@11 := &v@12;
    v@10 := &*(v@11);
    v@9 := move @ArrayToSliceShared<'_, u8, RANKED_BYTES_PER_RING_ELEMENT>(move v@10);
    drop v@10;
    v@4 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@5, move v@9);
    drop v@9;
    drop v@5;
    drop v@12;
    drop v@11;
    drop v@6;
    drop v@4;
    v@17 := &mut public_key_serialized^3;
    v@18 := core::ops::range::RangeFrom { start = RANKED_BYTES_PER_RING_ELEMENT; };
    v@16 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, PUBLIC_KEY_SIZE>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut(move v@17, move v@18);
    v@15 := &two-phase *(v@16);
    drop v@18;
    drop v@17;
    v@19 := &*(seed_for_a^2);
    v@14 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@15, move v@19);
    drop v@19;
    drop v@15;
    drop v@16;
    drop v@14;
    v@0 := copy public_key_serialized^3;
    drop public_key_serialized^3;
    return
  }
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, C@2>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::Range<usize>>::index_mut
Visiting call: libcrux_kyber::ind_cpa::serialize_secret_key<C@0, C@1>
is_array_map: false
--> 0 type_args, 2 const_generics
--> 0 type_args, 2 const_generics
--> pattern: libcrux_kyber::ind_cpa::serialize_secret_key<@, @>
--> name: libcrux_kyber::ind_cpa::serialize_secret_key
--> args: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, ret: @Array<u8, C@1>
Visiting call: @ArrayToSliceShared<'_, u8, C@1>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, C@2>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::RangeFrom<usize>>::index_mut
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
171/465
Visiting function: libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element
  fn libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element<0>(serialized^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^1 : &'_ (@Slice<u8>);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::ChunksExact<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (@Slice<u8>)>;
    v@12 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    bytes^14 : &'_ (@Slice<u8>);
    v@15 : ();
    byte1^16 : i32;
    v@17 : u8;
    v@18 : usize;
    byte2^19 : i32;
    v@20 : u8;
    v@21 : usize;
    byte3^22 : i32;
    v@23 : u8;
    v@24 : usize;
    v@25 : i32;
    v@26 : i32;
    v@27 : i32;
    v@28 : i32;
    v@29 : i32;
    v@30 : usize;
    v@31 : usize;
    v@32 : i32;
    v@33 : i32;
    v@34 : i32;
    v@35 : i32;
    v@36 : i32;
    v@37 : usize;
    v@38 : usize;
    v@39 : usize;
    v@40 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@41 : ();
    v@42 : ();
    v@43 : ();
    v@44 : ();
    v@45 : &'_ mut (@Array<i32, 256: usize>);
    v@46 : &'_ mut (i32);
    v@47 : &'_ mut (@Array<i32, 256: usize>);
    v@48 : &'_ mut (i32);
    v@49 : &'_ (@Slice<u8>);
    v@50 : &'_ (u8);
    v@51 : &'_ (@Slice<u8>);
    v@52 : &'_ (u8);
    v@53 : &'_ (@Slice<u8>);
    v@54 : &'_ (u8);

    v@40 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    re^2 := move v@40;
    fake_read re^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@7 := &*(serialized^1);
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, (3: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          bytes^14 := copy (v@11 as core::option::Option::Some).0;
          v@18 := (0: usize : usize);
          v@53 := &*(bytes^14);
          v@54 := move @SliceIndexShared<'_, u8>(move v@53, copy v@18);
          v@17 := copy *(v@54);
          byte1^16 := cast<u8,i32> move v@17;
          drop v@17;
          fake_read byte1^16;
          drop v@18;
          v@21 := (1: usize : usize);
          v@51 := &*(bytes^14);
          v@52 := move @SliceIndexShared<'_, u8>(move v@51, copy v@21);
          v@20 := copy *(v@52);
          byte2^19 := cast<u8,i32> move v@20;
          drop v@20;
          fake_read byte2^19;
          drop v@21;
          v@24 := (2: usize : usize);
          v@49 := &*(bytes^14);
          v@50 := move @SliceIndexShared<'_, u8>(move v@49, copy v@24);
          v@23 := copy *(v@50);
          byte3^22 := cast<u8,i32> move v@23;
          drop v@23;
          fake_read byte3^22;
          drop v@24;
          v@27 := copy byte2^19;
          v@26 := move v@27 & (15: i32 : i32);
          drop v@27;
          v@25 := move v@26 << (8: i32 : i32);
          drop v@26;
          v@29 := copy byte1^16;
          v@28 := move v@29 & (255: i32 : i32);
          drop v@29;
          v@31 := copy i^4;
          v@30 := (2: usize : usize) * move v@31;
          drop v@31;
          v@47 := &mut (re^2).coefficients;
          v@48 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@47, copy v@30);
          *(v@48) := move v@25 | move v@28;
          drop v@28;
          drop v@25;
          drop v@30;
          v@33 := copy byte3^22;
          v@32 := move v@33 << (4: i32 : i32);
          drop v@33;
          v@36 := copy byte2^19;
          v@35 := move v@36 >> (4: i32 : i32);
          drop v@36;
          v@34 := move v@35 & (15: i32 : i32);
          drop v@35;
          v@39 := copy i^4;
          v@38 := (2: usize : usize) * move v@39;
          drop v@39;
          v@37 := move v@38 + (1: usize : usize);
          drop v@38;
          v@45 := &mut (re^2).coefficients;
          v@46 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@45, copy v@37);
          *(v@46) := move v@32 | move v@34;
          drop v@34;
          drop v@32;
          drop v@37;
          v@42 := ();
          v@15 := move v@42;
          drop byte3^22;
          drop byte2^19;
          drop byte1^16;
          drop v@15;
          i^4 := copy i^4 + (1: usize : usize);
          v@43 := ();
          v@10 := move v@43;
          drop bytes^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@44 := ();
          v@9 := move v@44;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@41 := ();
    v@3 := move v@41;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy re^2;
    drop re^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
172/465
Visiting function: libcrux_kyber::ind_cpa::deserialize_public_key
  fn libcrux_kyber::ind_cpa::deserialize_public_key<0, K, T_AS_NTT_ENCODED_SIZE>(public_key^1 : &0 (@Slice<u8>)) -> @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>  
{
    v@0 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    public_key^1 : &'_ (@Slice<u8>);
    t_as_ntt^2 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::ChunksExact<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (@Slice<u8>)>;
    v@12 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    t_as_ntt_bytes^14 : &'_ (@Slice<u8>);
    v@15 : ();
    v@16 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@17 : &'_ (@Slice<u8>);
    v@18 : usize;
    v@19 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@20 : usize;
    v@21 : ();
    v@22 : ();
    v@23 : ();
    v@24 : ();
    v@25 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@26 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);

    v@19 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    t_as_ntt^2 := move @ArrayRepeat<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@19);
    fake_read t_as_ntt^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@7 := &*(public_key^1);
    v@20 := global libcrux_kyber::constants::BYTES_PER_RING_ELEMENT;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, move v@20);
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          t_as_ntt_bytes^14 := copy (v@11 as core::option::Option::Some).0;
          v@17 := &*(t_as_ntt_bytes^14);
          v@16 := move libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element(move v@17);
          drop v@17;
          v@18 := copy i^4;
          v@25 := &mut t_as_ntt^2;
          v@26 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@25, copy v@18);
          *(v@26) := move v@16;
          drop v@16;
          drop v@18;
          v@22 := ();
          v@15 := move v@22;
          drop v@15;
          i^4 := copy i^4 + (1: usize : usize);
          v@23 := ();
          v@10 := move v@23;
          drop t_as_ntt_bytes^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@24 := ();
          v@9 := move v@24;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@21 := ();
    v@3 := move v@21;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy t_as_ntt^2;
    drop t_as_ntt^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element
--> name: libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
173/465
Visiting global: core::num::{u32#8}::BITS
  global core::num::{u32#8}::BITS : u32 = core::num::{u32#8}::BITS
Corresponding body:  opaque fn core::num::{u32#8}::BITS() -> u32
174/465
Visiting opaque function: core::clone::impls::{u32#8}::clone
  opaque fn core::clone::impls::{u32#8}::clone<0>(&0 (u32)) -> u32
175/465
176/465
Visiting opaque function: core::cmp::impls::{u32#24}::eq
  opaque fn core::cmp::impls::{u32#24}::eq<0, 1>(&0 (u32), &1 (u32)) -> bool
177/465
Visiting opaque function: core::cmp::impls::{u32#24}::ne
  opaque fn core::cmp::impls::{u32#24}::ne<0, 1>(&0 (u32), &1 (u32)) -> bool
178/465
179/465
Visiting opaque function: core::cmp::impls::{u32#60}::partial_cmp
  opaque fn core::cmp::impls::{u32#60}::partial_cmp<0, 1>(&0 (u32), &1 (u32)) -> core::option::Option<core::cmp::Ordering>
180/465
Visiting opaque function: core::cmp::impls::{u32#60}::lt
  opaque fn core::cmp::impls::{u32#60}::lt<0, 1>(&0 (u32), &1 (u32)) -> bool
181/465
Visiting opaque function: core::cmp::impls::{u32#60}::le
  opaque fn core::cmp::impls::{u32#60}::le<0, 1>(&0 (u32), &1 (u32)) -> bool
182/465
Visiting opaque function: core::cmp::impls::{u32#60}::ge
  opaque fn core::cmp::impls::{u32#60}::ge<0, 1>(&0 (u32), &1 (u32)) -> bool
183/465
Visiting opaque function: core::cmp::impls::{u32#60}::gt
  opaque fn core::cmp::impls::{u32#60}::gt<0, 1>(&0 (u32), &1 (u32)) -> bool
184/465
185/465
Visiting opaque function: core::iter::range::{u32#33}::steps_between
  opaque fn core::iter::range::{u32#33}::steps_between<0, 1>(&0 (u32), &1 (u32)) -> core::option::Option<usize>
186/465
Visiting opaque function: core::iter::range::{u32#33}::forward_checked
  opaque fn core::iter::range::{u32#33}::forward_checked(u32, usize) -> core::option::Option<u32>
187/465
Visiting opaque function: core::iter::range::{u32#33}::backward_checked
  opaque fn core::iter::range::{u32#33}::backward_checked(u32, usize) -> core::option::Option<u32>
188/465
Visiting opaque function: core::iter::range::{u32#33}::forward_unchecked
  opaque unsafe fn core::iter::range::{u32#33}::forward_unchecked(u32, usize) -> u32
189/465
Visiting opaque function: core::iter::range::{u32#33}::backward_unchecked
  opaque unsafe fn core::iter::range::{u32#33}::backward_unchecked(u32, usize) -> u32
190/465
Visiting opaque function: core::iter::range::{u32#33}::forward
  opaque fn core::iter::range::{u32#33}::forward(u32, usize) -> u32
191/465
Visiting opaque function: core::iter::range::{u32#33}::backward
  opaque fn core::iter::range::{u32#33}::backward(u32, usize) -> u32
192/465
193/465
Visiting function: libcrux_kyber::sampling::sample_from_binomial_distribution_2
  fn libcrux_kyber::sampling::sample_from_binomial_distribution_2<0>(randomness^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    randomness^1 : &'_ (@Slice<u8>);
    sampled^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@3 : ();
    chunk_number^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::ChunksExact<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (@Slice<u8>)>;
    v@12 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    byte_chunk^14 : &'_ (@Slice<u8>);
    v@15 : ();
    random_bits_as_u32^16 : u32;
    v@17 : u32;
    v@18 : u32;
    v@19 : u32;
    v@20 : u8;
    v@21 : usize;
    v@22 : u32;
    v@23 : u32;
    v@24 : u8;
    v@25 : usize;
    v@26 : u32;
    v@27 : u32;
    v@28 : u8;
    v@29 : usize;
    v@30 : u32;
    v@31 : u32;
    v@32 : u8;
    v@33 : usize;
    even_bits^34 : u32;
    v@35 : u32;
    odd_bits^36 : u32;
    v@37 : u32;
    v@38 : u32;
    coin_toss_outcomes^39 : u32;
    v@40 : u32;
    v@41 : u32;
    v@42 : core::ops::range::Range<u32>;
    v@43 : core::ops::range::Range<u32>;
    v@44 : u32;
    iter^45 : core::ops::range::Range<u32>;
    v@46 : ();
    v@47 : core::option::Option<u32>;
    v@48 : &'_ mut (core::ops::range::Range<u32>);
    v@49 : &'_ mut (core::ops::range::Range<u32>);
    outcome_set_^50 : u32;
    outcome_set^51 : u32;
    v@52 : u32;
    outcome_1^53 : i32;
    v@54 : u32;
    v@55 : u32;
    v@56 : u32;
    v@57 : u32;
    outcome_2^58 : i32;
    v@59 : u32;
    v@60 : u32;
    v@61 : u32;
    v@62 : u32;
    v@63 : u32;
    offset^64 : usize;
    v@65 : u32;
    v@66 : u32;
    v@67 : i32;
    v@68 : i32;
    v@69 : usize;
    v@70 : usize;
    v@71 : usize;
    v@72 : usize;
    v@73 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@74 : ();
    v@75 : u32;
    v@76 : ();
    v@77 : ();
    v@78 : ();
    v@79 : ();
    v@80 : ();
    v@81 : &'_ mut (@Array<i32, 256: usize>);
    v@82 : &'_ mut (i32);
    v@83 : &'_ (@Slice<u8>);
    v@84 : &'_ (u8);
    v@85 : &'_ (@Slice<u8>);
    v@86 : &'_ (u8);
    v@87 : &'_ (@Slice<u8>);
    v@88 : &'_ (u8);
    v@89 : &'_ (@Slice<u8>);
    v@90 : &'_ (u8);

    v@73 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    sampled^2 := move v@73;
    fake_read sampled^2;
    chunk_number^4 := (0: usize : usize);
    fake_read chunk_number^4;
    v@7 := &*(randomness^1);
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, (4: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          byte_chunk^14 := copy (v@11 as core::option::Option::Some).0;
          v@21 := (0: usize : usize);
          v@89 := &*(byte_chunk^14);
          v@90 := move @SliceIndexShared<'_, u8>(move v@89, copy v@21);
          v@20 := copy *(v@90);
          v@19 := cast<u8,u32> move v@20;
          drop v@20;
          v@25 := (1: usize : usize);
          v@87 := &*(byte_chunk^14);
          v@88 := move @SliceIndexShared<'_, u8>(move v@87, copy v@25);
          v@24 := copy *(v@88);
          v@23 := cast<u8,u32> move v@24;
          drop v@24;
          v@22 := move v@23 << (8: i32 : i32);
          drop v@23;
          v@18 := move v@19 | move v@22;
          drop v@22;
          drop v@19;
          v@29 := (2: usize : usize);
          v@85 := &*(byte_chunk^14);
          v@86 := move @SliceIndexShared<'_, u8>(move v@85, copy v@29);
          v@28 := copy *(v@86);
          v@27 := cast<u8,u32> move v@28;
          drop v@28;
          v@26 := move v@27 << (16: i32 : i32);
          drop v@27;
          v@17 := move v@18 | move v@26;
          drop v@26;
          drop v@18;
          v@33 := (3: usize : usize);
          v@83 := &*(byte_chunk^14);
          v@84 := move @SliceIndexShared<'_, u8>(move v@83, copy v@33);
          v@32 := copy *(v@84);
          v@31 := cast<u8,u32> move v@32;
          drop v@32;
          v@30 := move v@31 << (24: i32 : i32);
          drop v@31;
          random_bits_as_u32^16 := move v@17 | move v@30;
          drop v@30;
          drop v@17;
          fake_read random_bits_as_u32^16;
          drop v@33;
          drop v@29;
          drop v@25;
          drop v@21;
          v@35 := copy random_bits_as_u32^16;
          even_bits^34 := move v@35 & (1431655765: u32 : u32);
          drop v@35;
          fake_read even_bits^34;
          v@38 := copy random_bits_as_u32^16;
          v@37 := move v@38 >> (1: i32 : i32);
          drop v@38;
          odd_bits^36 := move v@37 & (1431655765: u32 : u32);
          drop v@37;
          fake_read odd_bits^36;
          v@40 := copy even_bits^34;
          v@41 := copy odd_bits^36;
          coin_toss_outcomes^39 := move v@40 + move v@41;
          drop v@41;
          drop v@40;
          fake_read coin_toss_outcomes^39;
          v@75 := global core::num::{u32#8}::BITS;
          v@44 := move v@75 / (4: u32 : u32);
          v@43 := core::ops::range::Range { start = (0: u32 : u32); end = move v@44; };
          drop v@44;
          v@42 := move core::iter::traits::collect::{I}<core::ops::range::Range<u32>>[core::iter::range::{core::ops::range::Range<A>#3}<u32>[core::iter::range::{u32#33}]]::into_iter(move v@43);
          drop v@43;
          fake_read v@42;
          iter^45 := move v@42;
          loop {
            v@49 := &mut iter^45;
            v@48 := &two-phase *(v@49);
            v@47 := move core::iter::range::{core::ops::range::Range<A>#3}<u32>[core::iter::range::{u32#33}]::next(move v@48);
            drop v@48;
            fake_read v@47;
            match (v@47) {
            | 0 => {
                break 0
              }
            | 1 => {
                outcome_set_^50 := copy (v@47 as core::option::Option::Some).0;
                v@52 := copy outcome_set_^50;
                outcome_set^51 := move v@52 * (4: u32 : u32);
                drop v@52;
                fake_read outcome_set^51;
                v@56 := copy coin_toss_outcomes^39;
                v@57 := copy outcome_set^51;
                v@55 := move v@56 >> move v@57;
                drop v@57;
                drop v@56;
                v@54 := move v@55 & (3: u32 : u32);
                drop v@55;
                outcome_1^53 := cast<u32,i32> move v@54;
                drop v@54;
                fake_read outcome_1^53;
                v@61 := copy coin_toss_outcomes^39;
                v@63 := copy outcome_set^51;
                v@62 := move v@63 + (2: u32 : u32);
                drop v@63;
                v@60 := move v@61 >> move v@62;
                drop v@62;
                drop v@61;
                v@59 := move v@60 & (3: u32 : u32);
                drop v@60;
                outcome_2^58 := cast<u32,i32> move v@59;
                drop v@59;
                fake_read outcome_2^58;
                v@66 := copy outcome_set^51;
                v@65 := move v@66 >> (2: i32 : i32);
                drop v@66;
                offset^64 := cast<u32,usize> move v@65;
                drop v@65;
                fake_read offset^64;
                v@67 := copy outcome_1^53;
                v@68 := copy outcome_2^58;
                v@71 := copy chunk_number^4;
                v@70 := (8: usize : usize) * move v@71;
                drop v@71;
                v@72 := copy offset^64;
                v@69 := move v@70 + move v@72;
                drop v@72;
                drop v@70;
                v@81 := &mut (sampled^2).coefficients;
                v@82 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@81, copy v@69);
                *(v@82) := move v@67 - move v@68;
                drop v@68;
                drop v@67;
                drop v@69;
                v@77 := ();
                v@46 := move v@77;
                drop offset^64;
                drop outcome_2^58;
                drop outcome_1^53;
                drop outcome_set^51;
                drop outcome_set_^50;
                drop v@49;
                drop v@47;
                drop v@46;
                v@78 := ();
                v@9 := move v@78;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@76 := ();
          v@15 := move v@76;
          drop v@49;
          drop v@47;
          drop v@46;
          drop iter^45;
          drop v@42;
          drop coin_toss_outcomes^39;
          drop odd_bits^36;
          drop even_bits^34;
          drop random_bits_as_u32^16;
          drop v@15;
          chunk_number^4 := copy chunk_number^4 + (1: usize : usize);
          v@79 := ();
          v@10 := move v@79;
          drop byte_chunk^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@80 := ();
          v@9 := move v@80;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@74 := ();
    v@3 := move v@74;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop chunk_number^4;
    drop v@3;
    v@0 := copy sampled^2;
    drop sampled^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<u32>>[core::iter::range::{core::ops::range::Range<A>#3}<u32>[core::iter::range::{u32#33}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<u32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<u32>[core::iter::range::{u32#33}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<u32>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
194/465
Visiting opaque function: core::clone::impls::{i32#14}::clone
  opaque fn core::clone::impls::{i32#14}::clone<0>(&0 (i32)) -> i32
195/465
196/465
Visiting opaque function: core::cmp::impls::{i32#30}::eq
  opaque fn core::cmp::impls::{i32#30}::eq<0, 1>(&0 (i32), &1 (i32)) -> bool
197/465
Visiting opaque function: core::cmp::impls::{i32#30}::ne
  opaque fn core::cmp::impls::{i32#30}::ne<0, 1>(&0 (i32), &1 (i32)) -> bool
198/465
199/465
Visiting opaque function: core::cmp::impls::{i32#72}::partial_cmp
  opaque fn core::cmp::impls::{i32#72}::partial_cmp<0, 1>(&0 (i32), &1 (i32)) -> core::option::Option<core::cmp::Ordering>
200/465
Visiting opaque function: core::cmp::impls::{i32#72}::lt
  opaque fn core::cmp::impls::{i32#72}::lt<0, 1>(&0 (i32), &1 (i32)) -> bool
201/465
Visiting opaque function: core::cmp::impls::{i32#72}::le
  opaque fn core::cmp::impls::{i32#72}::le<0, 1>(&0 (i32), &1 (i32)) -> bool
202/465
Visiting opaque function: core::cmp::impls::{i32#72}::ge
  opaque fn core::cmp::impls::{i32#72}::ge<0, 1>(&0 (i32), &1 (i32)) -> bool
203/465
Visiting opaque function: core::cmp::impls::{i32#72}::gt
  opaque fn core::cmp::impls::{i32#72}::gt<0, 1>(&0 (i32), &1 (i32)) -> bool
204/465
205/465
Visiting opaque function: core::iter::range::{i32#34}::steps_between
  opaque fn core::iter::range::{i32#34}::steps_between<0, 1>(&0 (i32), &1 (i32)) -> core::option::Option<usize>
206/465
Visiting opaque function: core::iter::range::{i32#34}::forward_checked
  opaque fn core::iter::range::{i32#34}::forward_checked(i32, usize) -> core::option::Option<i32>
207/465
Visiting opaque function: core::iter::range::{i32#34}::backward_checked
  opaque fn core::iter::range::{i32#34}::backward_checked(i32, usize) -> core::option::Option<i32>
208/465
Visiting opaque function: core::iter::range::{i32#34}::forward_unchecked
  opaque unsafe fn core::iter::range::{i32#34}::forward_unchecked(i32, usize) -> i32
209/465
Visiting opaque function: core::iter::range::{i32#34}::backward_unchecked
  opaque unsafe fn core::iter::range::{i32#34}::backward_unchecked(i32, usize) -> i32
210/465
Visiting opaque function: core::iter::range::{i32#34}::forward
  opaque fn core::iter::range::{i32#34}::forward(i32, usize) -> i32
211/465
Visiting opaque function: core::iter::range::{i32#34}::backward
  opaque fn core::iter::range::{i32#34}::backward(i32, usize) -> i32
212/465
213/465
Visiting function: libcrux_kyber::sampling::sample_from_binomial_distribution_3
  fn libcrux_kyber::sampling::sample_from_binomial_distribution_3<0>(randomness^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    randomness^1 : &'_ (@Slice<u8>);
    sampled^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@3 : ();
    chunk_number^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::ChunksExact<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (@Slice<u8>)>;
    v@12 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    byte_chunk^14 : &'_ (@Slice<u8>);
    v@15 : ();
    random_bits_as_u24^16 : u32;
    v@17 : u32;
    v@18 : u32;
    v@19 : u8;
    v@20 : usize;
    v@21 : u32;
    v@22 : u32;
    v@23 : u8;
    v@24 : usize;
    v@25 : u32;
    v@26 : u32;
    v@27 : u8;
    v@28 : usize;
    first_bits^29 : u32;
    v@30 : u32;
    second_bits^31 : u32;
    v@32 : u32;
    v@33 : u32;
    third_bits^34 : u32;
    v@35 : u32;
    v@36 : u32;
    coin_toss_outcomes^37 : u32;
    v@38 : u32;
    v@39 : u32;
    v@40 : u32;
    v@41 : u32;
    v@42 : core::ops::range::Range<i32>;
    v@43 : core::ops::range::Range<i32>;
    iter^44 : core::ops::range::Range<i32>;
    v@45 : ();
    v@46 : core::option::Option<i32>;
    v@47 : &'_ mut (core::ops::range::Range<i32>);
    v@48 : &'_ mut (core::ops::range::Range<i32>);
    outcome_set_^49 : i32;
    outcome_set^50 : i32;
    v@51 : i32;
    outcome_1^52 : i32;
    v@53 : u32;
    v@54 : u32;
    v@55 : u32;
    v@56 : i32;
    outcome_2^57 : i32;
    v@58 : u32;
    v@59 : u32;
    v@60 : u32;
    v@61 : i32;
    v@62 : i32;
    offset^63 : usize;
    v@64 : i32;
    v@65 : i32;
    v@66 : i32;
    v@67 : i32;
    v@68 : usize;
    v@69 : usize;
    v@70 : usize;
    v@71 : usize;
    v@72 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@73 : ();
    v@74 : ();
    v@75 : ();
    v@76 : ();
    v@77 : ();
    v@78 : ();
    v@79 : &'_ mut (@Array<i32, 256: usize>);
    v@80 : &'_ mut (i32);
    v@81 : &'_ (@Slice<u8>);
    v@82 : &'_ (u8);
    v@83 : &'_ (@Slice<u8>);
    v@84 : &'_ (u8);
    v@85 : &'_ (@Slice<u8>);
    v@86 : &'_ (u8);

    v@72 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    sampled^2 := move v@72;
    fake_read sampled^2;
    chunk_number^4 := (0: usize : usize);
    fake_read chunk_number^4;
    v@7 := &*(randomness^1);
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, (3: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          byte_chunk^14 := copy (v@11 as core::option::Option::Some).0;
          v@20 := (0: usize : usize);
          v@85 := &*(byte_chunk^14);
          v@86 := move @SliceIndexShared<'_, u8>(move v@85, copy v@20);
          v@19 := copy *(v@86);
          v@18 := cast<u8,u32> move v@19;
          drop v@19;
          v@24 := (1: usize : usize);
          v@83 := &*(byte_chunk^14);
          v@84 := move @SliceIndexShared<'_, u8>(move v@83, copy v@24);
          v@23 := copy *(v@84);
          v@22 := cast<u8,u32> move v@23;
          drop v@23;
          v@21 := move v@22 << (8: i32 : i32);
          drop v@22;
          v@17 := move v@18 | move v@21;
          drop v@21;
          drop v@18;
          v@28 := (2: usize : usize);
          v@81 := &*(byte_chunk^14);
          v@82 := move @SliceIndexShared<'_, u8>(move v@81, copy v@28);
          v@27 := copy *(v@82);
          v@26 := cast<u8,u32> move v@27;
          drop v@27;
          v@25 := move v@26 << (16: i32 : i32);
          drop v@26;
          random_bits_as_u24^16 := move v@17 | move v@25;
          drop v@25;
          drop v@17;
          fake_read random_bits_as_u24^16;
          drop v@28;
          drop v@24;
          drop v@20;
          v@30 := copy random_bits_as_u24^16;
          first_bits^29 := move v@30 & (2396745: u32 : u32);
          drop v@30;
          fake_read first_bits^29;
          v@33 := copy random_bits_as_u24^16;
          v@32 := move v@33 >> (1: i32 : i32);
          drop v@33;
          second_bits^31 := move v@32 & (2396745: u32 : u32);
          drop v@32;
          fake_read second_bits^31;
          v@36 := copy random_bits_as_u24^16;
          v@35 := move v@36 >> (2: i32 : i32);
          drop v@36;
          third_bits^34 := move v@35 & (2396745: u32 : u32);
          drop v@35;
          fake_read third_bits^34;
          v@39 := copy first_bits^29;
          v@40 := copy second_bits^31;
          v@38 := move v@39 + move v@40;
          drop v@40;
          drop v@39;
          v@41 := copy third_bits^34;
          coin_toss_outcomes^37 := move v@38 + move v@41;
          drop v@41;
          drop v@38;
          fake_read coin_toss_outcomes^37;
          v@43 := core::ops::range::Range { start = (0: i32 : i32); end = (24: i32 : i32); };
          v@42 := move core::iter::traits::collect::{I}<core::ops::range::Range<i32>>[core::iter::range::{core::ops::range::Range<A>#3}<i32>[core::iter::range::{i32#34}]]::into_iter(move v@43);
          drop v@43;
          fake_read v@42;
          iter^44 := move v@42;
          loop {
            v@48 := &mut iter^44;
            v@47 := &two-phase *(v@48);
            v@46 := move core::iter::range::{core::ops::range::Range<A>#3}<i32>[core::iter::range::{i32#34}]::next(move v@47);
            drop v@47;
            fake_read v@46;
            match (v@46) {
            | 0 => {
                break 0
              }
            | 1 => {
                outcome_set_^49 := copy (v@46 as core::option::Option::Some).0;
                v@51 := copy outcome_set_^49;
                outcome_set^50 := move v@51 * (6: i32 : i32);
                drop v@51;
                fake_read outcome_set^50;
                v@55 := copy coin_toss_outcomes^37;
                v@56 := copy outcome_set^50;
                v@54 := move v@55 >> move v@56;
                drop v@56;
                drop v@55;
                v@53 := move v@54 & (7: u32 : u32);
                drop v@54;
                outcome_1^52 := cast<u32,i32> move v@53;
                drop v@53;
                fake_read outcome_1^52;
                v@60 := copy coin_toss_outcomes^37;
                v@62 := copy outcome_set^50;
                v@61 := move v@62 + (3: i32 : i32);
                drop v@62;
                v@59 := move v@60 >> move v@61;
                drop v@61;
                drop v@60;
                v@58 := move v@59 & (7: u32 : u32);
                drop v@59;
                outcome_2^57 := cast<u32,i32> move v@58;
                drop v@58;
                fake_read outcome_2^57;
                v@65 := copy outcome_set^50;
                v@64 := move v@65 / (6: i32 : i32);
                drop v@65;
                offset^63 := cast<i32,usize> move v@64;
                drop v@64;
                fake_read offset^63;
                v@66 := copy outcome_1^52;
                v@67 := copy outcome_2^57;
                v@70 := copy chunk_number^4;
                v@69 := (4: usize : usize) * move v@70;
                drop v@70;
                v@71 := copy offset^63;
                v@68 := move v@69 + move v@71;
                drop v@71;
                drop v@69;
                v@79 := &mut (sampled^2).coefficients;
                v@80 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@79, copy v@68);
                *(v@80) := move v@66 - move v@67;
                drop v@67;
                drop v@66;
                drop v@68;
                v@76 := ();
                v@45 := move v@76;
                drop offset^63;
                drop outcome_2^57;
                drop outcome_1^52;
                drop outcome_set^50;
                drop outcome_set_^49;
                drop v@48;
                drop v@46;
                drop v@45;
                v@78 := ();
                v@9 := move v@78;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@74 := ();
          v@15 := move v@74;
          drop v@48;
          drop v@46;
          drop v@45;
          drop iter^44;
          drop v@42;
          drop coin_toss_outcomes^37;
          drop third_bits^34;
          drop second_bits^31;
          drop first_bits^29;
          drop random_bits_as_u24^16;
          drop v@15;
          chunk_number^4 := copy chunk_number^4 + (1: usize : usize);
          v@75 := ();
          v@10 := move v@75;
          drop byte_chunk^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@77 := ();
          v@9 := move v@77;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@73 := ();
    v@3 := move v@73;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop chunk_number^4;
    drop v@3;
    v@0 := copy sampled^2;
    drop sampled^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<i32>>[core::iter::range::{core::ops::range::Range<A>#3}<i32>[core::iter::range::{i32#34}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<i32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<i32>[core::iter::range::{i32#34}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<i32>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
214/465
Visiting function: libcrux_kyber::sampling::sample_from_binomial_distribution
  fn libcrux_kyber::sampling::sample_from_binomial_distribution<0, ETA>(randomness^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    randomness^1 : &'_ (@Slice<u8>);
    v@2 : u32;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);

    v@2 := cast<usize,u32> ETA;
    fake_read v@2;
    switch (copy v@2) {
    | 2: u32 => {
        v@3 := &*(randomness^1);
        v@0 := move libcrux_kyber::sampling::sample_from_binomial_distribution_2(move v@3);
        drop v@3
      }
    | 3: u32 => {
        v@4 := &*(randomness^1);
        v@0 := move libcrux_kyber::sampling::sample_from_binomial_distribution_3(move v@4);
        drop v@4
      }
      _ => {
        panic
      }
    };
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::sampling::sample_from_binomial_distribution_2
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::sampling::sample_from_binomial_distribution_2
--> name: libcrux_kyber::sampling::sample_from_binomial_distribution_2
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::sampling::sample_from_binomial_distribution_3
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::sampling::sample_from_binomial_distribution_3
--> name: libcrux_kyber::sampling::sample_from_binomial_distribution_3
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
215/465
Visiting global: libcrux_kyber::ntt::ZETAS_TIMES_MONTGOMERY_R
  global libcrux_kyber::ntt::ZETAS_TIMES_MONTGOMERY_R : @Array<i32, 128: usize> = libcrux_kyber::ntt::ZETAS_TIMES_MONTGOMERY_R
Corresponding body:  fn libcrux_kyber::ntt::ZETAS_TIMES_MONTGOMERY_R() -> @Array<i32, 128: usize>  
{
    v@0 : @Array<i32, 128: usize>;

    v@0 := [(-1044: i32 : i32), (-758: i32 : i32), (-359: i32 : i32), (-1517: i32 : i32), (1493: i32 : i32), (1422: i32 : i32), (287: i32 : i32), (202: i32 : i32), (-171: i32 : i32), (622: i32 : i32), (1577: i32 : i32), (182: i32 : i32), (962: i32 : i32), (-1202: i32 : i32), (-1474: i32 : i32), (1468: i32 : i32), (573: i32 : i32), (-1325: i32 : i32), (264: i32 : i32), (383: i32 : i32), (-829: i32 : i32), (1458: i32 : i32), (-1602: i32 : i32), (-130: i32 : i32), (-681: i32 : i32), (1017: i32 : i32), (732: i32 : i32), (608: i32 : i32), (-1542: i32 : i32), (411: i32 : i32), (-205: i32 : i32), (-1571: i32 : i32), (1223: i32 : i32), (652: i32 : i32), (-552: i32 : i32), (1015: i32 : i32), (-1293: i32 : i32), (1491: i32 : i32), (-282: i32 : i32), (-1544: i32 : i32), (516: i32 : i32), (-8: i32 : i32), (-320: i32 : i32), (-666: i32 : i32), (-1618: i32 : i32), (-1162: i32 : i32), (126: i32 : i32), (1469: i32 : i32), (-853: i32 : i32), (-90: i32 : i32), (-271: i32 : i32), (830: i32 : i32), (107: i32 : i32), (-1421: i32 : i32), (-247: i32 : i32), (-951: i32 : i32), (-398: i32 : i32), (961: i32 : i32), (-1508: i32 : i32), (-725: i32 : i32), (448: i32 : i32), (-1065: i32 : i32), (677: i32 : i32), (-1275: i32 : i32), (-1103: i32 : i32), (430: i32 : i32), (555: i32 : i32), (843: i32 : i32), (-1251: i32 : i32), (871: i32 : i32), (1550: i32 : i32), (105: i32 : i32), (422: i32 : i32), (587: i32 : i32), (177: i32 : i32), (-235: i32 : i32), (-291: i32 : i32), (-460: i32 : i32), (1574: i32 : i32), (1653: i32 : i32), (-246: i32 : i32), (778: i32 : i32), (1159: i32 : i32), (-147: i32 : i32), (-777: i32 : i32), (1483: i32 : i32), (-602: i32 : i32), (1119: i32 : i32), (-1590: i32 : i32), (644: i32 : i32), (-872: i32 : i32), (349: i32 : i32), (418: i32 : i32), (329: i32 : i32), (-156: i32 : i32), (-75: i32 : i32), (817: i32 : i32), (1097: i32 : i32), (603: i32 : i32), (610: i32 : i32), (1322: i32 : i32), (-1285: i32 : i32), (-1465: i32 : i32), (384: i32 : i32), (-1215: i32 : i32), (-136: i32 : i32), (1218: i32 : i32), (-1335: i32 : i32), (-874: i32 : i32), (220: i32 : i32), (-1187: i32 : i32), (-1659: i32 : i32), (-1185: i32 : i32), (-1530: i32 : i32), (-1278: i32 : i32), (794: i32 : i32), (-1510: i32 : i32), (-854: i32 : i32), (-870: i32 : i32), (478: i32 : i32), (-108: i32 : i32), (-308: i32 : i32), (996: i32 : i32), (991: i32 : i32), (958: i32 : i32), (-1460: i32 : i32), (1522: i32 : i32), (1628: i32 : i32)];
    return
  }
216/465
Visiting function: libcrux_kyber::ntt::ntt_at_layer
  fn libcrux_kyber::ntt::ntt_at_layer<0>(zeta_i^1 : &0 mut (usize), re^2 : libcrux_kyber::arithmetic::PolynomialRingElement, layer^3 : usize, initial_coefficient_bound^4 : usize) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    zeta_i^1 : &'_ mut (usize);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    layer^3 : usize;
    initial_coefficient_bound^4 : usize;
    step^5 : usize;
    v@6 : usize;
    v@7 : ();
    v@8 : core::ops::range::Range<usize>;
    v@9 : core::ops::range::Range<usize>;
    v@10 : usize;
    v@11 : usize;
    iter^12 : core::ops::range::Range<usize>;
    v@13 : ();
    v@14 : ();
    v@15 : core::option::Option<usize>;
    v@16 : &'_ mut (core::ops::range::Range<usize>);
    v@17 : &'_ mut (core::ops::range::Range<usize>);
    round^18 : usize;
    offset^19 : usize;
    v@20 : usize;
    v@21 : usize;
    v@22 : usize;
    v@23 : core::ops::range::Range<usize>;
    v@24 : core::ops::range::Range<usize>;
    v@25 : usize;
    v@26 : usize;
    v@27 : usize;
    v@28 : usize;
    iter^29 : core::ops::range::Range<usize>;
    v@30 : ();
    v@31 : core::option::Option<usize>;
    v@32 : &'_ mut (core::ops::range::Range<usize>);
    v@33 : &'_ mut (core::ops::range::Range<usize>);
    j^34 : usize;
    t^35 : i32;
    v@36 : i32;
    v@37 : usize;
    v@38 : usize;
    v@39 : usize;
    v@40 : i32;
    v@41 : @Array<i32, 128: usize>;
    v@42 : usize;
    v@43 : i32;
    v@44 : usize;
    v@45 : i32;
    v@46 : usize;
    v@47 : usize;
    v@48 : usize;
    v@49 : i32;
    v@50 : usize;
    v@51 : i32;
    v@52 : usize;
    v@53 : ();
    v@54 : ();
    v@55 : @Array<i32, 128: usize>;
    v@56 : ();
    v@57 : ();
    v@58 : ();
    v@59 : &'_ mut (@Array<i32, 256: usize>);
    v@60 : &'_ mut (i32);
    v@61 : &'_ (@Array<i32, 256: usize>);
    v@62 : &'_ (i32);
    v@63 : &'_ mut (@Array<i32, 256: usize>);
    v@64 : &'_ mut (i32);
    v@65 : &'_ (@Array<i32, 256: usize>);
    v@66 : &'_ (i32);
    v@67 : &'_ (@Array<i32, 128: usize>);
    v@68 : &'_ (i32);
    v@69 : &'_ (@Array<i32, 256: usize>);
    v@70 : &'_ (i32);

    v@6 := copy layer^3;
    step^5 := (1: usize : usize) << move v@6;
    drop v@6;
    fake_read step^5;
    v@11 := copy step^5;
    v@10 := (128: usize : usize) / move v@11;
    drop v@11;
    v@9 := core::ops::range::Range { start = (0: usize : usize); end = move v@10; };
    drop v@10;
    v@8 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@9);
    drop v@9;
    fake_read v@8;
    iter^12 := move v@8;
    loop {
      v@17 := &mut iter^12;
      v@16 := &two-phase *(v@17);
      v@15 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@16);
      drop v@16;
      fake_read v@15;
      match (v@15) {
      | 0 => {
          break 0
        }
      | 1 => {
          round^18 := copy (v@15 as core::option::Option::Some).0;
          *(zeta_i^1) := copy *(zeta_i^1) + (1: usize : usize);
          v@21 := copy round^18;
          v@22 := copy step^5;
          v@20 := move v@21 * move v@22;
          drop v@22;
          drop v@21;
          offset^19 := move v@20 * (2: usize : usize);
          drop v@20;
          fake_read offset^19;
          v@25 := copy offset^19;
          v@27 := copy offset^19;
          v@28 := copy step^5;
          v@26 := move v@27 + move v@28;
          drop v@28;
          drop v@27;
          v@24 := core::ops::range::Range { start = move v@25; end = move v@26; };
          drop v@26;
          drop v@25;
          v@23 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@24);
          drop v@24;
          fake_read v@23;
          iter^29 := move v@23;
          loop {
            v@33 := &mut iter^29;
            v@32 := &two-phase *(v@33);
            v@31 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@32);
            drop v@32;
            fake_read v@31;
            match (v@31) {
            | 0 => {
                break 0
              }
            | 1 => {
                j^34 := copy (v@31 as core::option::Option::Some).0;
                v@38 := copy j^34;
                v@39 := copy step^5;
                v@37 := move v@38 + move v@39;
                drop v@39;
                drop v@38;
                v@69 := &(re^2).coefficients;
                v@70 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@69, copy v@37);
                v@36 := copy *(v@70);
                v@55 := global libcrux_kyber::ntt::ZETAS_TIMES_MONTGOMERY_R;
                v@41 := move v@55;
                v@42 := copy *(zeta_i^1);
                v@67 := &v@41;
                v@68 := move @ArrayIndexShared<'_, i32, 128: usize>(move v@67, copy v@42);
                v@40 := copy *(v@68);
                t^35 := move libcrux_kyber::arithmetic::montgomery_multiply_sfe_by_fer(move v@36, move v@40);
                drop v@40;
                drop v@36;
                fake_read t^35;
                drop v@42;
                drop v@41;
                drop v@37;
                v@44 := copy j^34;
                v@65 := &(re^2).coefficients;
                v@66 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@65, copy v@44);
                v@43 := copy *(v@66);
                v@45 := copy t^35;
                v@47 := copy j^34;
                v@48 := copy step^5;
                v@46 := move v@47 + move v@48;
                drop v@48;
                drop v@47;
                v@63 := &mut (re^2).coefficients;
                v@64 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@63, copy v@46);
                *(v@64) := move v@43 - move v@45;
                drop v@45;
                drop v@43;
                drop v@46;
                drop v@44;
                v@50 := copy j^34;
                v@61 := &(re^2).coefficients;
                v@62 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@61, copy v@50);
                v@49 := copy *(v@62);
                v@51 := copy t^35;
                v@52 := copy j^34;
                v@59 := &mut (re^2).coefficients;
                v@60 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@59, copy v@52);
                *(v@60) := move v@49 + move v@51;
                drop v@51;
                drop v@49;
                drop v@52;
                drop v@50;
                v@57 := ();
                v@30 := move v@57;
                drop t^35;
                drop j^34;
                drop v@33;
                drop v@31;
                drop v@30;
                v@58 := ();
                v@13 := move v@58;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@54 := ();
          v@14 := move v@54;
          drop v@33;
          drop v@31;
          drop v@30;
          drop iter^29;
          drop v@23;
          drop offset^19;
          drop round^18;
          drop v@17;
          drop v@15;
          drop v@14;
          v@56 := ();
          v@13 := move v@56;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@53 := ();
    v@7 := move v@53;
    drop v@17;
    drop v@15;
    drop v@14;
    drop iter^12;
    drop v@8;
    drop v@7;
    v@0 := copy re^2;
    drop step^5;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::montgomery_multiply_sfe_by_fer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_multiply_sfe_by_fer
--> name: libcrux_kyber::arithmetic::montgomery_multiply_sfe_by_fer
--> args: i32 ++ i32, ret: i32
217/465
Visiting function: libcrux_kyber::ntt::ntt_at_layer_3
  fn libcrux_kyber::ntt::ntt_at_layer_3<0>(zeta_i^1 : &0 mut (usize), re^2 : libcrux_kyber::arithmetic::PolynomialRingElement, layer^3 : usize) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    zeta_i^1 : &'_ mut (usize);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    layer^3 : usize;
    v@4 : &'_ mut (usize);
    v@5 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@6 : usize;

    v@4 := &two-phase *(zeta_i^1);
    v@5 := copy re^2;
    v@6 := copy layer^3;
    v@0 := move libcrux_kyber::ntt::ntt_at_layer(move v@4, move v@5, move v@6, (3: usize : usize));
    drop v@6;
    drop v@5;
    drop v@4;
    return
  }
Visiting call: libcrux_kyber::ntt::ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer
--> name: libcrux_kyber::ntt::ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
218/465
Visiting function: libcrux_kyber::ntt::ntt_binomially_sampled_ring_element
  fn libcrux_kyber::ntt::ntt_binomially_sampled_ring_element(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    zeta_i^2 : usize;
    v@3 : ();
    v@4 : core::ops::range::Range<usize>;
    v@5 : core::ops::range::Range<usize>;
    iter^6 : core::ops::range::Range<usize>;
    v@7 : ();
    v@8 : ();
    v@9 : core::option::Option<usize>;
    v@10 : &'_ mut (core::ops::range::Range<usize>);
    v@11 : &'_ mut (core::ops::range::Range<usize>);
    j^12 : usize;
    t^13 : i32;
    v@14 : i32;
    v@15 : usize;
    v@16 : usize;
    v@17 : i32;
    v@18 : usize;
    v@19 : i32;
    v@20 : usize;
    v@21 : usize;
    v@22 : i32;
    v@23 : usize;
    v@24 : i32;
    v@25 : usize;
    v@26 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@27 : &'_ mut (usize);
    v@28 : &'_ mut (usize);
    v@29 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@30 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@31 : &'_ mut (usize);
    v@32 : &'_ mut (usize);
    v@33 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@34 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@35 : &'_ mut (usize);
    v@36 : &'_ mut (usize);
    v@37 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@38 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@39 : &'_ mut (usize);
    v@40 : &'_ mut (usize);
    v@41 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@42 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@43 : &'_ mut (usize);
    v@44 : &'_ mut (usize);
    v@45 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@46 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@47 : &'_ mut (usize);
    v@48 : &'_ mut (usize);
    v@49 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@50 : ();
    v@51 : core::ops::range::Range<usize>;
    v@52 : core::ops::range::Range<usize>;
    iter^53 : core::ops::range::Range<usize>;
    v@54 : ();
    v@55 : core::option::Option<usize>;
    v@56 : &'_ mut (core::ops::range::Range<usize>);
    v@57 : &'_ mut (core::ops::range::Range<usize>);
    i^58 : usize;
    v@59 : i32;
    v@60 : i32;
    v@61 : usize;
    v@62 : usize;
    v@63 : ();
    v@64 : ();
    v@65 : ();
    v@66 : usize;
    v@67 : ();
    v@68 : ();
    v@69 : ();
    v@70 : &'_ mut (@Array<i32, 256: usize>);
    v@71 : &'_ mut (i32);
    v@72 : &'_ (@Array<i32, 256: usize>);
    v@73 : &'_ (i32);
    v@74 : &'_ mut (@Array<i32, 256: usize>);
    v@75 : &'_ mut (i32);
    v@76 : &'_ (@Array<i32, 256: usize>);
    v@77 : &'_ (i32);
    v@78 : &'_ mut (@Array<i32, 256: usize>);
    v@79 : &'_ mut (i32);
    v@80 : &'_ (@Array<i32, 256: usize>);
    v@81 : &'_ (i32);
    v@82 : &'_ (@Array<i32, 256: usize>);
    v@83 : &'_ (i32);

    zeta_i^2 := (1: usize : usize);
    fake_read zeta_i^2;
    v@5 := core::ops::range::Range { start = (0: usize : usize); end = (128: usize : usize); };
    v@4 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@5);
    drop v@5;
    fake_read v@4;
    iter^6 := move v@4;
    loop {
      v@11 := &mut iter^6;
      v@10 := &two-phase *(v@11);
      v@9 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@10);
      drop v@10;
      fake_read v@9;
      match (v@9) {
      | 0 => {
          break 0
        }
      | 1 => {
          j^12 := copy (v@9 as core::option::Option::Some).0;
          v@16 := copy j^12;
          v@15 := move v@16 + (128: usize : usize);
          drop v@16;
          v@82 := &(re^1).coefficients;
          v@83 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@82, copy v@15);
          v@14 := copy *(v@83);
          t^13 := move v@14 * (-1600: i32 : i32);
          drop v@14;
          fake_read t^13;
          drop v@15;
          v@18 := copy j^12;
          v@80 := &(re^1).coefficients;
          v@81 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@80, copy v@18);
          v@17 := copy *(v@81);
          v@19 := copy t^13;
          v@21 := copy j^12;
          v@20 := move v@21 + (128: usize : usize);
          drop v@21;
          v@78 := &mut (re^1).coefficients;
          v@79 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@78, copy v@20);
          *(v@79) := move v@17 - move v@19;
          drop v@19;
          drop v@17;
          drop v@20;
          drop v@18;
          v@23 := copy j^12;
          v@76 := &(re^1).coefficients;
          v@77 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@76, copy v@23);
          v@22 := copy *(v@77);
          v@24 := copy t^13;
          v@25 := copy j^12;
          v@74 := &mut (re^1).coefficients;
          v@75 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@74, copy v@25);
          *(v@75) := move v@22 + move v@24;
          drop v@24;
          drop v@22;
          drop v@25;
          drop v@23;
          v@64 := ();
          v@8 := move v@64;
          drop t^13;
          drop j^12;
          drop v@11;
          drop v@9;
          drop v@8;
          v@65 := ();
          v@7 := move v@65;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@63 := ();
    v@3 := move v@63;
    drop v@11;
    drop v@9;
    drop v@8;
    drop iter^6;
    drop v@4;
    drop v@3;
    v@28 := &mut zeta_i^2;
    v@27 := &two-phase *(v@28);
    v@29 := copy re^1;
    v@26 := move libcrux_kyber::ntt::ntt_at_layer_3(move v@27, move v@29, (6: usize : usize));
    drop v@29;
    drop v@27;
    re^1 := move v@26;
    drop v@26;
    drop v@28;
    v@32 := &mut zeta_i^2;
    v@31 := &two-phase *(v@32);
    v@33 := copy re^1;
    v@30 := move libcrux_kyber::ntt::ntt_at_layer_3(move v@31, move v@33, (5: usize : usize));
    drop v@33;
    drop v@31;
    re^1 := move v@30;
    drop v@30;
    drop v@32;
    v@36 := &mut zeta_i^2;
    v@35 := &two-phase *(v@36);
    v@37 := copy re^1;
    v@34 := move libcrux_kyber::ntt::ntt_at_layer_3(move v@35, move v@37, (4: usize : usize));
    drop v@37;
    drop v@35;
    re^1 := move v@34;
    drop v@34;
    drop v@36;
    v@40 := &mut zeta_i^2;
    v@39 := &two-phase *(v@40);
    v@41 := copy re^1;
    v@38 := move libcrux_kyber::ntt::ntt_at_layer_3(move v@39, move v@41, (3: usize : usize));
    drop v@41;
    drop v@39;
    re^1 := move v@38;
    drop v@38;
    drop v@40;
    v@44 := &mut zeta_i^2;
    v@43 := &two-phase *(v@44);
    v@45 := copy re^1;
    v@42 := move libcrux_kyber::ntt::ntt_at_layer_3(move v@43, move v@45, (2: usize : usize));
    drop v@45;
    drop v@43;
    re^1 := move v@42;
    drop v@42;
    drop v@44;
    v@48 := &mut zeta_i^2;
    v@47 := &two-phase *(v@48);
    v@49 := copy re^1;
    v@46 := move libcrux_kyber::ntt::ntt_at_layer_3(move v@47, move v@49, (1: usize : usize));
    drop v@49;
    drop v@47;
    re^1 := move v@46;
    drop v@46;
    drop v@48;
    v@66 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@52 := core::ops::range::Range { start = (0: usize : usize); end = move v@66; };
    v@51 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@52);
    drop v@52;
    fake_read v@51;
    iter^53 := move v@51;
    loop {
      v@57 := &mut iter^53;
      v@56 := &two-phase *(v@57);
      v@55 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@56);
      drop v@56;
      fake_read v@55;
      match (v@55) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^58 := copy (v@55 as core::option::Option::Some).0;
          v@61 := copy i^58;
          v@72 := &(re^1).coefficients;
          v@73 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@72, copy v@61);
          v@60 := copy *(v@73);
          v@59 := move libcrux_kyber::arithmetic::barrett_reduce(move v@60);
          drop v@60;
          v@62 := copy i^58;
          v@70 := &mut (re^1).coefficients;
          v@71 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@70, copy v@62);
          *(v@71) := move v@59;
          drop v@59;
          drop v@62;
          drop v@61;
          v@68 := ();
          v@54 := move v@68;
          drop i^58;
          drop v@57;
          drop v@55;
          drop v@54;
          v@69 := ();
          v@7 := move v@69;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@67 := ();
    v@50 := move v@67;
    drop v@57;
    drop v@55;
    drop v@54;
    drop iter^53;
    drop v@51;
    drop v@50;
    v@0 := copy re^1;
    drop zeta_i^2;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3
--> name: libcrux_kyber::ntt::ntt_at_layer_3
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3
--> name: libcrux_kyber::ntt::ntt_at_layer_3
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3
--> name: libcrux_kyber::ntt::ntt_at_layer_3
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3
--> name: libcrux_kyber::ntt::ntt_at_layer_3
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3
--> name: libcrux_kyber::ntt::ntt_at_layer_3
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3
--> name: libcrux_kyber::ntt::ntt_at_layer_3
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::barrett_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::barrett_reduce
--> name: libcrux_kyber::arithmetic::barrett_reduce
--> args: i32, ret: i32
219/465
Visiting function: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt
  fn libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<K, ETA, ETA_RANDOMNESS_SIZE>(prf_input^1 : @Array<u8, 33: usize>, domain_separator^2 : u8) -> (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, u8)  
{
    v@0 : (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, u8);
    prf_input^1 : @Array<u8, 33: usize>;
    domain_separator^2 : u8;
    re_as_ntt^3 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@4 : ();
    v@5 : core::ops::range::Range<usize>;
    v@6 : core::ops::range::Range<usize>;
    iter^7 : core::ops::range::Range<usize>;
    v@8 : ();
    v@9 : ();
    v@10 : core::option::Option<usize>;
    v@11 : &'_ mut (core::ops::range::Range<usize>);
    v@12 : &'_ mut (core::ops::range::Range<usize>);
    i^13 : usize;
    v@14 : u8;
    v@15 : usize;
    prf_output^16 : @Array<u8, ETA_RANDOMNESS_SIZE>;
    v@17 : &'_ (@Slice<u8>);
    v@18 : &'_ (@Array<u8, 33: usize>);
    v@19 : &'_ (@Array<u8, 33: usize>);
    r^20 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@21 : &'_ (@Slice<u8>);
    v@22 : &'_ (@Array<u8, ETA_RANDOMNESS_SIZE>);
    v@23 : &'_ (@Array<u8, ETA_RANDOMNESS_SIZE>);
    v@24 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@25 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@26 : usize;
    v@27 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@28 : u8;
    v@29 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@30 : ();
    v@31 : ();
    v@32 : ();
    v@33 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@34 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@35 : &'_ mut (@Array<u8, 33: usize>);
    v@36 : &'_ mut (u8);

    v@29 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    re_as_ntt^3 := move @ArrayRepeat<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@29);
    fake_read re_as_ntt^3;
    v@6 := core::ops::range::Range { start = (0: usize : usize); end = K; };
    v@5 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^7 := move v@5;
    loop {
      v@12 := &mut iter^7;
      v@11 := &two-phase *(v@12);
      v@10 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@11);
      drop v@11;
      fake_read v@10;
      match (v@10) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^13 := copy (v@10 as core::option::Option::Some).0;
          v@14 := copy domain_separator^2;
          v@15 := (32: usize : usize);
          v@35 := &mut prf_input^1;
          v@36 := move @ArrayIndexMut<'_, u8, 33: usize>(move v@35, copy v@15);
          *(v@36) := move v@14;
          drop v@14;
          drop v@15;
          domain_separator^2 := copy domain_separator^2 + (1: u8 : u8);
          v@19 := &prf_input^1;
          v@18 := &*(v@19);
          v@17 := move @ArrayToSliceShared<'_, u8, 33: usize>(move v@18);
          drop v@18;
          prf_output^16 := move libcrux_kyber::hash_functions::PRF<ETA_RANDOMNESS_SIZE>(move v@17);
          drop v@17;
          fake_read prf_output^16;
          drop v@19;
          v@23 := &prf_output^16;
          v@22 := &*(v@23);
          v@21 := move @ArrayToSliceShared<'_, u8, ETA_RANDOMNESS_SIZE>(move v@22);
          drop v@22;
          r^20 := move libcrux_kyber::sampling::sample_from_binomial_distribution<ETA>(move v@21);
          drop v@21;
          fake_read r^20;
          drop v@23;
          v@25 := copy r^20;
          v@24 := move libcrux_kyber::ntt::ntt_binomially_sampled_ring_element(move v@25);
          drop v@25;
          v@26 := copy i^13;
          v@33 := &mut re_as_ntt^3;
          v@34 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@33, copy v@26);
          *(v@34) := move v@24;
          drop v@24;
          drop v@26;
          v@31 := ();
          v@9 := move v@31;
          drop r^20;
          drop prf_output^16;
          drop i^13;
          drop v@12;
          drop v@10;
          drop v@9;
          v@32 := ();
          v@8 := move v@32;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@30 := ();
    v@4 := move v@30;
    drop v@12;
    drop v@10;
    drop v@9;
    drop iter^7;
    drop v@5;
    drop v@4;
    v@27 := copy re_as_ntt^3;
    v@28 := copy domain_separator^2;
    v@0 := (move v@27, move v@28);
    drop v@28;
    drop v@27;
    drop re_as_ntt^3;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: @ArrayToSliceShared<'_, u8, 33: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 33>
Visiting call: libcrux_kyber::hash_functions::PRF<C@2>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::hash_functions::PRF<@>
--> name: libcrux_kyber::hash_functions::PRF
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: @ArrayToSliceShared<'_, u8, C@2>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::sampling::sample_from_binomial_distribution<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::sampling::sample_from_binomial_distribution<@>
--> name: libcrux_kyber::sampling::sample_from_binomial_distribution
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_binomially_sampled_ring_element
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_binomially_sampled_ring_element
--> name: libcrux_kyber::ntt::ntt_binomially_sampled_ring_element
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: libcrux_kyber::arithmetic::PolynomialRingElement
220/465
Visiting function: libcrux_kyber::ind_cpa::sample_ring_element_cbd
  fn libcrux_kyber::ind_cpa::sample_ring_element_cbd<0, 1, K, ETA2_RANDOMNESS_SIZE, ETA2>(prf_input^1 : &0 mut (@Array<u8, 33: usize>), domain_separator^2 : &1 mut (u8)) -> @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>  
{
    v@0 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    prf_input^1 : &'_ mut (@Array<u8, 33: usize>);
    domain_separator^2 : &'_ mut (u8);
    error_1^3 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@4 : ();
    v@5 : core::ops::range::Range<usize>;
    v@6 : core::ops::range::Range<usize>;
    iter^7 : core::ops::range::Range<usize>;
    v@8 : ();
    v@9 : ();
    v@10 : core::option::Option<usize>;
    v@11 : &'_ mut (core::ops::range::Range<usize>);
    v@12 : &'_ mut (core::ops::range::Range<usize>);
    i^13 : usize;
    v@14 : u8;
    v@15 : usize;
    prf_output^16 : @Array<u8, ETA2_RANDOMNESS_SIZE>;
    v@17 : &'_ (@Slice<u8>);
    v@18 : &'_ (@Array<u8, 33: usize>);
    v@19 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@20 : &'_ (@Slice<u8>);
    v@21 : &'_ (@Array<u8, ETA2_RANDOMNESS_SIZE>);
    v@22 : &'_ (@Array<u8, ETA2_RANDOMNESS_SIZE>);
    v@23 : usize;
    v@24 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@25 : ();
    v@26 : ();
    v@27 : ();
    v@28 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@29 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@30 : &'_ mut (@Array<u8, 33: usize>);
    v@31 : &'_ mut (u8);

    v@24 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    error_1^3 := move @ArrayRepeat<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@24);
    fake_read error_1^3;
    v@6 := core::ops::range::Range { start = (0: usize : usize); end = K; };
    v@5 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^7 := move v@5;
    loop {
      v@12 := &mut iter^7;
      v@11 := &two-phase *(v@12);
      v@10 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@11);
      drop v@11;
      fake_read v@10;
      match (v@10) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^13 := copy (v@10 as core::option::Option::Some).0;
          v@14 := copy *(domain_separator^2);
          v@15 := (32: usize : usize);
          v@30 := &mut *(prf_input^1);
          v@31 := move @ArrayIndexMut<'_, u8, 33: usize>(move v@30, copy v@15);
          *(v@31) := move v@14;
          drop v@14;
          drop v@15;
          *(domain_separator^2) := copy *(domain_separator^2) + (1: u8 : u8);
          v@18 := &*(prf_input^1);
          v@17 := move @ArrayToSliceShared<'_, u8, 33: usize>(move v@18);
          drop v@18;
          prf_output^16 := move libcrux_kyber::hash_functions::PRF<ETA2_RANDOMNESS_SIZE>(move v@17);
          drop v@17;
          fake_read prf_output^16;
          v@22 := &prf_output^16;
          v@21 := &*(v@22);
          v@20 := move @ArrayToSliceShared<'_, u8, ETA2_RANDOMNESS_SIZE>(move v@21);
          drop v@21;
          v@19 := move libcrux_kyber::sampling::sample_from_binomial_distribution<ETA2>(move v@20);
          drop v@20;
          v@23 := copy i^13;
          v@28 := &mut error_1^3;
          v@29 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@28, copy v@23);
          *(v@29) := move v@19;
          drop v@19;
          drop v@23;
          drop v@22;
          v@26 := ();
          v@9 := move v@26;
          drop prf_output^16;
          drop i^13;
          drop v@12;
          drop v@10;
          drop v@9;
          v@27 := ();
          v@8 := move v@27;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@25 := ();
    v@4 := move v@25;
    drop v@12;
    drop v@10;
    drop v@9;
    drop iter^7;
    drop v@5;
    drop v@4;
    v@0 := copy error_1^3;
    drop error_1^3;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: @ArrayToSliceShared<'_, u8, 33: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 33>
Visiting call: libcrux_kyber::hash_functions::PRF<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::hash_functions::PRF<@>
--> name: libcrux_kyber::hash_functions::PRF
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: @ArrayToSliceShared<'_, u8, C@1>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::sampling::sample_from_binomial_distribution<C@2>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::sampling::sample_from_binomial_distribution<@>
--> name: libcrux_kyber::sampling::sample_from_binomial_distribution
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
221/465
Visiting opaque function: core::slice::{@Slice<T>}::split_at
  opaque fn core::slice::{@Slice<T>}::split_at<0, T>(&0 (@Slice<T>), usize) -> (&0 (@Slice<T>), &0 (@Slice<T>))
222/465
Visiting type: core::slice::iter::Chunks
opaque type core::slice::iter::Chunks<'a, T>
where
  T : 'a,
  T : 'a,
223/465
Visiting opaque function: core::slice::{@Slice<T>}::chunks
  opaque fn core::slice::{@Slice<T>}::chunks<0, T>(&0 (@Slice<T>), usize) -> core::slice::iter::Chunks<0, T>
224/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::next
  opaque fn core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::next<'a, 1, T>(&1 mut (core::slice::iter::Chunks<'a, T>)) -> core::option::Option<&'a (@Slice<T>)>
225/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::size_hint
  opaque fn core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::size_hint<'a, 1, T>(&1 (core::slice::iter::Chunks<'a, T>)) -> (usize, core::option::Option<usize>)
226/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::count
  opaque fn core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::count<'a, T>(core::slice::iter::Chunks<'a, T>) -> usize
227/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::nth
  opaque fn core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::nth<'a, 1, T>(&1 mut (core::slice::iter::Chunks<'a, T>), usize) -> core::option::Option<core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'a, T>::Item>
ERROR translating core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::nth: Failure("TODO: TraitTypes core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'0_0, T@0>::Item")

228/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::last
  opaque fn core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::last<'a, T>(core::slice::iter::Chunks<'a, T>) -> core::option::Option<core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'a, T>::Item>
ERROR translating core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::last: Failure("TODO: TraitTypes core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'0_0, T@0>::Item")

229/465
Visiting opaque function: core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::__iterator_get_unchecked
  opaque unsafe fn core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::__iterator_get_unchecked<'a, 1, T>(&1 mut (core::slice::iter::Chunks<'a, T>), usize) -> core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'a, T>::Item
ERROR translating core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::__iterator_get_unchecked: Failure("TODO: TraitTypes core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'0_0, T@0>::Item")

230/465
231/465
Visiting function: libcrux_kyber::sampling::rejection_sampling_panic_with_diagnostic
  fn libcrux_kyber::sampling::rejection_sampling_panic_with_diagnostic()  
{
    v@0 : ();

    panic
  }
232/465
Visiting function: libcrux_kyber::sampling::sample_from_uniform_distribution
  fn libcrux_kyber::sampling::sample_from_uniform_distribution(randomness^1 : @Array<u8, 840: usize>) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    randomness^1 : @Array<u8, 840: usize>;
    sampled_coefficients^2 : usize;
    out^3 : libcrux_kyber::arithmetic::PolynomialRingElement;
    done^4 : bool;
    v@5 : ();
    v@6 : core::slice::iter::Chunks<'_, u8>;
    v@7 : core::slice::iter::Chunks<'_, u8>;
    v@8 : &'_ (@Slice<u8>);
    v@9 : &'_ (@Array<u8, 840: usize>);
    iter^10 : core::slice::iter::Chunks<'_, u8>;
    v@11 : ();
    v@12 : ();
    v@13 : core::option::Option<&'_ (@Slice<u8>)>;
    v@14 : &'_ mut (core::slice::iter::Chunks<'_, u8>);
    v@15 : &'_ mut (core::slice::iter::Chunks<'_, u8>);
    bytes^16 : &'_ (@Slice<u8>);
    v@17 : bool;
    v@18 : bool;
    b1^19 : i32;
    v@20 : u8;
    v@21 : usize;
    b2^22 : i32;
    v@23 : u8;
    v@24 : usize;
    b3^25 : i32;
    v@26 : u8;
    v@27 : usize;
    d1^28 : i32;
    v@29 : i32;
    v@30 : i32;
    v@31 : i32;
    v@32 : i32;
    d2^33 : i32;
    v@34 : i32;
    v@35 : i32;
    v@36 : i32;
    v@37 : i32;
    v@38 : ();
    v@39 : bool;
    v@40 : bool;
    v@41 : i32;
    v@42 : bool;
    v@43 : usize;
    v@44 : i32;
    v@45 : usize;
    v@46 : ();
    v@47 : bool;
    v@48 : bool;
    v@49 : i32;
    v@50 : bool;
    v@51 : usize;
    v@52 : i32;
    v@53 : usize;
    v@54 : bool;
    v@55 : usize;
    v@56 : ();
    v@57 : bool;
    v@58 : bool;
    v@59 : ();
    v@60 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@61 : ();
    v@62 : ();
    v@63 : i32;
    v@64 : ();
    v@65 : ();
    v@66 : ();
    v@67 : usize;
    v@68 : ();
    v@69 : ();
    v@70 : i32;
    v@71 : usize;
    v@72 : ();
    v@73 : ();
    v@74 : usize;
    v@75 : ();
    v@76 : ();
    v@77 : &'_ mut (@Array<i32, 256: usize>);
    v@78 : &'_ mut (i32);
    v@79 : &'_ mut (@Array<i32, 256: usize>);
    v@80 : &'_ mut (i32);
    v@81 : &'_ mut (@Array<i32, 256: usize>);
    v@82 : &'_ mut (i32);
    v@83 : &'_ mut (@Array<i32, 256: usize>);
    v@84 : &'_ mut (i32);
    v@85 : &'_ mut (@Array<i32, 256: usize>);
    v@86 : &'_ mut (i32);
    v@87 : &'_ mut (@Array<i32, 256: usize>);
    v@88 : &'_ mut (i32);
    v@89 : &'_ mut (@Array<i32, 256: usize>);
    v@90 : &'_ mut (i32);
    v@91 : &'_ mut (@Array<i32, 256: usize>);
    v@92 : &'_ mut (i32);
    v@93 : &'_ mut (@Array<i32, 256: usize>);
    v@94 : &'_ mut (i32);
    v@95 : &'_ mut (@Array<i32, 256: usize>);
    v@96 : &'_ mut (i32);
    v@97 : &'_ (@Slice<u8>);
    v@98 : &'_ (u8);
    v@99 : &'_ (@Slice<u8>);
    v@100 : &'_ (u8);
    v@101 : &'_ (@Slice<u8>);
    v@102 : &'_ (u8);

    sampled_coefficients^2 := (0: usize : usize);
    fake_read sampled_coefficients^2;
    v@60 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    out^3 := move v@60;
    fake_read out^3;
    done^4 := (false : bool);
    fake_read done^4;
    v@9 := &randomness^1;
    v@8 := move @ArrayToSliceShared<'_, u8, 840: usize>(move v@9);
    drop v@9;
    v@7 := move core::slice::{@Slice<T>}::chunks<u8>(move v@8, (3: usize : usize));
    drop v@8;
    v@6 := move core::iter::traits::collect::{I}<core::slice::iter::Chunks<'_, u8>>[core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'_, u8>]::into_iter(move v@7);
    drop v@7;
    fake_read v@6;
    iter^10 := move v@6;
    loop {
      v@15 := &mut iter^10;
      v@14 := &two-phase *(v@15);
      v@13 := move core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'_, u8>::next(move v@14);
      drop v@14;
      fake_read v@13;
      match (v@13) {
      | 0 => {
          break 0
        }
      | 1 => {
          bytes^16 := copy (v@13 as core::option::Option::Some).0;
          v@18 := copy done^4;
          v@17 := ¬ move v@18;
          drop v@18;
          if (move v@17) {
            v@21 := (0: usize : usize);
            v@101 := &*(bytes^16);
            v@102 := move @SliceIndexShared<'_, u8>(move v@101, copy v@21);
            v@20 := copy *(v@102);
            b1^19 := cast<u8,i32> move v@20;
            drop v@20;
            fake_read b1^19;
            drop v@21;
            v@24 := (1: usize : usize);
            v@99 := &*(bytes^16);
            v@100 := move @SliceIndexShared<'_, u8>(move v@99, copy v@24);
            v@23 := copy *(v@100);
            b2^22 := cast<u8,i32> move v@23;
            drop v@23;
            fake_read b2^22;
            drop v@24;
            v@27 := (2: usize : usize);
            v@97 := &*(bytes^16);
            v@98 := move @SliceIndexShared<'_, u8>(move v@97, copy v@27);
            v@26 := copy *(v@98);
            b3^25 := cast<u8,i32> move v@26;
            drop v@26;
            fake_read b3^25;
            drop v@27;
            v@31 := copy b2^22;
            v@30 := move v@31 & (15: i32 : i32);
            drop v@31;
            v@29 := move v@30 << (8: i32 : i32);
            drop v@30;
            v@32 := copy b1^19;
            d1^28 := move v@29 | move v@32;
            drop v@32;
            drop v@29;
            fake_read d1^28;
            v@35 := copy b3^25;
            v@34 := move v@35 << (4: i32 : i32);
            drop v@35;
            v@37 := copy b2^22;
            v@36 := move v@37 >> (4: i32 : i32);
            drop v@37;
            d2^33 := move v@34 | move v@36;
            drop v@36;
            drop v@34;
            fake_read d2^33;
            v@41 := copy d1^28;
            v@63 := global libcrux_kyber::constants::FIELD_MODULUS;
            v@40 := move v@41 < move v@63;
            drop v@41;
            if (move v@40) {
              v@43 := copy sampled_coefficients^2;
              v@67 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
              v@42 := move v@43 < move v@67;
              drop v@43;
              v@39 := move v@42;
              drop v@42;
              drop v@40;
              if (move v@39) {
                v@44 := copy d1^28;
                v@45 := copy sampled_coefficients^2;
                v@81 := &mut (out^3).coefficients;
                v@82 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@81, copy v@45);
                *(v@82) := move v@44;
                drop v@44;
                drop v@45;
                sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                v@68 := ();
                v@38 := move v@68;
                drop v@39;
                drop v@38;
                v@49 := copy d2^33;
                v@70 := global libcrux_kyber::constants::FIELD_MODULUS;
                v@48 := move v@49 < move v@70;
                drop v@49;
                if (move v@48) {
                  v@51 := copy sampled_coefficients^2;
                  v@71 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                  v@50 := move v@51 < move v@71;
                  drop v@51;
                  v@47 := move v@50;
                  drop v@50;
                  drop v@48;
                  if (move v@47) {
                    v@52 := copy d2^33;
                    v@53 := copy sampled_coefficients^2;
                    v@77 := &mut (out^3).coefficients;
                    v@78 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@77, copy v@53);
                    *(v@78) := move v@52;
                    drop v@52;
                    drop v@53;
                    sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                    v@72 := ();
                    v@46 := move v@72;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                  else {
                    v@73 := ();
                    v@46 := move v@73;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                }
                else {
                  v@47 := (false : bool);
                  drop v@50;
                  drop v@48;
                  if (move v@47) {
                    v@52 := copy d2^33;
                    v@53 := copy sampled_coefficients^2;
                    v@79 := &mut (out^3).coefficients;
                    v@80 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@79, copy v@53);
                    *(v@80) := move v@52;
                    drop v@52;
                    drop v@53;
                    sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                    v@72 := ();
                    v@46 := move v@72;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                  else {
                    v@73 := ();
                    v@46 := move v@73;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                }
              }
              else {
                v@69 := ();
                v@38 := move v@69;
                drop v@39;
                drop v@38;
                v@49 := copy d2^33;
                v@70 := global libcrux_kyber::constants::FIELD_MODULUS;
                v@48 := move v@49 < move v@70;
                drop v@49;
                if (move v@48) {
                  v@51 := copy sampled_coefficients^2;
                  v@71 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                  v@50 := move v@51 < move v@71;
                  drop v@51;
                  v@47 := move v@50;
                  drop v@50;
                  drop v@48;
                  if (move v@47) {
                    v@52 := copy d2^33;
                    v@53 := copy sampled_coefficients^2;
                    v@83 := &mut (out^3).coefficients;
                    v@84 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@83, copy v@53);
                    *(v@84) := move v@52;
                    drop v@52;
                    drop v@53;
                    sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                    v@72 := ();
                    v@46 := move v@72;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                  else {
                    v@73 := ();
                    v@46 := move v@73;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                }
                else {
                  v@47 := (false : bool);
                  drop v@50;
                  drop v@48;
                  if (move v@47) {
                    v@52 := copy d2^33;
                    v@53 := copy sampled_coefficients^2;
                    v@85 := &mut (out^3).coefficients;
                    v@86 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@85, copy v@53);
                    *(v@86) := move v@52;
                    drop v@52;
                    drop v@53;
                    sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                    v@72 := ();
                    v@46 := move v@72;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                  else {
                    v@73 := ();
                    v@46 := move v@73;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                }
              }
            }
            else {
              v@39 := (false : bool);
              drop v@42;
              drop v@40;
              if (move v@39) {
                v@44 := copy d1^28;
                v@45 := copy sampled_coefficients^2;
                v@91 := &mut (out^3).coefficients;
                v@92 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@91, copy v@45);
                *(v@92) := move v@44;
                drop v@44;
                drop v@45;
                sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                v@68 := ();
                v@38 := move v@68;
                drop v@39;
                drop v@38;
                v@49 := copy d2^33;
                v@70 := global libcrux_kyber::constants::FIELD_MODULUS;
                v@48 := move v@49 < move v@70;
                drop v@49;
                if (move v@48) {
                  v@51 := copy sampled_coefficients^2;
                  v@71 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                  v@50 := move v@51 < move v@71;
                  drop v@51;
                  v@47 := move v@50;
                  drop v@50;
                  drop v@48;
                  if (move v@47) {
                    v@52 := copy d2^33;
                    v@53 := copy sampled_coefficients^2;
                    v@87 := &mut (out^3).coefficients;
                    v@88 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@87, copy v@53);
                    *(v@88) := move v@52;
                    drop v@52;
                    drop v@53;
                    sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                    v@72 := ();
                    v@46 := move v@72;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                  else {
                    v@73 := ();
                    v@46 := move v@73;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                }
                else {
                  v@47 := (false : bool);
                  drop v@50;
                  drop v@48;
                  if (move v@47) {
                    v@52 := copy d2^33;
                    v@53 := copy sampled_coefficients^2;
                    v@89 := &mut (out^3).coefficients;
                    v@90 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@89, copy v@53);
                    *(v@90) := move v@52;
                    drop v@52;
                    drop v@53;
                    sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                    v@72 := ();
                    v@46 := move v@72;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                  else {
                    v@73 := ();
                    v@46 := move v@73;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                }
              }
              else {
                v@69 := ();
                v@38 := move v@69;
                drop v@39;
                drop v@38;
                v@49 := copy d2^33;
                v@70 := global libcrux_kyber::constants::FIELD_MODULUS;
                v@48 := move v@49 < move v@70;
                drop v@49;
                if (move v@48) {
                  v@51 := copy sampled_coefficients^2;
                  v@71 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                  v@50 := move v@51 < move v@71;
                  drop v@51;
                  v@47 := move v@50;
                  drop v@50;
                  drop v@48;
                  if (move v@47) {
                    v@52 := copy d2^33;
                    v@53 := copy sampled_coefficients^2;
                    v@93 := &mut (out^3).coefficients;
                    v@94 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@93, copy v@53);
                    *(v@94) := move v@52;
                    drop v@52;
                    drop v@53;
                    sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                    v@72 := ();
                    v@46 := move v@72;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                  else {
                    v@73 := ();
                    v@46 := move v@73;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                }
                else {
                  v@47 := (false : bool);
                  drop v@50;
                  drop v@48;
                  if (move v@47) {
                    v@52 := copy d2^33;
                    v@53 := copy sampled_coefficients^2;
                    v@95 := &mut (out^3).coefficients;
                    v@96 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@95, copy v@53);
                    *(v@96) := move v@52;
                    drop v@52;
                    drop v@53;
                    sampled_coefficients^2 := copy sampled_coefficients^2 + (1: usize : usize);
                    v@72 := ();
                    v@46 := move v@72;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                  else {
                    v@73 := ();
                    v@46 := move v@73;
                    drop v@47;
                    drop v@46;
                    v@55 := copy sampled_coefficients^2;
                    v@74 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
                    v@54 := move v@55 == move v@74;
                    drop v@55;
                    if (move v@54) {
                      done^4 := (true : bool);
                      v@75 := ();
                      v@12 := move v@75;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                    else {
                      v@76 := ();
                      v@12 := move v@76;
                      drop v@54;
                      drop d2^33;
                      drop d1^28;
                      drop b3^25;
                      drop b2^22;
                      drop b1^19
                    }
                  }
                }
              }
            }
          }
          else {
            v@62 := ();
            v@12 := move v@62
          };
          drop v@17;
          drop bytes^16;
          drop v@15;
          drop v@13;
          drop v@12;
          v@64 := ();
          v@11 := move v@64;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@61 := ();
    v@5 := move v@61;
    drop v@15;
    drop v@13;
    drop v@12;
    drop iter^10;
    drop v@6;
    drop v@5;
    v@58 := copy done^4;
    v@57 := ¬ move v@58;
    drop v@58;
    if (move v@57) {
      v@59 := move libcrux_kyber::sampling::rejection_sampling_panic_with_diagnostic();
      drop v@59;
      v@65 := ();
      v@56 := move v@65
    }
    else {
      v@66 := ();
      v@56 := move v@66
    };
    drop v@57;
    drop v@56;
    v@0 := copy out^3;
    drop done^4;
    drop out^3;
    drop sampled_coefficients^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, 840: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 840>
Visiting call: core::slice::{@Slice<T>}::chunks<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks<u8>
--> name: core::slice::{@Slice<T>}::chunks
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::Chunks<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Chunks<'_, u8>>[core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Chunks<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::Chunks<'a, T>#70}::next
--> args: &'0_1 mut (core::slice::iter::Chunks<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: libcrux_kyber::sampling::rejection_sampling_panic_with_diagnostic
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::sampling::rejection_sampling_panic_with_diagnostic
--> name: libcrux_kyber::sampling::rejection_sampling_panic_with_diagnostic
--> args: , ret: ()
233/465
Visiting function: libcrux_kyber::matrix::sample_matrix_A
  fn libcrux_kyber::matrix::sample_matrix_A<K>(seed^1 : @Array<u8, 34: usize>, transpose^2 : bool) -> @Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>  
{
    v@0 : @Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>;
    seed^1 : @Array<u8, 34: usize>;
    transpose^2 : bool;
    A_transpose^3 : @Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>;
    v@4 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@5 : ();
    v@6 : core::ops::range::Range<usize>;
    v@7 : core::ops::range::Range<usize>;
    iter^8 : core::ops::range::Range<usize>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<usize>;
    v@12 : &'_ mut (core::ops::range::Range<usize>);
    v@13 : &'_ mut (core::ops::range::Range<usize>);
    i^14 : usize;
    seeds^15 : @Array<@Array<u8, 34: usize>, K>;
    v@16 : @Array<u8, 34: usize>;
    v@17 : ();
    v@18 : core::ops::range::Range<usize>;
    v@19 : core::ops::range::Range<usize>;
    iter^20 : core::ops::range::Range<usize>;
    v@21 : ();
    v@22 : core::option::Option<usize>;
    v@23 : &'_ mut (core::ops::range::Range<usize>);
    v@24 : &'_ mut (core::ops::range::Range<usize>);
    j^25 : usize;
    v@26 : usize;
    v@27 : usize;
    v@28 : usize;
    v@29 : usize;
    v@30 : usize;
    v@31 : usize;
    xof_bytes^32 : @Array<@Array<u8, 840: usize>, K>;
    v@33 : @Array<@Array<u8, 34: usize>, K>;
    v@34 : core::ops::range::Range<usize>;
    v@35 : core::ops::range::Range<usize>;
    iter^36 : core::ops::range::Range<usize>;
    v@37 : ();
    v@38 : core::option::Option<usize>;
    v@39 : &'_ mut (core::ops::range::Range<usize>);
    v@40 : &'_ mut (core::ops::range::Range<usize>);
    j^41 : usize;
    sampled^42 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@43 : @Array<u8, 840: usize>;
    v@44 : usize;
    v@45 : bool;
    v@46 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@47 : usize;
    v@48 : usize;
    v@49 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@50 : usize;
    v@51 : usize;
    v@52 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@53 : ();
    v@54 : ();
    v@55 : ();
    v@56 : ();
    v@57 : ();
    v@58 : ();
    v@59 : ();
    v@60 : ();
    v@61 : ();
    v@62 : &'_ mut (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    v@63 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@64 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@65 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@66 : &'_ mut (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    v@67 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@68 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@69 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@70 : &'_ (@Array<@Array<u8, 840: usize>, K>);
    v@71 : &'_ (@Array<u8, 840: usize>);
    v@72 : &'_ mut (@Array<@Array<u8, 34: usize>, K>);
    v@73 : &'_ mut (@Array<u8, 34: usize>);
    v@74 : &'_ mut (@Array<u8, 34: usize>);
    v@75 : &'_ mut (u8);
    v@76 : &'_ mut (@Array<@Array<u8, 34: usize>, K>);
    v@77 : &'_ mut (@Array<u8, 34: usize>);
    v@78 : &'_ mut (@Array<u8, 34: usize>);
    v@79 : &'_ mut (u8);

    v@52 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    v@4 := move @ArrayRepeat<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@52);
    A_transpose^3 := move @ArrayRepeat<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>(move v@4);
    drop v@4;
    fake_read A_transpose^3;
    v@7 := core::ops::range::Range { start = (0: usize : usize); end = K; };
    v@6 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@7);
    drop v@7;
    fake_read v@6;
    iter^8 := move v@6;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^14 := copy (v@11 as core::option::Option::Some).0;
          v@16 := copy seed^1;
          seeds^15 := move @ArrayRepeat<'_, @Array<u8, 34: usize>, K>(move v@16);
          drop v@16;
          fake_read seeds^15;
          v@19 := core::ops::range::Range { start = (0: usize : usize); end = K; };
          v@18 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@19);
          drop v@19;
          fake_read v@18;
          iter^20 := move v@18;
          loop {
            v@24 := &mut iter^20;
            v@23 := &two-phase *(v@24);
            v@22 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@23);
            drop v@23;
            fake_read v@22;
            match (v@22) {
            | 0 => {
                break 0
              }
            | 1 => {
                j^25 := copy (v@22 as core::option::Option::Some).0;
                v@26 := copy i^14;
                v@27 := copy j^25;
                v@28 := (32: usize : usize);
                v@76 := &mut seeds^15;
                v@77 := move @ArrayIndexMut<'_, @Array<u8, 34: usize>, K>(move v@76, copy v@27);
                v@78 := &mut *(v@77);
                v@79 := move @ArrayIndexMut<'_, u8, 34: usize>(move v@78, copy v@28);
                *(v@79) := cast<usize,u8> move v@26;
                drop v@26;
                drop v@28;
                drop v@27;
                v@29 := copy j^25;
                v@30 := copy j^25;
                v@31 := (33: usize : usize);
                v@72 := &mut seeds^15;
                v@73 := move @ArrayIndexMut<'_, @Array<u8, 34: usize>, K>(move v@72, copy v@30);
                v@74 := &mut *(v@73);
                v@75 := move @ArrayIndexMut<'_, u8, 34: usize>(move v@74, copy v@31);
                *(v@75) := cast<usize,u8> move v@29;
                drop v@29;
                drop v@31;
                drop v@30;
                v@55 := ();
                v@21 := move v@55;
                drop j^25;
                drop v@24;
                drop v@22;
                drop v@21;
                v@56 := ();
                v@9 := move v@56;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@54 := ();
          v@17 := move v@54;
          drop v@24;
          drop v@22;
          drop v@21;
          drop iter^20;
          drop v@18;
          drop v@17;
          v@33 := copy seeds^15;
          xof_bytes^32 := move libcrux_kyber::hash_functions::XOFx4<K>(move v@33);
          drop v@33;
          fake_read xof_bytes^32;
          v@35 := core::ops::range::Range { start = (0: usize : usize); end = K; };
          v@34 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@35);
          drop v@35;
          fake_read v@34;
          iter^36 := move v@34;
          loop {
            v@40 := &mut iter^36;
            v@39 := &two-phase *(v@40);
            v@38 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@39);
            drop v@39;
            fake_read v@38;
            match (v@38) {
            | 0 => {
                break 0
              }
            | 1 => {
                j^41 := copy (v@38 as core::option::Option::Some).0;
                v@44 := copy j^41;
                v@70 := &xof_bytes^32;
                v@71 := move @ArrayIndexShared<'_, @Array<u8, 840: usize>, K>(move v@70, copy v@44);
                v@43 := copy *(v@71);
                sampled^42 := move libcrux_kyber::sampling::sample_from_uniform_distribution(move v@43);
                drop v@43;
                fake_read sampled^42;
                drop v@44;
                v@45 := copy transpose^2;
                if (move v@45) {
                  v@46 := copy sampled^42;
                  v@47 := copy j^41;
                  v@48 := copy i^14;
                  v@62 := &mut A_transpose^3;
                  v@63 := move @ArrayIndexMut<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>(move v@62, copy v@47);
                  v@64 := &mut *(v@63);
                  v@65 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@64, copy v@48);
                  *(v@65) := move v@46;
                  drop v@46;
                  drop v@48;
                  drop v@47;
                  v@59 := ();
                  v@37 := move v@59
                }
                else {
                  v@49 := copy sampled^42;
                  v@50 := copy i^14;
                  v@51 := copy j^41;
                  v@66 := &mut A_transpose^3;
                  v@67 := move @ArrayIndexMut<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>(move v@66, copy v@50);
                  v@68 := &mut *(v@67);
                  v@69 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@68, copy v@51);
                  *(v@69) := move v@49;
                  drop v@49;
                  drop v@51;
                  drop v@50;
                  v@60 := ();
                  v@37 := move v@60
                };
                drop v@45;
                drop sampled^42;
                drop j^41;
                drop v@40;
                drop v@38;
                drop v@37;
                v@61 := ();
                v@9 := move v@61;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@57 := ();
          v@10 := move v@57;
          drop v@40;
          drop v@38;
          drop v@37;
          drop iter^36;
          drop v@34;
          drop xof_bytes^32;
          drop seeds^15;
          drop i^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@58 := ();
          v@9 := move v@58;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@53 := ();
    v@5 := move v@53;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@6;
    drop v@5;
    v@0 := copy A_transpose^3;
    drop A_transpose^3;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::hash_functions::XOFx4<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::hash_functions::XOFx4<@>
--> name: libcrux_kyber::hash_functions::XOFx4
--> args: @Array<@Array<u8, 34: usize>, C@0>, ret: @Array<@Array<u8, 840: usize>, C@0>
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::sampling::sample_from_uniform_distribution
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::sampling::sample_from_uniform_distribution
--> name: libcrux_kyber::sampling::sample_from_uniform_distribution
--> args: @Array<u8, 840: usize>, ret: libcrux_kyber::arithmetic::PolynomialRingElement
234/465
Visiting function: libcrux_kyber::ntt::ntt_multiply_binomials
  fn libcrux_kyber::ntt::ntt_multiply_binomials(v@1 : (i32, i32), v@2 : (i32, i32), zeta^3 : i32) -> (i32, i32)  
{
    v@0 : (i32, i32);
    v@1 : (i32, i32);
    v@2 : (i32, i32);
    zeta^3 : i32;
    a0^4 : i32;
    a1^5 : i32;
    b0^6 : i32;
    b1^7 : i32;
    v@8 : i32;
    v@9 : i32;
    v@10 : i32;
    v@11 : i32;
    v@12 : i32;
    v@13 : i32;
    v@14 : i32;
    v@15 : i32;
    v@16 : i32;
    v@17 : i32;
    v@18 : i32;
    v@19 : i32;
    v@20 : i32;
    v@21 : i32;
    v@22 : i32;
    v@23 : i32;
    v@24 : i32;
    v@25 : i32;
    v@26 : i32;

    a0^4 := copy (v@1).0;
    a1^5 := copy (v@1).1;
    b0^6 := copy (v@2).0;
    b1^7 := copy (v@2).1;
    v@11 := copy a0^4;
    v@12 := copy b0^6;
    v@10 := move v@11 * move v@12;
    drop v@12;
    drop v@11;
    v@16 := copy a1^5;
    v@17 := copy b1^7;
    v@15 := move v@16 * move v@17;
    drop v@17;
    drop v@16;
    v@14 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@15);
    drop v@15;
    v@18 := copy zeta^3;
    v@13 := move v@14 * move v@18;
    drop v@18;
    drop v@14;
    v@9 := move v@10 + move v@13;
    drop v@13;
    drop v@10;
    v@8 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@9);
    drop v@9;
    v@22 := copy a0^4;
    v@23 := copy b1^7;
    v@21 := move v@22 * move v@23;
    drop v@23;
    drop v@22;
    v@25 := copy a1^5;
    v@26 := copy b0^6;
    v@24 := move v@25 * move v@26;
    drop v@26;
    drop v@25;
    v@20 := move v@21 + move v@24;
    drop v@24;
    drop v@21;
    v@19 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@20);
    drop v@20;
    v@0 := (move v@8, move v@19);
    drop v@19;
    drop v@8;
    drop b1^7;
    drop b0^6;
    drop a1^5;
    drop a0^4;
    return
  }
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
235/465
Visiting function: libcrux_kyber::ntt::ntt_multiply
  fn libcrux_kyber::ntt::ntt_multiply<0, 1>(lhs^1 : &0 (libcrux_kyber::arithmetic::PolynomialRingElement), rhs^2 : &1 (libcrux_kyber::arithmetic::PolynomialRingElement)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    lhs^1 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    rhs^2 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    out^3 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@4 : ();
    v@5 : core::ops::range::Range<usize>;
    v@6 : core::ops::range::Range<usize>;
    v@7 : usize;
    iter^8 : core::ops::range::Range<usize>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<usize>;
    v@12 : &'_ mut (core::ops::range::Range<usize>);
    v@13 : &'_ mut (core::ops::range::Range<usize>);
    i^14 : usize;
    product^15 : (i32, i32);
    v@16 : (i32, i32);
    v@17 : i32;
    v@18 : usize;
    v@19 : usize;
    v@20 : i32;
    v@21 : usize;
    v@22 : usize;
    v@23 : usize;
    v@24 : (i32, i32);
    v@25 : i32;
    v@26 : usize;
    v@27 : usize;
    v@28 : i32;
    v@29 : usize;
    v@30 : usize;
    v@31 : usize;
    v@32 : i32;
    v@33 : @Array<i32, 128: usize>;
    v@34 : usize;
    v@35 : usize;
    v@36 : i32;
    v@37 : usize;
    v@38 : usize;
    v@39 : i32;
    v@40 : usize;
    v@41 : usize;
    v@42 : usize;
    product^43 : (i32, i32);
    v@44 : (i32, i32);
    v@45 : i32;
    v@46 : usize;
    v@47 : usize;
    v@48 : usize;
    v@49 : i32;
    v@50 : usize;
    v@51 : usize;
    v@52 : usize;
    v@53 : (i32, i32);
    v@54 : i32;
    v@55 : usize;
    v@56 : usize;
    v@57 : usize;
    v@58 : i32;
    v@59 : usize;
    v@60 : usize;
    v@61 : usize;
    v@62 : i32;
    v@63 : i32;
    v@64 : @Array<i32, 128: usize>;
    v@65 : usize;
    v@66 : usize;
    v@67 : i32;
    v@68 : usize;
    v@69 : usize;
    v@70 : usize;
    v@71 : i32;
    v@72 : usize;
    v@73 : usize;
    v@74 : usize;
    v@75 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@76 : usize;
    v@77 : ();
    v@78 : @Array<i32, 128: usize>;
    v@79 : @Array<i32, 128: usize>;
    v@80 : ();
    v@81 : ();
    v@82 : &'_ mut (@Array<i32, 256: usize>);
    v@83 : &'_ mut (i32);
    v@84 : &'_ mut (@Array<i32, 256: usize>);
    v@85 : &'_ mut (i32);
    v@86 : &'_ (@Array<i32, 128: usize>);
    v@87 : &'_ (i32);
    v@88 : &'_ (@Array<i32, 256: usize>);
    v@89 : &'_ (i32);
    v@90 : &'_ (@Array<i32, 256: usize>);
    v@91 : &'_ (i32);
    v@92 : &'_ (@Array<i32, 256: usize>);
    v@93 : &'_ (i32);
    v@94 : &'_ (@Array<i32, 256: usize>);
    v@95 : &'_ (i32);
    v@96 : &'_ mut (@Array<i32, 256: usize>);
    v@97 : &'_ mut (i32);
    v@98 : &'_ mut (@Array<i32, 256: usize>);
    v@99 : &'_ mut (i32);
    v@100 : &'_ (@Array<i32, 128: usize>);
    v@101 : &'_ (i32);
    v@102 : &'_ (@Array<i32, 256: usize>);
    v@103 : &'_ (i32);
    v@104 : &'_ (@Array<i32, 256: usize>);
    v@105 : &'_ (i32);
    v@106 : &'_ (@Array<i32, 256: usize>);
    v@107 : &'_ (i32);
    v@108 : &'_ (@Array<i32, 256: usize>);
    v@109 : &'_ (i32);

    v@75 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    out^3 := move v@75;
    fake_read out^3;
    v@76 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@7 := move v@76 / (4: usize : usize);
    v@6 := core::ops::range::Range { start = (0: usize : usize); end = move v@7; };
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^14 := copy (v@11 as core::option::Option::Some).0;
          v@19 := copy i^14;
          v@18 := (4: usize : usize) * move v@19;
          drop v@19;
          v@108 := &(*(lhs^1)).coefficients;
          v@109 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@108, copy v@18);
          v@17 := copy *(v@109);
          v@23 := copy i^14;
          v@22 := (4: usize : usize) * move v@23;
          drop v@23;
          v@21 := move v@22 + (1: usize : usize);
          drop v@22;
          v@106 := &(*(lhs^1)).coefficients;
          v@107 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@106, copy v@21);
          v@20 := copy *(v@107);
          v@16 := (move v@17, move v@20);
          drop v@20;
          drop v@17;
          v@27 := copy i^14;
          v@26 := (4: usize : usize) * move v@27;
          drop v@27;
          v@104 := &(*(rhs^2)).coefficients;
          v@105 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@104, copy v@26);
          v@25 := copy *(v@105);
          v@31 := copy i^14;
          v@30 := (4: usize : usize) * move v@31;
          drop v@31;
          v@29 := move v@30 + (1: usize : usize);
          drop v@30;
          v@102 := &(*(rhs^2)).coefficients;
          v@103 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@102, copy v@29);
          v@28 := copy *(v@103);
          v@24 := (move v@25, move v@28);
          drop v@28;
          drop v@25;
          v@78 := global libcrux_kyber::ntt::ZETAS_TIMES_MONTGOMERY_R;
          v@33 := move v@78;
          v@35 := copy i^14;
          v@34 := (64: usize : usize) + move v@35;
          drop v@35;
          v@100 := &v@33;
          v@101 := move @ArrayIndexShared<'_, i32, 128: usize>(move v@100, copy v@34);
          v@32 := copy *(v@101);
          product^15 := move libcrux_kyber::ntt::ntt_multiply_binomials(move v@16, move v@24, move v@32);
          drop v@32;
          drop v@24;
          drop v@16;
          fake_read product^15;
          drop v@34;
          drop v@33;
          drop v@29;
          drop v@26;
          drop v@21;
          drop v@18;
          v@36 := copy (product^15).0;
          v@38 := copy i^14;
          v@37 := (4: usize : usize) * move v@38;
          drop v@38;
          v@98 := &mut (out^3).coefficients;
          v@99 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@98, copy v@37);
          *(v@99) := move v@36;
          drop v@36;
          drop v@37;
          v@39 := copy (product^15).1;
          v@42 := copy i^14;
          v@41 := (4: usize : usize) * move v@42;
          drop v@42;
          v@40 := move v@41 + (1: usize : usize);
          drop v@41;
          v@96 := &mut (out^3).coefficients;
          v@97 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@96, copy v@40);
          *(v@97) := move v@39;
          drop v@39;
          drop v@40;
          v@48 := copy i^14;
          v@47 := (4: usize : usize) * move v@48;
          drop v@48;
          v@46 := move v@47 + (2: usize : usize);
          drop v@47;
          v@94 := &(*(lhs^1)).coefficients;
          v@95 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@94, copy v@46);
          v@45 := copy *(v@95);
          v@52 := copy i^14;
          v@51 := (4: usize : usize) * move v@52;
          drop v@52;
          v@50 := move v@51 + (3: usize : usize);
          drop v@51;
          v@92 := &(*(lhs^1)).coefficients;
          v@93 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@92, copy v@50);
          v@49 := copy *(v@93);
          v@44 := (move v@45, move v@49);
          drop v@49;
          drop v@45;
          v@57 := copy i^14;
          v@56 := (4: usize : usize) * move v@57;
          drop v@57;
          v@55 := move v@56 + (2: usize : usize);
          drop v@56;
          v@90 := &(*(rhs^2)).coefficients;
          v@91 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@90, copy v@55);
          v@54 := copy *(v@91);
          v@61 := copy i^14;
          v@60 := (4: usize : usize) * move v@61;
          drop v@61;
          v@59 := move v@60 + (3: usize : usize);
          drop v@60;
          v@88 := &(*(rhs^2)).coefficients;
          v@89 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@88, copy v@59);
          v@58 := copy *(v@89);
          v@53 := (move v@54, move v@58);
          drop v@58;
          drop v@54;
          v@79 := global libcrux_kyber::ntt::ZETAS_TIMES_MONTGOMERY_R;
          v@64 := move v@79;
          v@66 := copy i^14;
          v@65 := (64: usize : usize) + move v@66;
          drop v@66;
          v@86 := &v@64;
          v@87 := move @ArrayIndexShared<'_, i32, 128: usize>(move v@86, copy v@65);
          v@63 := copy *(v@87);
          v@62 := - move v@63;
          drop v@63;
          product^43 := move libcrux_kyber::ntt::ntt_multiply_binomials(move v@44, move v@53, move v@62);
          drop v@62;
          drop v@53;
          drop v@44;
          fake_read product^43;
          drop v@65;
          drop v@64;
          drop v@59;
          drop v@55;
          drop v@50;
          drop v@46;
          v@67 := copy (product^43).0;
          v@70 := copy i^14;
          v@69 := (4: usize : usize) * move v@70;
          drop v@70;
          v@68 := move v@69 + (2: usize : usize);
          drop v@69;
          v@84 := &mut (out^3).coefficients;
          v@85 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@84, copy v@68);
          *(v@85) := move v@67;
          drop v@67;
          drop v@68;
          v@71 := copy (product^43).1;
          v@74 := copy i^14;
          v@73 := (4: usize : usize) * move v@74;
          drop v@74;
          v@72 := move v@73 + (3: usize : usize);
          drop v@73;
          v@82 := &mut (out^3).coefficients;
          v@83 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@82, copy v@72);
          *(v@83) := move v@71;
          drop v@71;
          drop v@72;
          v@80 := ();
          v@10 := move v@80;
          drop product^43;
          drop product^15;
          drop i^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@81 := ();
          v@9 := move v@81;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@77 := ();
    v@4 := move v@77;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop v@4;
    v@0 := copy out^3;
    drop out^3;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::ntt::ntt_multiply_binomials
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_multiply_binomials
--> name: libcrux_kyber::ntt::ntt_multiply_binomials
--> args: (i32, i32) ++ (i32, i32) ++ i32, ret: (i32, i32)
Visiting call: libcrux_kyber::ntt::ntt_multiply_binomials
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_multiply_binomials
--> name: libcrux_kyber::ntt::ntt_multiply_binomials
--> args: (i32, i32) ++ (i32, i32) ++ i32, ret: (i32, i32)
236/465
Visiting function: libcrux_kyber::matrix::compute_As_plus_e
  fn libcrux_kyber::matrix::compute_As_plus_e<0, 1, 2, K>(matrix_A^1 : &0 (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>), s_as_ntt^2 : &1 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>), error_as_ntt^3 : &2 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>)) -> @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>  
{
    v@0 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    matrix_A^1 : &'_ (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    s_as_ntt^2 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    error_as_ntt^3 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    result^4 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@5 : ();
    i^6 : usize;
    v@7 : core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>;
    v@8 : core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>;
    v@9 : &'_ (@Slice<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>);
    v@10 : &'_ (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    iter^11 : core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>;
    v@12 : ();
    v@13 : ();
    v@14 : core::option::Option<&'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>)>;
    v@15 : &'_ mut (core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>);
    v@16 : &'_ mut (core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>);
    row^17 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@18 : ();
    v@19 : ();
    j^20 : usize;
    v@21 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@22 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@23 : &'_ (@Slice<libcrux_kyber::arithmetic::PolynomialRingElement>);
    v@24 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    iter^25 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@26 : ();
    v@27 : core::option::Option<&'_ (libcrux_kyber::arithmetic::PolynomialRingElement)>;
    v@28 : &'_ mut (core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>);
    v@29 : &'_ mut (core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>);
    matrix_element^30 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@31 : ();
    product^32 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@33 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@34 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@35 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@36 : usize;
    v@37 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@38 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@39 : usize;
    v@40 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@41 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@42 : usize;
    v@43 : core::ops::range::Range<usize>;
    v@44 : core::ops::range::Range<usize>;
    iter^45 : core::ops::range::Range<usize>;
    v@46 : ();
    v@47 : core::option::Option<usize>;
    v@48 : &'_ mut (core::ops::range::Range<usize>);
    v@49 : &'_ mut (core::ops::range::Range<usize>);
    j^50 : usize;
    coefficient_normal_form^51 : i32;
    v@52 : i32;
    v@53 : usize;
    v@54 : usize;
    v@55 : i32;
    v@56 : i32;
    v@57 : i32;
    v@58 : i32;
    v@59 : usize;
    v@60 : usize;
    v@61 : usize;
    v@62 : usize;
    v@63 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@64 : ();
    v@65 : ();
    v@66 : usize;
    v@67 : ();
    v@68 : ();
    v@69 : ();
    v@70 : ();
    v@71 : ();
    v@72 : ();
    v@73 : ();
    v@74 : ();
    v@75 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@76 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@77 : &'_ mut (@Array<i32, 256: usize>);
    v@78 : &'_ mut (i32);
    v@79 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@80 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@81 : &'_ (@Array<i32, 256: usize>);
    v@82 : &'_ (i32);
    v@83 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@84 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@85 : &'_ (@Array<i32, 256: usize>);
    v@86 : &'_ (i32);
    v@87 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@88 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@89 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@90 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@91 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@92 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);

    v@63 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    result^4 := move @ArrayRepeat<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@63);
    fake_read result^4;
    i^6 := (0: usize : usize);
    fake_read i^6;
    v@10 := &*(matrix_A^1);
    v@9 := move @ArrayToSliceShared<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>(move v@10);
    drop v@10;
    v@8 := move core::slice::{@Slice<T>}::iter<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>(move v@9);
    drop v@9;
    v@7 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>]::into_iter(move v@8);
    drop v@8;
    fake_read v@7;
    iter^11 := move v@7;
    loop {
      v@16 := &mut iter^11;
      v@15 := &two-phase *(v@16);
      v@14 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>::next(move v@15);
      drop v@15;
      fake_read v@14;
      match (v@14) {
      | 0 => {
          break 0
        }
      | 1 => {
          row^17 := copy (v@14 as core::option::Option::Some).0;
          j^20 := (0: usize : usize);
          fake_read j^20;
          v@24 := &*(row^17);
          v@23 := move @ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@24);
          drop v@24;
          v@22 := move core::slice::{@Slice<T>}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>(move v@23);
          drop v@23;
          v@21 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>]::into_iter(move v@22);
          drop v@22;
          fake_read v@21;
          iter^25 := move v@21;
          loop {
            v@29 := &mut iter^25;
            v@28 := &two-phase *(v@29);
            v@27 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>::next(move v@28);
            drop v@28;
            fake_read v@27;
            match (v@27) {
            | 0 => {
                break 0
              }
            | 1 => {
                matrix_element^30 := copy (v@27 as core::option::Option::Some).0;
                v@33 := &*(matrix_element^30);
                v@36 := copy j^20;
                v@91 := &*(s_as_ntt^2);
                v@92 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@91, copy v@36);
                v@35 := &*(v@92);
                v@34 := &*(v@35);
                product^32 := move libcrux_kyber::ntt::ntt_multiply(move v@33, move v@34);
                drop v@34;
                drop v@33;
                fake_read product^32;
                drop v@36;
                drop v@35;
                v@39 := copy i^6;
                v@89 := &result^4;
                v@90 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@89, copy v@39);
                v@38 := copy *(v@90);
                v@41 := &product^32;
                v@40 := &*(v@41);
                v@37 := move libcrux_kyber::arithmetic::add_to_ring_element<K>(move v@38, move v@40);
                drop v@40;
                drop v@38;
                v@42 := copy i^6;
                v@87 := &mut result^4;
                v@88 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@87, copy v@42);
                *(v@88) := move v@37;
                drop v@37;
                drop v@42;
                drop v@41;
                drop v@39;
                v@67 := ();
                v@31 := move v@67;
                drop product^32;
                drop v@31;
                j^20 := copy j^20 + (1: usize : usize);
                v@68 := ();
                v@26 := move v@68;
                drop matrix_element^30;
                drop v@29;
                drop v@27;
                drop v@26;
                v@69 := ();
                v@12 := move v@69;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@65 := ();
          v@19 := move v@65;
          drop v@29;
          drop v@27;
          drop v@26;
          drop iter^25;
          drop v@21;
          drop j^20;
          drop v@19;
          v@66 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
          v@44 := core::ops::range::Range { start = (0: usize : usize); end = move v@66; };
          v@43 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@44);
          drop v@44;
          fake_read v@43;
          iter^45 := move v@43;
          loop {
            v@49 := &mut iter^45;
            v@48 := &two-phase *(v@49);
            v@47 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@48);
            drop v@48;
            fake_read v@47;
            match (v@47) {
            | 0 => {
                break 0
              }
            | 1 => {
                j^50 := copy (v@47 as core::option::Option::Some).0;
                v@53 := copy i^6;
                v@54 := copy j^50;
                v@83 := &result^4;
                v@84 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@83, copy v@53);
                v@85 := &(*(v@84)).coefficients;
                v@86 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@85, copy v@54);
                v@52 := copy *(v@86);
                coefficient_normal_form^51 := move libcrux_kyber::arithmetic::to_standard_domain(move v@52);
                drop v@52;
                fake_read coefficient_normal_form^51;
                drop v@54;
                drop v@53;
                v@57 := copy coefficient_normal_form^51;
                v@59 := copy i^6;
                v@60 := copy j^50;
                v@79 := &*(error_as_ntt^3);
                v@80 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@79, copy v@59);
                v@81 := &(*(v@80)).coefficients;
                v@82 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@81, copy v@60);
                v@58 := copy *(v@82);
                v@56 := move v@57 + move v@58;
                drop v@58;
                drop v@57;
                v@55 := move libcrux_kyber::arithmetic::barrett_reduce(move v@56);
                drop v@56;
                v@61 := copy i^6;
                v@62 := copy j^50;
                v@75 := &mut result^4;
                v@76 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@75, copy v@61);
                v@77 := &mut (*(v@76)).coefficients;
                v@78 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@77, copy v@62);
                *(v@78) := move v@55;
                v@73 := ();
                v@46 := move v@73;
                drop v@55;
                drop coefficient_normal_form^51;
                drop v@62;
                drop v@61;
                drop v@60;
                drop v@59;
                drop j^50;
                drop v@49;
                drop v@47;
                drop v@46;
                v@74 := ();
                v@12 := move v@74;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@70 := ();
          v@18 := move v@70;
          drop v@49;
          drop v@47;
          drop v@46;
          drop iter^45;
          drop v@43;
          drop v@18;
          i^6 := copy i^6 + (1: usize : usize);
          v@71 := ();
          v@13 := move v@71;
          drop row^17;
          drop v@16;
          drop v@14;
          drop v@13;
          v@72 := ();
          v@12 := move v@72;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@64 := ();
    v@5 := move v@64;
    drop v@16;
    drop v@14;
    drop v@13;
    drop iter^11;
    drop v@7;
    drop i^6;
    drop v@5;
    v@0 := copy result^4;
    drop result^4;
    return
  }
Visiting call: @ArrayToSliceShared<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, [libcrux_kyber::arithmetic::PolynomialRingElement; @], @>
Visiting call: core::slice::{@Slice<T>}::iter<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<[libcrux_kyber::arithmetic::PolynomialRingElement; @]>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, [libcrux_kyber::arithmetic::PolynomialRingElement; @]>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, [libcrux_kyber::arithmetic::PolynomialRingElement; @]>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: @ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, @>
Visiting call: core::slice::{@Slice<T>}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: libcrux_kyber::ntt::ntt_multiply
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_multiply
--> name: libcrux_kyber::ntt::ntt_multiply
--> args: &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement) ++ &'0_1 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::arithmetic::add_to_ring_element<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::arithmetic::add_to_ring_element<@>
--> name: libcrux_kyber::arithmetic::add_to_ring_element
--> args: libcrux_kyber::arithmetic::PolynomialRingElement ++ &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::to_standard_domain
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_standard_domain
--> name: libcrux_kyber::arithmetic::to_standard_domain
--> args: i32, ret: i32
Visiting call: libcrux_kyber::arithmetic::barrett_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::barrett_reduce
--> name: libcrux_kyber::arithmetic::barrett_reduce
--> args: i32, ret: i32
237/465
Visiting function: libcrux_kyber::ind_cpa::generate_keypair
  fn libcrux_kyber::ind_cpa::generate_keypair<0, K, PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE, RANKED_BYTES_PER_RING_ELEMENT, ETA1, ETA1_RANDOMNESS_SIZE>(key_generation_seed^1 : &0 (@Slice<u8>)) -> (@Array<u8, PRIVATE_KEY_SIZE>, @Array<u8, PUBLIC_KEY_SIZE>)  
{
    v@0 : (@Array<u8, PRIVATE_KEY_SIZE>, @Array<u8, PUBLIC_KEY_SIZE>);
    key_generation_seed^1 : &'_ (@Slice<u8>);
    hashed^2 : @Array<u8, 64: usize>;
    v@3 : &'_ (@Slice<u8>);
    seed_for_A^4 : &'_ (@Slice<u8>);
    seed_for_secret_and_error^5 : &'_ (@Slice<u8>);
    v@6 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    v@7 : &'_ (@Slice<u8>);
    v@8 : &'_ (@Array<u8, 64: usize>);
    A_transpose^9 : @Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>;
    v@10 : @Array<u8, 34: usize>;
    v@11 : &'_ (@Slice<u8>);
    prf_input^12 : @Array<u8, 33: usize>;
    v@13 : &'_ (@Slice<u8>);
    secret_as_ntt^14 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    domain_separator^15 : u8;
    v@16 : (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, u8);
    v@17 : @Array<u8, 33: usize>;
    error_as_ntt^18 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@19 : (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, u8);
    v@20 : @Array<u8, 33: usize>;
    v@21 : u8;
    t_as_ntt^22 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@23 : &'_ (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    v@24 : &'_ (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    v@25 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@26 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@27 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@28 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    public_key_serialized^29 : @Array<u8, PUBLIC_KEY_SIZE>;
    v@30 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@31 : &'_ (@Slice<u8>);
    secret_key_serialized^32 : @Array<u8, PRIVATE_KEY_SIZE>;
    v@33 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@34 : @Array<u8, PRIVATE_KEY_SIZE>;
    v@35 : @Array<u8, PUBLIC_KEY_SIZE>;

    v@3 := &*(key_generation_seed^1);
    hashed^2 := move libcrux_kyber::hash_functions::G(move v@3);
    drop v@3;
    fake_read hashed^2;
    v@8 := &hashed^2;
    v@7 := move @ArrayToSliceShared<'_, u8, 64: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::split_at<u8>(move v@7, (32: usize : usize));
    drop v@7;
    fake_read v@6;
    seed_for_A^4 := copy (v@6).0;
    seed_for_secret_and_error^5 := copy (v@6).1;
    drop v@6;
    v@11 := &*(seed_for_A^4);
    v@10 := move libcrux_kyber::ind_cpa::into_padded_array<34: usize>(move v@11);
    drop v@11;
    A_transpose^9 := move libcrux_kyber::matrix::sample_matrix_A<K>(move v@10, (true : bool));
    drop v@10;
    fake_read A_transpose^9;
    v@13 := &*(seed_for_secret_and_error^5);
    prf_input^12 := move libcrux_kyber::ind_cpa::into_padded_array<33: usize>(move v@13);
    drop v@13;
    fake_read prf_input^12;
    v@17 := copy prf_input^12;
    v@16 := move libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<K, ETA1, ETA1_RANDOMNESS_SIZE>(move v@17, (0: u8 : u8));
    drop v@17;
    fake_read v@16;
    secret_as_ntt^14 := copy (v@16).0;
    domain_separator^15 := copy (v@16).1;
    drop v@16;
    v@20 := copy prf_input^12;
    v@21 := copy domain_separator^15;
    v@19 := move libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<K, ETA1, ETA1_RANDOMNESS_SIZE>(move v@20, move v@21);
    drop v@21;
    drop v@20;
    fake_read v@19;
    error_as_ntt^18 := copy (v@19).0;
    drop v@19;
    v@24 := &A_transpose^9;
    v@23 := &*(v@24);
    v@26 := &secret_as_ntt^14;
    v@25 := &*(v@26);
    v@28 := &error_as_ntt^18;
    v@27 := &*(v@28);
    t_as_ntt^22 := move libcrux_kyber::matrix::compute_As_plus_e<K>(move v@23, move v@25, move v@27);
    drop v@27;
    drop v@25;
    drop v@23;
    fake_read t_as_ntt^22;
    drop v@28;
    drop v@26;
    drop v@24;
    v@30 := copy t_as_ntt^22;
    v@31 := &*(seed_for_A^4);
    public_key_serialized^29 := move libcrux_kyber::ind_cpa::serialize_public_key<K, RANKED_BYTES_PER_RING_ELEMENT, PUBLIC_KEY_SIZE>(move v@30, move v@31);
    drop v@31;
    drop v@30;
    fake_read public_key_serialized^29;
    v@33 := copy secret_as_ntt^14;
    secret_key_serialized^32 := move libcrux_kyber::ind_cpa::serialize_secret_key<K, PRIVATE_KEY_SIZE>(move v@33);
    drop v@33;
    fake_read secret_key_serialized^32;
    v@34 := copy secret_key_serialized^32;
    v@35 := copy public_key_serialized^29;
    v@0 := (move v@34, move v@35);
    drop v@35;
    drop v@34;
    drop secret_key_serialized^32;
    drop public_key_serialized^29;
    drop t_as_ntt^22;
    drop error_as_ntt^18;
    drop domain_separator^15;
    drop secret_as_ntt^14;
    drop prf_input^12;
    drop A_transpose^9;
    drop seed_for_secret_and_error^5;
    drop seed_for_A^4;
    drop hashed^2;
    return
  }
Visiting call: libcrux_kyber::hash_functions::G
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::hash_functions::G
--> name: libcrux_kyber::hash_functions::G
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, 64: usize>
Visiting call: @ArrayToSliceShared<'_, u8, 64: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 64>
Visiting call: core::slice::{@Slice<T>}::split_at<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::split_at<u8>
--> name: core::slice::{@Slice<T>}::split_at
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: (&'0_0 (@Slice<T@0>), &'0_0 (@Slice<T@0>))
Visiting call: libcrux_kyber::ind_cpa::into_padded_array<34: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::into_padded_array<34>
--> name: libcrux_kyber::ind_cpa::into_padded_array
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: libcrux_kyber::matrix::sample_matrix_A<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::matrix::sample_matrix_A<@>
--> name: libcrux_kyber::matrix::sample_matrix_A
--> args: @Array<u8, 34: usize> ++ bool, ret: @Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, C@0>
Visiting call: libcrux_kyber::ind_cpa::into_padded_array<33: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::into_padded_array<33>
--> name: libcrux_kyber::ind_cpa::into_padded_array
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<C@0, C@4, C@5>
is_array_map: false
--> 0 type_args, 3 const_generics
--> 0 type_args, 3 const_generics
--> pattern: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<@, @, @>
--> name: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt
--> args: @Array<u8, 33: usize> ++ u8, ret: (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, u8)
Visiting call: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<C@0, C@4, C@5>
is_array_map: false
--> 0 type_args, 3 const_generics
--> 0 type_args, 3 const_generics
--> pattern: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<@, @, @>
--> name: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt
--> args: @Array<u8, 33: usize> ++ u8, ret: (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, u8)
Visiting call: libcrux_kyber::matrix::compute_As_plus_e<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::matrix::compute_As_plus_e<@>
--> name: libcrux_kyber::matrix::compute_As_plus_e
--> args: &'0_0 (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, C@0>) ++ &'0_1 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>) ++ &'0_2 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>), ret: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
Visiting call: libcrux_kyber::ind_cpa::serialize_public_key<C@0, C@3, C@2>
is_array_map: false
--> 0 type_args, 3 const_generics
--> 0 type_args, 3 const_generics
--> pattern: libcrux_kyber::ind_cpa::serialize_public_key<@, @, @>
--> name: libcrux_kyber::ind_cpa::serialize_public_key
--> args: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0> ++ &'0_0 (@Slice<u8>), ret: @Array<u8, C@2>
Visiting call: libcrux_kyber::ind_cpa::serialize_secret_key<C@0, C@1>
is_array_map: false
--> 0 type_args, 2 const_generics
--> 0 type_args, 2 const_generics
--> pattern: libcrux_kyber::ind_cpa::serialize_secret_key<@, @>
--> name: libcrux_kyber::ind_cpa::serialize_secret_key
--> args: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, ret: @Array<u8, C@1>
238/465
Visiting function: libcrux_kyber::serialize::compress_coefficients_10
  fn libcrux_kyber::serialize::compress_coefficients_10(coefficient1^1 : i32, coefficient2^2 : i32, coefficient3^3 : i32, coefficient4^4 : i32) -> (u8, u8, u8, u8, u8)  
{
    v@0 : (u8, u8, u8, u8, u8);
    coefficient1^1 : i32;
    coefficient2^2 : i32;
    coefficient3^3 : i32;
    coefficient4^4 : i32;
    coef1^5 : u8;
    v@6 : i32;
    v@7 : i32;
    coef2^8 : u8;
    v@9 : u8;
    v@10 : u8;
    v@11 : i32;
    v@12 : i32;
    v@13 : u8;
    v@14 : i32;
    v@15 : i32;
    v@16 : i32;
    coef3^17 : u8;
    v@18 : u8;
    v@19 : u8;
    v@20 : i32;
    v@21 : i32;
    v@22 : u8;
    v@23 : i32;
    v@24 : i32;
    v@25 : i32;
    coef4^26 : u8;
    v@27 : u8;
    v@28 : u8;
    v@29 : i32;
    v@30 : i32;
    v@31 : u8;
    v@32 : i32;
    v@33 : i32;
    v@34 : i32;
    coef5^35 : u8;
    v@36 : i32;
    v@37 : i32;
    v@38 : i32;
    v@39 : u8;
    v@40 : u8;
    v@41 : u8;
    v@42 : u8;
    v@43 : u8;

    v@7 := copy coefficient1^1;
    v@6 := move v@7 & (255: i32 : i32);
    drop v@7;
    coef1^5 := cast<i32,u8> move v@6;
    drop v@6;
    fake_read coef1^5;
    v@12 := copy coefficient2^2;
    v@11 := move v@12 & (63: i32 : i32);
    drop v@12;
    v@10 := cast<i32,u8> move v@11;
    drop v@11;
    v@9 := move v@10 << (2: i32 : i32);
    drop v@10;
    v@16 := copy coefficient1^1;
    v@15 := move v@16 >> (8: i32 : i32);
    drop v@16;
    v@14 := move v@15 & (3: i32 : i32);
    drop v@15;
    v@13 := cast<i32,u8> move v@14;
    drop v@14;
    coef2^8 := move v@9 | move v@13;
    drop v@13;
    drop v@9;
    fake_read coef2^8;
    v@21 := copy coefficient3^3;
    v@20 := move v@21 & (15: i32 : i32);
    drop v@21;
    v@19 := cast<i32,u8> move v@20;
    drop v@20;
    v@18 := move v@19 << (4: i32 : i32);
    drop v@19;
    v@25 := copy coefficient2^2;
    v@24 := move v@25 >> (6: i32 : i32);
    drop v@25;
    v@23 := move v@24 & (15: i32 : i32);
    drop v@24;
    v@22 := cast<i32,u8> move v@23;
    drop v@23;
    coef3^17 := move v@18 | move v@22;
    drop v@22;
    drop v@18;
    fake_read coef3^17;
    v@30 := copy coefficient4^4;
    v@29 := move v@30 & (3: i32 : i32);
    drop v@30;
    v@28 := cast<i32,u8> move v@29;
    drop v@29;
    v@27 := move v@28 << (6: i32 : i32);
    drop v@28;
    v@34 := copy coefficient3^3;
    v@33 := move v@34 >> (4: i32 : i32);
    drop v@34;
    v@32 := move v@33 & (63: i32 : i32);
    drop v@33;
    v@31 := cast<i32,u8> move v@32;
    drop v@32;
    coef4^26 := move v@27 | move v@31;
    drop v@31;
    drop v@27;
    fake_read coef4^26;
    v@38 := copy coefficient4^4;
    v@37 := move v@38 >> (2: i32 : i32);
    drop v@38;
    v@36 := move v@37 & (255: i32 : i32);
    drop v@37;
    coef5^35 := cast<i32,u8> move v@36;
    drop v@36;
    fake_read coef5^35;
    v@39 := copy coef1^5;
    v@40 := copy coef2^8;
    v@41 := copy coef3^17;
    v@42 := copy coef4^26;
    v@43 := copy coef5^35;
    v@0 := (move v@39, move v@40, move v@41, move v@42, move v@43);
    drop v@43;
    drop v@42;
    drop v@41;
    drop v@40;
    drop v@39;
    drop coef5^35;
    drop coef4^26;
    drop coef3^17;
    drop coef2^8;
    drop coef1^5;
    return
  }
239/465
Visiting function: libcrux_kyber::serialize::compress_then_serialize_10
  fn libcrux_kyber::serialize::compress_then_serialize_10<OUT_LEN>(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> @Array<u8, OUT_LEN>  
{
    v@0 : @Array<u8, OUT_LEN>;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^2 : @Array<u8, OUT_LEN>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, i32>;
    v@6 : core::slice::iter::ChunksExact<'_, i32>;
    v@7 : &'_ (@Slice<i32>);
    v@8 : &'_ (@Array<i32, 256: usize>);
    iter^9 : core::slice::iter::ChunksExact<'_, i32>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (@Slice<i32>)>;
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    v@14 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    coefficients^15 : &'_ (@Slice<i32>);
    v@16 : ();
    coefficient1^17 : i32;
    v@18 : u16;
    v@19 : i32;
    v@20 : usize;
    coefficient2^21 : i32;
    v@22 : u16;
    v@23 : i32;
    v@24 : usize;
    coefficient3^25 : i32;
    v@26 : u16;
    v@27 : i32;
    v@28 : usize;
    coefficient4^29 : i32;
    v@30 : u16;
    v@31 : i32;
    v@32 : usize;
    coef1^33 : u8;
    coef2^34 : u8;
    coef3^35 : u8;
    coef4^36 : u8;
    coef5^37 : u8;
    v@38 : (u8, u8, u8, u8, u8);
    v@39 : i32;
    v@40 : i32;
    v@41 : i32;
    v@42 : i32;
    v@43 : u8;
    v@44 : usize;
    v@45 : usize;
    v@46 : u8;
    v@47 : usize;
    v@48 : usize;
    v@49 : usize;
    v@50 : u8;
    v@51 : usize;
    v@52 : usize;
    v@53 : usize;
    v@54 : u8;
    v@55 : usize;
    v@56 : usize;
    v@57 : usize;
    v@58 : u8;
    v@59 : usize;
    v@60 : usize;
    v@61 : usize;
    v@62 : ();
    v@63 : ();
    v@64 : ();
    v@65 : ();
    v@66 : &'_ mut (@Array<u8, OUT_LEN>);
    v@67 : &'_ mut (u8);
    v@68 : &'_ mut (@Array<u8, OUT_LEN>);
    v@69 : &'_ mut (u8);
    v@70 : &'_ mut (@Array<u8, OUT_LEN>);
    v@71 : &'_ mut (u8);
    v@72 : &'_ mut (@Array<u8, OUT_LEN>);
    v@73 : &'_ mut (u8);
    v@74 : &'_ mut (@Array<u8, OUT_LEN>);
    v@75 : &'_ mut (u8);
    v@76 : &'_ (@Slice<i32>);
    v@77 : &'_ (i32);
    v@78 : &'_ (@Slice<i32>);
    v@79 : &'_ (i32);
    v@80 : &'_ (@Slice<i32>);
    v@81 : &'_ (i32);
    v@82 : &'_ (@Slice<i32>);
    v@83 : &'_ (i32);

    serialized^2 := move @ArrayRepeat<'_, u8, OUT_LEN>((0: u8 : u8));
    fake_read serialized^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &(re^1).coefficients;
    v@7 := move @ArrayToSliceShared<'_, i32, 256: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<i32>(move v@7, (4: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          coefficients^15 := copy (v@12 as core::option::Option::Some).0;
          v@20 := (0: usize : usize);
          v@82 := &*(coefficients^15);
          v@83 := move @SliceIndexShared<'_, i32>(move v@82, copy v@20);
          v@19 := copy *(v@83);
          v@18 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@19);
          drop v@19;
          coefficient1^17 := move libcrux_kyber::compress::compress_ciphertext_coefficient((10: u8 : u8), move v@18);
          drop v@18;
          fake_read coefficient1^17;
          drop v@20;
          v@24 := (1: usize : usize);
          v@80 := &*(coefficients^15);
          v@81 := move @SliceIndexShared<'_, i32>(move v@80, copy v@24);
          v@23 := copy *(v@81);
          v@22 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@23);
          drop v@23;
          coefficient2^21 := move libcrux_kyber::compress::compress_ciphertext_coefficient((10: u8 : u8), move v@22);
          drop v@22;
          fake_read coefficient2^21;
          drop v@24;
          v@28 := (2: usize : usize);
          v@78 := &*(coefficients^15);
          v@79 := move @SliceIndexShared<'_, i32>(move v@78, copy v@28);
          v@27 := copy *(v@79);
          v@26 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@27);
          drop v@27;
          coefficient3^25 := move libcrux_kyber::compress::compress_ciphertext_coefficient((10: u8 : u8), move v@26);
          drop v@26;
          fake_read coefficient3^25;
          drop v@28;
          v@32 := (3: usize : usize);
          v@76 := &*(coefficients^15);
          v@77 := move @SliceIndexShared<'_, i32>(move v@76, copy v@32);
          v@31 := copy *(v@77);
          v@30 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@31);
          drop v@31;
          coefficient4^29 := move libcrux_kyber::compress::compress_ciphertext_coefficient((10: u8 : u8), move v@30);
          drop v@30;
          fake_read coefficient4^29;
          drop v@32;
          v@39 := copy coefficient1^17;
          v@40 := copy coefficient2^21;
          v@41 := copy coefficient3^25;
          v@42 := copy coefficient4^29;
          v@38 := move libcrux_kyber::serialize::compress_coefficients_10(move v@39, move v@40, move v@41, move v@42);
          drop v@42;
          drop v@41;
          drop v@40;
          drop v@39;
          fake_read v@38;
          coef1^33 := copy (v@38).0;
          coef2^34 := copy (v@38).1;
          coef3^35 := copy (v@38).2;
          coef4^36 := copy (v@38).3;
          coef5^37 := copy (v@38).4;
          drop v@38;
          v@43 := copy coef1^33;
          v@45 := copy i^4;
          v@44 := (5: usize : usize) * move v@45;
          drop v@45;
          v@74 := &mut serialized^2;
          v@75 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@74, copy v@44);
          *(v@75) := move v@43;
          drop v@43;
          drop v@44;
          v@46 := copy coef2^34;
          v@49 := copy i^4;
          v@48 := (5: usize : usize) * move v@49;
          drop v@49;
          v@47 := move v@48 + (1: usize : usize);
          drop v@48;
          v@72 := &mut serialized^2;
          v@73 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@72, copy v@47);
          *(v@73) := move v@46;
          drop v@46;
          drop v@47;
          v@50 := copy coef3^35;
          v@53 := copy i^4;
          v@52 := (5: usize : usize) * move v@53;
          drop v@53;
          v@51 := move v@52 + (2: usize : usize);
          drop v@52;
          v@70 := &mut serialized^2;
          v@71 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@70, copy v@51);
          *(v@71) := move v@50;
          drop v@50;
          drop v@51;
          v@54 := copy coef4^36;
          v@57 := copy i^4;
          v@56 := (5: usize : usize) * move v@57;
          drop v@57;
          v@55 := move v@56 + (3: usize : usize);
          drop v@56;
          v@68 := &mut serialized^2;
          v@69 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@68, copy v@55);
          *(v@69) := move v@54;
          drop v@54;
          drop v@55;
          v@58 := copy coef5^37;
          v@61 := copy i^4;
          v@60 := (5: usize : usize) * move v@61;
          drop v@61;
          v@59 := move v@60 + (4: usize : usize);
          drop v@60;
          v@66 := &mut serialized^2;
          v@67 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@66, copy v@59);
          *(v@67) := move v@58;
          drop v@58;
          drop v@59;
          v@63 := ();
          v@16 := move v@63;
          drop coef5^37;
          drop coef4^36;
          drop coef3^35;
          drop coef2^34;
          drop coef1^33;
          drop coefficient4^29;
          drop coefficient3^25;
          drop coefficient2^21;
          drop coefficient1^17;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@64 := ();
          v@11 := move v@64;
          drop coefficients^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@65 := ();
          v@10 := move v@65;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@62 := ();
    v@3 := move v@62;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy serialized^2;
    drop serialized^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, i32, 256: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, i32, 256>
Visiting call: core::slice::{@Slice<T>}::chunks_exact<i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<i32>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, i32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, i32>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: libcrux_kyber::serialize::compress_coefficients_10
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::compress_coefficients_10
--> name: libcrux_kyber::serialize::compress_coefficients_10
--> args: i32 ++ i32 ++ i32 ++ i32, ret: (u8, u8, u8, u8, u8)
240/465
Visiting function: libcrux_kyber::serialize::compress_coefficients_11
  fn libcrux_kyber::serialize::compress_coefficients_11(coefficient1^1 : i32, coefficient2^2 : i32, coefficient3^3 : i32, coefficient4^4 : i32, coefficient5^5 : i32, coefficient6^6 : i32, coefficient7^7 : i32, coefficient8^8 : i32) -> (u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8)  
{
    v@0 : (u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8);
    coefficient1^1 : i32;
    coefficient2^2 : i32;
    coefficient3^3 : i32;
    coefficient4^4 : i32;
    coefficient5^5 : i32;
    coefficient6^6 : i32;
    coefficient7^7 : i32;
    coefficient8^8 : i32;
    coef1^9 : u8;
    v@10 : i32;
    coef2^11 : u8;
    v@12 : u8;
    v@13 : u8;
    v@14 : i32;
    v@15 : i32;
    v@16 : u8;
    v@17 : i32;
    v@18 : i32;
    coef3^19 : u8;
    v@20 : u8;
    v@21 : u8;
    v@22 : i32;
    v@23 : i32;
    v@24 : u8;
    v@25 : i32;
    v@26 : i32;
    coef4^27 : u8;
    v@28 : i32;
    v@29 : i32;
    v@30 : i32;
    coef5^31 : u8;
    v@32 : u8;
    v@33 : u8;
    v@34 : i32;
    v@35 : i32;
    v@36 : u8;
    v@37 : i32;
    v@38 : i32;
    coef6^39 : u8;
    v@40 : u8;
    v@41 : u8;
    v@42 : i32;
    v@43 : i32;
    v@44 : u8;
    v@45 : i32;
    v@46 : i32;
    coef7^47 : u8;
    v@48 : u8;
    v@49 : u8;
    v@50 : i32;
    v@51 : i32;
    v@52 : u8;
    v@53 : i32;
    v@54 : i32;
    coef8^55 : u8;
    v@56 : i32;
    v@57 : i32;
    v@58 : i32;
    coef9^59 : u8;
    v@60 : u8;
    v@61 : u8;
    v@62 : i32;
    v@63 : i32;
    v@64 : u8;
    v@65 : i32;
    v@66 : i32;
    coef10^67 : u8;
    v@68 : u8;
    v@69 : u8;
    v@70 : i32;
    v@71 : i32;
    v@72 : u8;
    v@73 : i32;
    v@74 : i32;
    coef11^75 : u8;
    v@76 : i32;
    v@77 : i32;
    v@78 : u8;
    v@79 : u8;
    v@80 : u8;
    v@81 : u8;
    v@82 : u8;
    v@83 : u8;
    v@84 : u8;
    v@85 : u8;
    v@86 : u8;
    v@87 : u8;
    v@88 : u8;

    v@10 := copy coefficient1^1;
    coef1^9 := cast<i32,u8> move v@10;
    drop v@10;
    fake_read coef1^9;
    v@15 := copy coefficient2^2;
    v@14 := move v@15 & (31: i32 : i32);
    drop v@15;
    v@13 := cast<i32,u8> move v@14;
    drop v@14;
    v@12 := move v@13 << (3: i32 : i32);
    drop v@13;
    v@18 := copy coefficient1^1;
    v@17 := move v@18 >> (8: i32 : i32);
    drop v@18;
    v@16 := cast<i32,u8> move v@17;
    drop v@17;
    coef2^11 := move v@12 | move v@16;
    drop v@16;
    drop v@12;
    fake_read coef2^11;
    v@23 := copy coefficient3^3;
    v@22 := move v@23 & (3: i32 : i32);
    drop v@23;
    v@21 := cast<i32,u8> move v@22;
    drop v@22;
    v@20 := move v@21 << (6: i32 : i32);
    drop v@21;
    v@26 := copy coefficient2^2;
    v@25 := move v@26 >> (5: i32 : i32);
    drop v@26;
    v@24 := cast<i32,u8> move v@25;
    drop v@25;
    coef3^19 := move v@20 | move v@24;
    drop v@24;
    drop v@20;
    fake_read coef3^19;
    v@30 := copy coefficient3^3;
    v@29 := move v@30 >> (2: i32 : i32);
    drop v@30;
    v@28 := move v@29 & (255: i32 : i32);
    drop v@29;
    coef4^27 := cast<i32,u8> move v@28;
    drop v@28;
    fake_read coef4^27;
    v@35 := copy coefficient4^4;
    v@34 := move v@35 & (127: i32 : i32);
    drop v@35;
    v@33 := cast<i32,u8> move v@34;
    drop v@34;
    v@32 := move v@33 << (1: i32 : i32);
    drop v@33;
    v@38 := copy coefficient3^3;
    v@37 := move v@38 >> (10: i32 : i32);
    drop v@38;
    v@36 := cast<i32,u8> move v@37;
    drop v@37;
    coef5^31 := move v@32 | move v@36;
    drop v@36;
    drop v@32;
    fake_read coef5^31;
    v@43 := copy coefficient5^5;
    v@42 := move v@43 & (15: i32 : i32);
    drop v@43;
    v@41 := cast<i32,u8> move v@42;
    drop v@42;
    v@40 := move v@41 << (4: i32 : i32);
    drop v@41;
    v@46 := copy coefficient4^4;
    v@45 := move v@46 >> (7: i32 : i32);
    drop v@46;
    v@44 := cast<i32,u8> move v@45;
    drop v@45;
    coef6^39 := move v@40 | move v@44;
    drop v@44;
    drop v@40;
    fake_read coef6^39;
    v@51 := copy coefficient6^6;
    v@50 := move v@51 & (1: i32 : i32);
    drop v@51;
    v@49 := cast<i32,u8> move v@50;
    drop v@50;
    v@48 := move v@49 << (7: i32 : i32);
    drop v@49;
    v@54 := copy coefficient5^5;
    v@53 := move v@54 >> (4: i32 : i32);
    drop v@54;
    v@52 := cast<i32,u8> move v@53;
    drop v@53;
    coef7^47 := move v@48 | move v@52;
    drop v@52;
    drop v@48;
    fake_read coef7^47;
    v@58 := copy coefficient6^6;
    v@57 := move v@58 >> (1: i32 : i32);
    drop v@58;
    v@56 := move v@57 & (255: i32 : i32);
    drop v@57;
    coef8^55 := cast<i32,u8> move v@56;
    drop v@56;
    fake_read coef8^55;
    v@63 := copy coefficient7^7;
    v@62 := move v@63 & (63: i32 : i32);
    drop v@63;
    v@61 := cast<i32,u8> move v@62;
    drop v@62;
    v@60 := move v@61 << (2: i32 : i32);
    drop v@61;
    v@66 := copy coefficient6^6;
    v@65 := move v@66 >> (9: i32 : i32);
    drop v@66;
    v@64 := cast<i32,u8> move v@65;
    drop v@65;
    coef9^59 := move v@60 | move v@64;
    drop v@64;
    drop v@60;
    fake_read coef9^59;
    v@71 := copy coefficient8^8;
    v@70 := move v@71 & (7: i32 : i32);
    drop v@71;
    v@69 := cast<i32,u8> move v@70;
    drop v@70;
    v@68 := move v@69 << (5: i32 : i32);
    drop v@69;
    v@74 := copy coefficient7^7;
    v@73 := move v@74 >> (6: i32 : i32);
    drop v@74;
    v@72 := cast<i32,u8> move v@73;
    drop v@73;
    coef10^67 := move v@68 | move v@72;
    drop v@72;
    drop v@68;
    fake_read coef10^67;
    v@77 := copy coefficient8^8;
    v@76 := move v@77 >> (3: i32 : i32);
    drop v@77;
    coef11^75 := cast<i32,u8> move v@76;
    drop v@76;
    fake_read coef11^75;
    v@78 := copy coef1^9;
    v@79 := copy coef2^11;
    v@80 := copy coef3^19;
    v@81 := copy coef4^27;
    v@82 := copy coef5^31;
    v@83 := copy coef6^39;
    v@84 := copy coef7^47;
    v@85 := copy coef8^55;
    v@86 := copy coef9^59;
    v@87 := copy coef10^67;
    v@88 := copy coef11^75;
    v@0 := (move v@78, move v@79, move v@80, move v@81, move v@82, move v@83, move v@84, move v@85, move v@86, move v@87, move v@88);
    drop v@88;
    drop v@87;
    drop v@86;
    drop v@85;
    drop v@84;
    drop v@83;
    drop v@82;
    drop v@81;
    drop v@80;
    drop v@79;
    drop v@78;
    drop coef11^75;
    drop coef10^67;
    drop coef9^59;
    drop coef8^55;
    drop coef7^47;
    drop coef6^39;
    drop coef5^31;
    drop coef4^27;
    drop coef3^19;
    drop coef2^11;
    drop coef1^9;
    return
  }
241/465
Visiting function: libcrux_kyber::serialize::compress_then_serialize_11
  fn libcrux_kyber::serialize::compress_then_serialize_11<OUT_LEN>(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> @Array<u8, OUT_LEN>  
{
    v@0 : @Array<u8, OUT_LEN>;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^2 : @Array<u8, OUT_LEN>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, i32>;
    v@6 : core::slice::iter::ChunksExact<'_, i32>;
    v@7 : &'_ (@Slice<i32>);
    v@8 : &'_ (@Array<i32, 256: usize>);
    iter^9 : core::slice::iter::ChunksExact<'_, i32>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (@Slice<i32>)>;
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    v@14 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    coefficients^15 : &'_ (@Slice<i32>);
    v@16 : ();
    coefficient1^17 : i32;
    v@18 : u16;
    v@19 : i32;
    v@20 : usize;
    coefficient2^21 : i32;
    v@22 : u16;
    v@23 : i32;
    v@24 : usize;
    coefficient3^25 : i32;
    v@26 : u16;
    v@27 : i32;
    v@28 : usize;
    coefficient4^29 : i32;
    v@30 : u16;
    v@31 : i32;
    v@32 : usize;
    coefficient5^33 : i32;
    v@34 : u16;
    v@35 : i32;
    v@36 : usize;
    coefficient6^37 : i32;
    v@38 : u16;
    v@39 : i32;
    v@40 : usize;
    coefficient7^41 : i32;
    v@42 : u16;
    v@43 : i32;
    v@44 : usize;
    coefficient8^45 : i32;
    v@46 : u16;
    v@47 : i32;
    v@48 : usize;
    coef1^49 : u8;
    coef2^50 : u8;
    coef3^51 : u8;
    coef4^52 : u8;
    coef5^53 : u8;
    coef6^54 : u8;
    coef7^55 : u8;
    coef8^56 : u8;
    coef9^57 : u8;
    coef10^58 : u8;
    coef11^59 : u8;
    v@60 : (u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8);
    v@61 : i32;
    v@62 : i32;
    v@63 : i32;
    v@64 : i32;
    v@65 : i32;
    v@66 : i32;
    v@67 : i32;
    v@68 : i32;
    v@69 : u8;
    v@70 : usize;
    v@71 : usize;
    v@72 : u8;
    v@73 : usize;
    v@74 : usize;
    v@75 : usize;
    v@76 : u8;
    v@77 : usize;
    v@78 : usize;
    v@79 : usize;
    v@80 : u8;
    v@81 : usize;
    v@82 : usize;
    v@83 : usize;
    v@84 : u8;
    v@85 : usize;
    v@86 : usize;
    v@87 : usize;
    v@88 : u8;
    v@89 : usize;
    v@90 : usize;
    v@91 : usize;
    v@92 : u8;
    v@93 : usize;
    v@94 : usize;
    v@95 : usize;
    v@96 : u8;
    v@97 : usize;
    v@98 : usize;
    v@99 : usize;
    v@100 : u8;
    v@101 : usize;
    v@102 : usize;
    v@103 : usize;
    v@104 : u8;
    v@105 : usize;
    v@106 : usize;
    v@107 : usize;
    v@108 : u8;
    v@109 : usize;
    v@110 : usize;
    v@111 : usize;
    v@112 : ();
    v@113 : ();
    v@114 : ();
    v@115 : ();
    v@116 : &'_ mut (@Array<u8, OUT_LEN>);
    v@117 : &'_ mut (u8);
    v@118 : &'_ mut (@Array<u8, OUT_LEN>);
    v@119 : &'_ mut (u8);
    v@120 : &'_ mut (@Array<u8, OUT_LEN>);
    v@121 : &'_ mut (u8);
    v@122 : &'_ mut (@Array<u8, OUT_LEN>);
    v@123 : &'_ mut (u8);
    v@124 : &'_ mut (@Array<u8, OUT_LEN>);
    v@125 : &'_ mut (u8);
    v@126 : &'_ mut (@Array<u8, OUT_LEN>);
    v@127 : &'_ mut (u8);
    v@128 : &'_ mut (@Array<u8, OUT_LEN>);
    v@129 : &'_ mut (u8);
    v@130 : &'_ mut (@Array<u8, OUT_LEN>);
    v@131 : &'_ mut (u8);
    v@132 : &'_ mut (@Array<u8, OUT_LEN>);
    v@133 : &'_ mut (u8);
    v@134 : &'_ mut (@Array<u8, OUT_LEN>);
    v@135 : &'_ mut (u8);
    v@136 : &'_ mut (@Array<u8, OUT_LEN>);
    v@137 : &'_ mut (u8);
    v@138 : &'_ (@Slice<i32>);
    v@139 : &'_ (i32);
    v@140 : &'_ (@Slice<i32>);
    v@141 : &'_ (i32);
    v@142 : &'_ (@Slice<i32>);
    v@143 : &'_ (i32);
    v@144 : &'_ (@Slice<i32>);
    v@145 : &'_ (i32);
    v@146 : &'_ (@Slice<i32>);
    v@147 : &'_ (i32);
    v@148 : &'_ (@Slice<i32>);
    v@149 : &'_ (i32);
    v@150 : &'_ (@Slice<i32>);
    v@151 : &'_ (i32);
    v@152 : &'_ (@Slice<i32>);
    v@153 : &'_ (i32);

    serialized^2 := move @ArrayRepeat<'_, u8, OUT_LEN>((0: u8 : u8));
    fake_read serialized^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &(re^1).coefficients;
    v@7 := move @ArrayToSliceShared<'_, i32, 256: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<i32>(move v@7, (8: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          coefficients^15 := copy (v@12 as core::option::Option::Some).0;
          v@20 := (0: usize : usize);
          v@152 := &*(coefficients^15);
          v@153 := move @SliceIndexShared<'_, i32>(move v@152, copy v@20);
          v@19 := copy *(v@153);
          v@18 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@19);
          drop v@19;
          coefficient1^17 := move libcrux_kyber::compress::compress_ciphertext_coefficient((11: u8 : u8), move v@18);
          drop v@18;
          fake_read coefficient1^17;
          drop v@20;
          v@24 := (1: usize : usize);
          v@150 := &*(coefficients^15);
          v@151 := move @SliceIndexShared<'_, i32>(move v@150, copy v@24);
          v@23 := copy *(v@151);
          v@22 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@23);
          drop v@23;
          coefficient2^21 := move libcrux_kyber::compress::compress_ciphertext_coefficient((11: u8 : u8), move v@22);
          drop v@22;
          fake_read coefficient2^21;
          drop v@24;
          v@28 := (2: usize : usize);
          v@148 := &*(coefficients^15);
          v@149 := move @SliceIndexShared<'_, i32>(move v@148, copy v@28);
          v@27 := copy *(v@149);
          v@26 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@27);
          drop v@27;
          coefficient3^25 := move libcrux_kyber::compress::compress_ciphertext_coefficient((11: u8 : u8), move v@26);
          drop v@26;
          fake_read coefficient3^25;
          drop v@28;
          v@32 := (3: usize : usize);
          v@146 := &*(coefficients^15);
          v@147 := move @SliceIndexShared<'_, i32>(move v@146, copy v@32);
          v@31 := copy *(v@147);
          v@30 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@31);
          drop v@31;
          coefficient4^29 := move libcrux_kyber::compress::compress_ciphertext_coefficient((11: u8 : u8), move v@30);
          drop v@30;
          fake_read coefficient4^29;
          drop v@32;
          v@36 := (4: usize : usize);
          v@144 := &*(coefficients^15);
          v@145 := move @SliceIndexShared<'_, i32>(move v@144, copy v@36);
          v@35 := copy *(v@145);
          v@34 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@35);
          drop v@35;
          coefficient5^33 := move libcrux_kyber::compress::compress_ciphertext_coefficient((11: u8 : u8), move v@34);
          drop v@34;
          fake_read coefficient5^33;
          drop v@36;
          v@40 := (5: usize : usize);
          v@142 := &*(coefficients^15);
          v@143 := move @SliceIndexShared<'_, i32>(move v@142, copy v@40);
          v@39 := copy *(v@143);
          v@38 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@39);
          drop v@39;
          coefficient6^37 := move libcrux_kyber::compress::compress_ciphertext_coefficient((11: u8 : u8), move v@38);
          drop v@38;
          fake_read coefficient6^37;
          drop v@40;
          v@44 := (6: usize : usize);
          v@140 := &*(coefficients^15);
          v@141 := move @SliceIndexShared<'_, i32>(move v@140, copy v@44);
          v@43 := copy *(v@141);
          v@42 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@43);
          drop v@43;
          coefficient7^41 := move libcrux_kyber::compress::compress_ciphertext_coefficient((11: u8 : u8), move v@42);
          drop v@42;
          fake_read coefficient7^41;
          drop v@44;
          v@48 := (7: usize : usize);
          v@138 := &*(coefficients^15);
          v@139 := move @SliceIndexShared<'_, i32>(move v@138, copy v@48);
          v@47 := copy *(v@139);
          v@46 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@47);
          drop v@47;
          coefficient8^45 := move libcrux_kyber::compress::compress_ciphertext_coefficient((11: u8 : u8), move v@46);
          drop v@46;
          fake_read coefficient8^45;
          drop v@48;
          v@61 := copy coefficient1^17;
          v@62 := copy coefficient2^21;
          v@63 := copy coefficient3^25;
          v@64 := copy coefficient4^29;
          v@65 := copy coefficient5^33;
          v@66 := copy coefficient6^37;
          v@67 := copy coefficient7^41;
          v@68 := copy coefficient8^45;
          v@60 := move libcrux_kyber::serialize::compress_coefficients_11(move v@61, move v@62, move v@63, move v@64, move v@65, move v@66, move v@67, move v@68);
          drop v@68;
          drop v@67;
          drop v@66;
          drop v@65;
          drop v@64;
          drop v@63;
          drop v@62;
          drop v@61;
          fake_read v@60;
          coef1^49 := copy (v@60).0;
          coef2^50 := copy (v@60).1;
          coef3^51 := copy (v@60).2;
          coef4^52 := copy (v@60).3;
          coef5^53 := copy (v@60).4;
          coef6^54 := copy (v@60).5;
          coef7^55 := copy (v@60).6;
          coef8^56 := copy (v@60).7;
          coef9^57 := copy (v@60).8;
          coef10^58 := copy (v@60).9;
          coef11^59 := copy (v@60).10;
          drop v@60;
          v@69 := copy coef1^49;
          v@71 := copy i^4;
          v@70 := (11: usize : usize) * move v@71;
          drop v@71;
          v@136 := &mut serialized^2;
          v@137 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@136, copy v@70);
          *(v@137) := move v@69;
          drop v@69;
          drop v@70;
          v@72 := copy coef2^50;
          v@75 := copy i^4;
          v@74 := (11: usize : usize) * move v@75;
          drop v@75;
          v@73 := move v@74 + (1: usize : usize);
          drop v@74;
          v@134 := &mut serialized^2;
          v@135 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@134, copy v@73);
          *(v@135) := move v@72;
          drop v@72;
          drop v@73;
          v@76 := copy coef3^51;
          v@79 := copy i^4;
          v@78 := (11: usize : usize) * move v@79;
          drop v@79;
          v@77 := move v@78 + (2: usize : usize);
          drop v@78;
          v@132 := &mut serialized^2;
          v@133 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@132, copy v@77);
          *(v@133) := move v@76;
          drop v@76;
          drop v@77;
          v@80 := copy coef4^52;
          v@83 := copy i^4;
          v@82 := (11: usize : usize) * move v@83;
          drop v@83;
          v@81 := move v@82 + (3: usize : usize);
          drop v@82;
          v@130 := &mut serialized^2;
          v@131 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@130, copy v@81);
          *(v@131) := move v@80;
          drop v@80;
          drop v@81;
          v@84 := copy coef5^53;
          v@87 := copy i^4;
          v@86 := (11: usize : usize) * move v@87;
          drop v@87;
          v@85 := move v@86 + (4: usize : usize);
          drop v@86;
          v@128 := &mut serialized^2;
          v@129 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@128, copy v@85);
          *(v@129) := move v@84;
          drop v@84;
          drop v@85;
          v@88 := copy coef6^54;
          v@91 := copy i^4;
          v@90 := (11: usize : usize) * move v@91;
          drop v@91;
          v@89 := move v@90 + (5: usize : usize);
          drop v@90;
          v@126 := &mut serialized^2;
          v@127 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@126, copy v@89);
          *(v@127) := move v@88;
          drop v@88;
          drop v@89;
          v@92 := copy coef7^55;
          v@95 := copy i^4;
          v@94 := (11: usize : usize) * move v@95;
          drop v@95;
          v@93 := move v@94 + (6: usize : usize);
          drop v@94;
          v@124 := &mut serialized^2;
          v@125 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@124, copy v@93);
          *(v@125) := move v@92;
          drop v@92;
          drop v@93;
          v@96 := copy coef8^56;
          v@99 := copy i^4;
          v@98 := (11: usize : usize) * move v@99;
          drop v@99;
          v@97 := move v@98 + (7: usize : usize);
          drop v@98;
          v@122 := &mut serialized^2;
          v@123 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@122, copy v@97);
          *(v@123) := move v@96;
          drop v@96;
          drop v@97;
          v@100 := copy coef9^57;
          v@103 := copy i^4;
          v@102 := (11: usize : usize) * move v@103;
          drop v@103;
          v@101 := move v@102 + (8: usize : usize);
          drop v@102;
          v@120 := &mut serialized^2;
          v@121 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@120, copy v@101);
          *(v@121) := move v@100;
          drop v@100;
          drop v@101;
          v@104 := copy coef10^58;
          v@107 := copy i^4;
          v@106 := (11: usize : usize) * move v@107;
          drop v@107;
          v@105 := move v@106 + (9: usize : usize);
          drop v@106;
          v@118 := &mut serialized^2;
          v@119 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@118, copy v@105);
          *(v@119) := move v@104;
          drop v@104;
          drop v@105;
          v@108 := copy coef11^59;
          v@111 := copy i^4;
          v@110 := (11: usize : usize) * move v@111;
          drop v@111;
          v@109 := move v@110 + (10: usize : usize);
          drop v@110;
          v@116 := &mut serialized^2;
          v@117 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@116, copy v@109);
          *(v@117) := move v@108;
          drop v@108;
          drop v@109;
          v@113 := ();
          v@16 := move v@113;
          drop coef11^59;
          drop coef10^58;
          drop coef9^57;
          drop coef8^56;
          drop coef7^55;
          drop coef6^54;
          drop coef5^53;
          drop coef4^52;
          drop coef3^51;
          drop coef2^50;
          drop coef1^49;
          drop coefficient8^45;
          drop coefficient7^41;
          drop coefficient6^37;
          drop coefficient5^33;
          drop coefficient4^29;
          drop coefficient3^25;
          drop coefficient2^21;
          drop coefficient1^17;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@114 := ();
          v@11 := move v@114;
          drop coefficients^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@115 := ();
          v@10 := move v@115;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@112 := ();
    v@3 := move v@112;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy serialized^2;
    drop serialized^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, i32, 256: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, i32, 256>
Visiting call: core::slice::{@Slice<T>}::chunks_exact<i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<i32>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, i32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, i32>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: libcrux_kyber::serialize::compress_coefficients_11
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::compress_coefficients_11
--> name: libcrux_kyber::serialize::compress_coefficients_11
--> args: i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32, ret: (u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8)
242/465
Visiting function: libcrux_kyber::serialize::compress_then_serialize_ring_element_u
  fn libcrux_kyber::serialize::compress_then_serialize_ring_element_u<COMPRESSION_FACTOR, OUT_LEN>(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> @Array<u8, OUT_LEN>  
{
    v@0 : @Array<u8, OUT_LEN>;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@2 : u32;
    v@3 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@4 : libcrux_kyber::arithmetic::PolynomialRingElement;

    v@2 := cast<usize,u32> COMPRESSION_FACTOR;
    fake_read v@2;
    switch (copy v@2) {
    | 10: u32 => {
        v@3 := copy re^1;
        v@0 := move libcrux_kyber::serialize::compress_then_serialize_10<OUT_LEN>(move v@3);
        drop v@3
      }
    | 11: u32 => {
        v@4 := copy re^1;
        v@0 := move libcrux_kyber::serialize::compress_then_serialize_11<OUT_LEN>(move v@4);
        drop v@4
      }
      _ => {
        panic
      }
    };
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::serialize::compress_then_serialize_10<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::serialize::compress_then_serialize_10<@>
--> name: libcrux_kyber::serialize::compress_then_serialize_10
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: @Array<u8, C@0>
Visiting call: libcrux_kyber::serialize::compress_then_serialize_11<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::serialize::compress_then_serialize_11<@>
--> name: libcrux_kyber::serialize::compress_then_serialize_11
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: @Array<u8, C@0>
243/465
Visiting function: libcrux_kyber::ind_cpa::compress_then_serialize_u
  fn libcrux_kyber::ind_cpa::compress_then_serialize_u<K, OUT_LEN, COMPRESSION_FACTOR, BLOCK_LEN>(input^1 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>) -> @Array<u8, OUT_LEN>  
{
    v@0 : @Array<u8, OUT_LEN>;
    input^1 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    out^2 : @Array<u8, OUT_LEN>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@6 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@7 : &'_ (@Slice<libcrux_kyber::arithmetic::PolynomialRingElement>);
    v@8 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    iter^9 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (libcrux_kyber::arithmetic::PolynomialRingElement)>;
    v@13 : &'_ mut (core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>);
    v@14 : &'_ mut (core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>);
    re^15 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@16 : ();
    v@17 : ();
    v@18 : &'_ mut (@Slice<u8>);
    v@19 : &'_ mut (@Slice<u8>);
    v@20 : &'_ mut (@Array<u8, OUT_LEN>);
    v@21 : core::ops::range::Range<usize>;
    v@22 : usize;
    v@23 : usize;
    v@24 : usize;
    v@25 : usize;
    v@26 : usize;
    v@27 : usize;
    v@28 : usize;
    v@29 : &'_ (@Slice<u8>);
    v@30 : &'_ (@Array<u8, BLOCK_LEN>);
    v@31 : &'_ (@Array<u8, BLOCK_LEN>);
    v@32 : @Array<u8, BLOCK_LEN>;
    v@33 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@34 : ();
    v@35 : ();
    v@36 : ();
    v@37 : ();

    out^2 := move @ArrayRepeat<'_, u8, OUT_LEN>((0: u8 : u8));
    fake_read out^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &input^1;
    v@7 := move @ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>(move v@7);
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          re^15 := copy (v@12 as core::option::Option::Some).0;
          v@20 := &mut out^2;
          v@23 := copy i^4;
          v@24 := OUT_LEN / K;
          v@22 := move v@23 * move v@24;
          drop v@24;
          drop v@23;
          v@27 := copy i^4;
          v@26 := move v@27 + (1: usize : usize);
          drop v@27;
          v@28 := OUT_LEN / K;
          v@25 := move v@26 * move v@28;
          drop v@28;
          drop v@26;
          v@21 := core::ops::range::Range { start = move v@22; end = move v@25; };
          drop v@25;
          drop v@22;
          v@19 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, OUT_LEN>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut(move v@20, move v@21);
          v@18 := &two-phase *(v@19);
          drop v@21;
          drop v@20;
          v@33 := copy *(re^15);
          v@32 := move libcrux_kyber::serialize::compress_then_serialize_ring_element_u<COMPRESSION_FACTOR, BLOCK_LEN>(move v@33);
          drop v@33;
          v@31 := &v@32;
          v@30 := &*(v@31);
          v@29 := move @ArrayToSliceShared<'_, u8, BLOCK_LEN>(move v@30);
          drop v@30;
          v@17 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@18, move v@29);
          drop v@29;
          drop v@18;
          drop v@32;
          drop v@31;
          drop v@19;
          drop v@17;
          v@35 := ();
          v@16 := move v@35;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@36 := ();
          v@11 := move v@36;
          drop re^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@37 := ();
          v@10 := move v@37;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@34 := ();
    v@3 := move v@34;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy out^2;
    drop out^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, @>
Visiting call: core::slice::{@Slice<T>}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, C@1>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::Range<usize>>::index_mut
Visiting call: libcrux_kyber::serialize::compress_then_serialize_ring_element_u<C@2, C@3>
is_array_map: false
--> 0 type_args, 2 const_generics
--> 0 type_args, 2 const_generics
--> pattern: libcrux_kyber::serialize::compress_then_serialize_ring_element_u<@, @>
--> name: libcrux_kyber::serialize::compress_then_serialize_ring_element_u
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: @Array<u8, C@1>
Visiting call: @ArrayToSliceShared<'_, u8, C@3>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
244/465
Visiting opaque function: core::ops::index::Index::index
  opaque fn core::ops::index::Index::index<0, Self, Idx>(&0 (Self), Idx) -> &0 (Self::Output)
ERROR translating core::ops::index::Index::index: Failure("TODO: TraitTypes Self::Output")

245/465
Visiting function: libcrux_kyber::ntt::invert_ntt_at_layer
  fn libcrux_kyber::ntt::invert_ntt_at_layer<0>(zeta_i^1 : &0 mut (usize), re^2 : libcrux_kyber::arithmetic::PolynomialRingElement, layer^3 : usize) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    zeta_i^1 : &'_ mut (usize);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    layer^3 : usize;
    step^4 : usize;
    v@5 : usize;
    v@6 : ();
    v@7 : core::ops::range::Range<usize>;
    v@8 : core::ops::range::Range<usize>;
    v@9 : usize;
    v@10 : usize;
    iter^11 : core::ops::range::Range<usize>;
    v@12 : ();
    v@13 : ();
    v@14 : core::option::Option<usize>;
    v@15 : &'_ mut (core::ops::range::Range<usize>);
    v@16 : &'_ mut (core::ops::range::Range<usize>);
    round^17 : usize;
    offset^18 : usize;
    v@19 : usize;
    v@20 : usize;
    v@21 : usize;
    v@22 : core::ops::range::Range<usize>;
    v@23 : core::ops::range::Range<usize>;
    v@24 : usize;
    v@25 : usize;
    v@26 : usize;
    v@27 : usize;
    iter^28 : core::ops::range::Range<usize>;
    v@29 : ();
    v@30 : core::option::Option<usize>;
    v@31 : &'_ mut (core::ops::range::Range<usize>);
    v@32 : &'_ mut (core::ops::range::Range<usize>);
    j^33 : usize;
    a_minus_b^34 : i32;
    v@35 : i32;
    v@36 : usize;
    v@37 : usize;
    v@38 : usize;
    v@39 : i32;
    v@40 : usize;
    v@41 : i32;
    v@42 : usize;
    v@43 : i32;
    v@44 : usize;
    v@45 : usize;
    v@46 : usize;
    v@47 : usize;
    v@48 : i32;
    v@49 : i32;
    v@50 : i32;
    v@51 : i32;
    v@52 : @Array<i32, 128: usize>;
    v@53 : usize;
    v@54 : usize;
    v@55 : usize;
    v@56 : usize;
    v@57 : ();
    v@58 : ();
    v@59 : ();
    v@60 : @Array<i32, 128: usize>;
    v@61 : ();
    v@62 : ();
    v@63 : &'_ mut (@Array<i32, 256: usize>);
    v@64 : &'_ mut (i32);
    v@65 : &'_ (@Array<i32, 128: usize>);
    v@66 : &'_ (i32);
    v@67 : &'_ mut (@Array<i32, 256: usize>);
    v@68 : &'_ mut (i32);
    v@69 : &'_ (@Array<i32, 256: usize>);
    v@70 : &'_ (i32);
    v@71 : &'_ (@Array<i32, 256: usize>);
    v@72 : &'_ (i32);
    v@73 : &'_ (@Array<i32, 256: usize>);
    v@74 : &'_ (i32);
    v@75 : &'_ (@Array<i32, 256: usize>);
    v@76 : &'_ (i32);

    v@5 := copy layer^3;
    step^4 := (1: usize : usize) << move v@5;
    drop v@5;
    fake_read step^4;
    v@10 := copy step^4;
    v@9 := (128: usize : usize) / move v@10;
    drop v@10;
    v@8 := core::ops::range::Range { start = (0: usize : usize); end = move v@9; };
    drop v@9;
    v@7 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@8);
    drop v@8;
    fake_read v@7;
    iter^11 := move v@7;
    loop {
      v@16 := &mut iter^11;
      v@15 := &two-phase *(v@16);
      v@14 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@15);
      drop v@15;
      fake_read v@14;
      match (v@14) {
      | 0 => {
          break 0
        }
      | 1 => {
          round^17 := copy (v@14 as core::option::Option::Some).0;
          *(zeta_i^1) := copy *(zeta_i^1) - (1: usize : usize);
          v@20 := copy round^17;
          v@21 := copy step^4;
          v@19 := move v@20 * move v@21;
          drop v@21;
          drop v@20;
          offset^18 := move v@19 * (2: usize : usize);
          drop v@19;
          fake_read offset^18;
          v@24 := copy offset^18;
          v@26 := copy offset^18;
          v@27 := copy step^4;
          v@25 := move v@26 + move v@27;
          drop v@27;
          drop v@26;
          v@23 := core::ops::range::Range { start = move v@24; end = move v@25; };
          drop v@25;
          drop v@24;
          v@22 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@23);
          drop v@23;
          fake_read v@22;
          iter^28 := move v@22;
          loop {
            v@32 := &mut iter^28;
            v@31 := &two-phase *(v@32);
            v@30 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@31);
            drop v@31;
            fake_read v@30;
            match (v@30) {
            | 0 => {
                break 0
              }
            | 1 => {
                j^33 := copy (v@30 as core::option::Option::Some).0;
                v@37 := copy j^33;
                v@38 := copy step^4;
                v@36 := move v@37 + move v@38;
                drop v@38;
                drop v@37;
                v@75 := &(re^2).coefficients;
                v@76 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@75, copy v@36);
                v@35 := copy *(v@76);
                v@40 := copy j^33;
                v@73 := &(re^2).coefficients;
                v@74 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@73, copy v@40);
                v@39 := copy *(v@74);
                a_minus_b^34 := move v@35 - move v@39;
                drop v@39;
                drop v@35;
                fake_read a_minus_b^34;
                drop v@40;
                drop v@36;
                v@42 := copy j^33;
                v@71 := &(re^2).coefficients;
                v@72 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@71, copy v@42);
                v@41 := copy *(v@72);
                v@45 := copy j^33;
                v@46 := copy step^4;
                v@44 := move v@45 + move v@46;
                drop v@46;
                drop v@45;
                v@69 := &(re^2).coefficients;
                v@70 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@69, copy v@44);
                v@43 := copy *(v@70);
                v@47 := copy j^33;
                v@67 := &mut (re^2).coefficients;
                v@68 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@67, copy v@47);
                *(v@68) := move v@41 + move v@43;
                drop v@43;
                drop v@41;
                drop v@47;
                drop v@44;
                drop v@42;
                v@50 := copy a_minus_b^34;
                v@60 := global libcrux_kyber::ntt::ZETAS_TIMES_MONTGOMERY_R;
                v@52 := move v@60;
                v@53 := copy *(zeta_i^1);
                v@65 := &v@52;
                v@66 := move @ArrayIndexShared<'_, i32, 128: usize>(move v@65, copy v@53);
                v@51 := copy *(v@66);
                v@49 := move v@50 * move v@51;
                drop v@51;
                drop v@50;
                v@48 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@49);
                drop v@49;
                v@55 := copy j^33;
                v@56 := copy step^4;
                v@54 := move v@55 + move v@56;
                drop v@56;
                drop v@55;
                v@63 := &mut (re^2).coefficients;
                v@64 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@63, copy v@54);
                *(v@64) := move v@48;
                drop v@48;
                drop v@54;
                drop v@53;
                drop v@52;
                v@61 := ();
                v@29 := move v@61;
                drop a_minus_b^34;
                drop j^33;
                drop v@32;
                drop v@30;
                drop v@29;
                v@62 := ();
                v@12 := move v@62;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@58 := ();
          v@13 := move v@58;
          drop v@32;
          drop v@30;
          drop v@29;
          drop iter^28;
          drop v@22;
          drop offset^18;
          drop round^17;
          drop v@16;
          drop v@14;
          drop v@13;
          v@59 := ();
          v@12 := move v@59;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@57 := ();
    v@6 := move v@57;
    drop v@16;
    drop v@14;
    drop v@13;
    drop iter^11;
    drop v@7;
    drop v@6;
    v@0 := copy re^2;
    drop step^4;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
246/465
Visiting function: libcrux_kyber::ntt::invert_ntt_montgomery
  fn libcrux_kyber::ntt::invert_ntt_montgomery<K>(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    zeta_i^2 : usize;
    v@3 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@4 : &'_ mut (usize);
    v@5 : &'_ mut (usize);
    v@6 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@7 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@8 : &'_ mut (usize);
    v@9 : &'_ mut (usize);
    v@10 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@11 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@12 : &'_ mut (usize);
    v@13 : &'_ mut (usize);
    v@14 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@15 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@16 : &'_ mut (usize);
    v@17 : &'_ mut (usize);
    v@18 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@19 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@20 : &'_ mut (usize);
    v@21 : &'_ mut (usize);
    v@22 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@23 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@24 : &'_ mut (usize);
    v@25 : &'_ mut (usize);
    v@26 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@27 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@28 : &'_ mut (usize);
    v@29 : &'_ mut (usize);
    v@30 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@31 : ();
    v@32 : core::ops::range::Range<usize>;
    v@33 : core::ops::range::Range<usize>;
    iter^34 : core::ops::range::Range<usize>;
    v@35 : ();
    v@36 : ();
    v@37 : core::option::Option<usize>;
    v@38 : &'_ mut (core::ops::range::Range<usize>);
    v@39 : &'_ mut (core::ops::range::Range<usize>);
    i^40 : usize;
    v@41 : i32;
    v@42 : i32;
    v@43 : usize;
    v@44 : usize;
    v@45 : usize;
    v@46 : ();
    v@47 : ();
    v@48 : ();
    v@49 : &'_ mut (@Array<i32, 256: usize>);
    v@50 : &'_ mut (i32);
    v@51 : &'_ (@Array<i32, 256: usize>);
    v@52 : &'_ (i32);

    v@45 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    zeta_i^2 := move v@45 / (2: usize : usize);
    fake_read zeta_i^2;
    v@5 := &mut zeta_i^2;
    v@4 := &two-phase *(v@5);
    v@6 := copy re^1;
    v@3 := move libcrux_kyber::ntt::invert_ntt_at_layer(move v@4, move v@6, (1: usize : usize));
    drop v@6;
    drop v@4;
    re^1 := move v@3;
    drop v@3;
    drop v@5;
    v@9 := &mut zeta_i^2;
    v@8 := &two-phase *(v@9);
    v@10 := copy re^1;
    v@7 := move libcrux_kyber::ntt::invert_ntt_at_layer(move v@8, move v@10, (2: usize : usize));
    drop v@10;
    drop v@8;
    re^1 := move v@7;
    drop v@7;
    drop v@9;
    v@13 := &mut zeta_i^2;
    v@12 := &two-phase *(v@13);
    v@14 := copy re^1;
    v@11 := move libcrux_kyber::ntt::invert_ntt_at_layer(move v@12, move v@14, (3: usize : usize));
    drop v@14;
    drop v@12;
    re^1 := move v@11;
    drop v@11;
    drop v@13;
    v@17 := &mut zeta_i^2;
    v@16 := &two-phase *(v@17);
    v@18 := copy re^1;
    v@15 := move libcrux_kyber::ntt::invert_ntt_at_layer(move v@16, move v@18, (4: usize : usize));
    drop v@18;
    drop v@16;
    re^1 := move v@15;
    drop v@15;
    drop v@17;
    v@21 := &mut zeta_i^2;
    v@20 := &two-phase *(v@21);
    v@22 := copy re^1;
    v@19 := move libcrux_kyber::ntt::invert_ntt_at_layer(move v@20, move v@22, (5: usize : usize));
    drop v@22;
    drop v@20;
    re^1 := move v@19;
    drop v@19;
    drop v@21;
    v@25 := &mut zeta_i^2;
    v@24 := &two-phase *(v@25);
    v@26 := copy re^1;
    v@23 := move libcrux_kyber::ntt::invert_ntt_at_layer(move v@24, move v@26, (6: usize : usize));
    drop v@26;
    drop v@24;
    re^1 := move v@23;
    drop v@23;
    drop v@25;
    v@29 := &mut zeta_i^2;
    v@28 := &two-phase *(v@29);
    v@30 := copy re^1;
    v@27 := move libcrux_kyber::ntt::invert_ntt_at_layer(move v@28, move v@30, (7: usize : usize));
    drop v@30;
    drop v@28;
    re^1 := move v@27;
    drop v@27;
    drop v@29;
    v@33 := core::ops::range::Range { start = (0: usize : usize); end = (8: usize : usize); };
    v@32 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@33);
    drop v@33;
    fake_read v@32;
    iter^34 := move v@32;
    loop {
      v@39 := &mut iter^34;
      v@38 := &two-phase *(v@39);
      v@37 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@38);
      drop v@38;
      fake_read v@37;
      match (v@37) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^40 := copy (v@37 as core::option::Option::Some).0;
          v@43 := copy i^40;
          v@51 := &(re^1).coefficients;
          v@52 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@51, copy v@43);
          v@42 := copy *(v@52);
          v@41 := move libcrux_kyber::arithmetic::barrett_reduce(move v@42);
          drop v@42;
          v@44 := copy i^40;
          v@49 := &mut (re^1).coefficients;
          v@50 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@49, copy v@44);
          *(v@50) := move v@41;
          drop v@41;
          drop v@44;
          drop v@43;
          v@47 := ();
          v@36 := move v@47;
          drop i^40;
          drop v@39;
          drop v@37;
          drop v@36;
          v@48 := ();
          v@35 := move v@48;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@46 := ();
    v@31 := move v@46;
    drop v@39;
    drop v@37;
    drop v@36;
    drop iter^34;
    drop v@32;
    drop v@31;
    v@0 := copy re^1;
    drop zeta_i^2;
    return
  }
Visiting call: libcrux_kyber::ntt::invert_ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_at_layer
--> name: libcrux_kyber::ntt::invert_ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_at_layer
--> name: libcrux_kyber::ntt::invert_ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_at_layer
--> name: libcrux_kyber::ntt::invert_ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_at_layer
--> name: libcrux_kyber::ntt::invert_ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_at_layer
--> name: libcrux_kyber::ntt::invert_ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_at_layer
--> name: libcrux_kyber::ntt::invert_ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_at_layer
--> name: libcrux_kyber::ntt::invert_ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::barrett_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::barrett_reduce
--> name: libcrux_kyber::arithmetic::barrett_reduce
--> args: i32, ret: i32
247/465
Visiting function: libcrux_kyber::matrix::compute_vector_u
  fn libcrux_kyber::matrix::compute_vector_u<0, 1, 2, K>(a_as_ntt^1 : &0 (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>), r_as_ntt^2 : &1 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>), error_1^3 : &2 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>)) -> @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>  
{
    v@0 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    a_as_ntt^1 : &'_ (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    r_as_ntt^2 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    error_1^3 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    result^4 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@5 : ();
    i^6 : usize;
    v@7 : core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>;
    v@8 : core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>;
    v@9 : &'_ (@Slice<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>);
    v@10 : &'_ (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    iter^11 : core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>;
    v@12 : ();
    v@13 : ();
    v@14 : core::option::Option<&'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>)>;
    v@15 : &'_ mut (core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>);
    v@16 : &'_ mut (core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>);
    row^17 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@18 : ();
    v@19 : ();
    j^20 : usize;
    v@21 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@22 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@23 : &'_ (@Slice<libcrux_kyber::arithmetic::PolynomialRingElement>);
    v@24 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    iter^25 : core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>;
    v@26 : ();
    v@27 : core::option::Option<&'_ (libcrux_kyber::arithmetic::PolynomialRingElement)>;
    v@28 : &'_ mut (core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>);
    v@29 : &'_ mut (core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>);
    a_element^30 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@31 : ();
    product^32 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@33 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@34 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@35 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@36 : usize;
    v@37 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@38 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@39 : usize;
    v@40 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@41 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@42 : usize;
    v@43 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@44 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@45 : usize;
    v@46 : usize;
    v@47 : core::ops::range::Range<usize>;
    v@48 : core::ops::range::Range<usize>;
    iter^49 : core::ops::range::Range<usize>;
    v@50 : ();
    v@51 : core::option::Option<usize>;
    v@52 : &'_ mut (core::ops::range::Range<usize>);
    v@53 : &'_ mut (core::ops::range::Range<usize>);
    j^54 : usize;
    coefficient_normal_form^55 : i32;
    v@56 : i32;
    v@57 : i32;
    v@58 : usize;
    v@59 : usize;
    v@60 : i32;
    v@61 : i32;
    v@62 : i32;
    v@63 : i32;
    v@64 : usize;
    v@65 : usize;
    v@66 : usize;
    v@67 : usize;
    v@68 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@69 : ();
    v@70 : ();
    v@71 : ();
    v@72 : ();
    v@73 : usize;
    v@74 : ();
    v@75 : ();
    v@76 : ();
    v@77 : ();
    v@78 : ();
    v@79 : ();
    v@80 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@81 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@82 : &'_ mut (@Array<i32, 256: usize>);
    v@83 : &'_ mut (i32);
    v@84 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@85 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@86 : &'_ (@Array<i32, 256: usize>);
    v@87 : &'_ (i32);
    v@88 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@89 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@90 : &'_ (@Array<i32, 256: usize>);
    v@91 : &'_ (i32);
    v@92 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@93 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@94 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@95 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@96 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@97 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@98 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@99 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@100 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@101 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);

    v@68 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    result^4 := move @ArrayRepeat<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@68);
    fake_read result^4;
    i^6 := (0: usize : usize);
    fake_read i^6;
    v@10 := &*(a_as_ntt^1);
    v@9 := move @ArrayToSliceShared<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>(move v@10);
    drop v@10;
    v@8 := move core::slice::{@Slice<T>}::iter<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>(move v@9);
    drop v@9;
    v@7 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>]::into_iter(move v@8);
    drop v@8;
    fake_read v@7;
    iter^11 := move v@7;
    loop {
      v@16 := &mut iter^11;
      v@15 := &two-phase *(v@16);
      v@14 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>>::next(move v@15);
      drop v@15;
      fake_read v@14;
      match (v@14) {
      | 0 => {
          break 0
        }
      | 1 => {
          row^17 := copy (v@14 as core::option::Option::Some).0;
          j^20 := (0: usize : usize);
          fake_read j^20;
          v@24 := &*(row^17);
          v@23 := move @ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@24);
          drop v@24;
          v@22 := move core::slice::{@Slice<T>}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>(move v@23);
          drop v@23;
          v@21 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>]::into_iter(move v@22);
          drop v@22;
          fake_read v@21;
          iter^25 := move v@21;
          loop {
            v@29 := &mut iter^25;
            v@28 := &two-phase *(v@29);
            v@27 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>::next(move v@28);
            drop v@28;
            fake_read v@27;
            match (v@27) {
            | 0 => {
                break 0
              }
            | 1 => {
                a_element^30 := copy (v@27 as core::option::Option::Some).0;
                v@33 := &*(a_element^30);
                v@36 := copy j^20;
                v@100 := &*(r_as_ntt^2);
                v@101 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@100, copy v@36);
                v@35 := &*(v@101);
                v@34 := &*(v@35);
                product^32 := move libcrux_kyber::ntt::ntt_multiply(move v@33, move v@34);
                drop v@34;
                drop v@33;
                fake_read product^32;
                drop v@36;
                drop v@35;
                v@39 := copy i^6;
                v@98 := &result^4;
                v@99 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@98, copy v@39);
                v@38 := copy *(v@99);
                v@41 := &product^32;
                v@40 := &*(v@41);
                v@37 := move libcrux_kyber::arithmetic::add_to_ring_element<K>(move v@38, move v@40);
                drop v@40;
                drop v@38;
                v@42 := copy i^6;
                v@96 := &mut result^4;
                v@97 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@96, copy v@42);
                *(v@97) := move v@37;
                drop v@37;
                drop v@42;
                drop v@41;
                drop v@39;
                v@71 := ();
                v@31 := move v@71;
                drop product^32;
                drop v@31;
                j^20 := copy j^20 + (1: usize : usize);
                v@72 := ();
                v@26 := move v@72;
                drop a_element^30;
                drop v@29;
                drop v@27;
                drop v@26;
                v@74 := ();
                v@12 := move v@74;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@70 := ();
          v@19 := move v@70;
          drop v@29;
          drop v@27;
          drop v@26;
          drop iter^25;
          drop v@21;
          drop j^20;
          drop v@19;
          v@45 := copy i^6;
          v@94 := &result^4;
          v@95 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@94, copy v@45);
          v@44 := copy *(v@95);
          v@43 := move libcrux_kyber::ntt::invert_ntt_montgomery<K>(move v@44);
          drop v@44;
          v@46 := copy i^6;
          v@92 := &mut result^4;
          v@93 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@92, copy v@46);
          *(v@93) := move v@43;
          drop v@43;
          drop v@46;
          drop v@45;
          v@73 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
          v@48 := core::ops::range::Range { start = (0: usize : usize); end = move v@73; };
          v@47 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@48);
          drop v@48;
          fake_read v@47;
          iter^49 := move v@47;
          loop {
            v@53 := &mut iter^49;
            v@52 := &two-phase *(v@53);
            v@51 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@52);
            drop v@52;
            fake_read v@51;
            match (v@51) {
            | 0 => {
                break 0
              }
            | 1 => {
                j^54 := copy (v@51 as core::option::Option::Some).0;
                v@58 := copy i^6;
                v@59 := copy j^54;
                v@88 := &result^4;
                v@89 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@88, copy v@58);
                v@90 := &(*(v@89)).coefficients;
                v@91 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@90, copy v@59);
                v@57 := copy *(v@91);
                v@56 := move v@57 * (1441: i32 : i32);
                drop v@57;
                coefficient_normal_form^55 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@56);
                drop v@56;
                fake_read coefficient_normal_form^55;
                drop v@59;
                drop v@58;
                v@62 := copy coefficient_normal_form^55;
                v@64 := copy i^6;
                v@65 := copy j^54;
                v@84 := &*(error_1^3);
                v@85 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@84, copy v@64);
                v@86 := &(*(v@85)).coefficients;
                v@87 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@86, copy v@65);
                v@63 := copy *(v@87);
                v@61 := move v@62 + move v@63;
                drop v@63;
                drop v@62;
                v@60 := move libcrux_kyber::arithmetic::barrett_reduce(move v@61);
                drop v@61;
                v@66 := copy i^6;
                v@67 := copy j^54;
                v@80 := &mut result^4;
                v@81 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@80, copy v@66);
                v@82 := &mut (*(v@81)).coefficients;
                v@83 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@82, copy v@67);
                *(v@83) := move v@60;
                drop v@60;
                drop v@67;
                drop v@66;
                drop v@65;
                drop v@64;
                v@78 := ();
                v@50 := move v@78;
                drop coefficient_normal_form^55;
                drop j^54;
                drop v@53;
                drop v@51;
                drop v@50;
                v@79 := ();
                v@12 := move v@79;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@75 := ();
          v@18 := move v@75;
          drop v@53;
          drop v@51;
          drop v@50;
          drop iter^49;
          drop v@47;
          drop v@18;
          i^6 := copy i^6 + (1: usize : usize);
          v@76 := ();
          v@13 := move v@76;
          drop row^17;
          drop v@16;
          drop v@14;
          drop v@13;
          v@77 := ();
          v@12 := move v@77;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@69 := ();
    v@5 := move v@69;
    drop v@16;
    drop v@14;
    drop v@13;
    drop iter^11;
    drop v@7;
    drop i^6;
    drop v@5;
    v@0 := copy result^4;
    drop result^4;
    return
  }
Visiting call: @ArrayToSliceShared<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, [libcrux_kyber::arithmetic::PolynomialRingElement; @], @>
Visiting call: core::slice::{@Slice<T>}::iter<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<[libcrux_kyber::arithmetic::PolynomialRingElement; @]>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, [libcrux_kyber::arithmetic::PolynomialRingElement; @]>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, [libcrux_kyber::arithmetic::PolynomialRingElement; @]>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: @ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, @>
Visiting call: core::slice::{@Slice<T>}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<libcrux_kyber::arithmetic::PolynomialRingElement>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, libcrux_kyber::arithmetic::PolynomialRingElement>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, libcrux_kyber::arithmetic::PolynomialRingElement>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: libcrux_kyber::ntt::ntt_multiply
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_multiply
--> name: libcrux_kyber::ntt::ntt_multiply
--> args: &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement) ++ &'0_1 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::arithmetic::add_to_ring_element<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::arithmetic::add_to_ring_element<@>
--> name: libcrux_kyber::arithmetic::add_to_ring_element
--> args: libcrux_kyber::arithmetic::PolynomialRingElement ++ &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_montgomery<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_montgomery<@>
--> name: libcrux_kyber::ntt::invert_ntt_montgomery
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
Visiting call: libcrux_kyber::arithmetic::barrett_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::barrett_reduce
--> name: libcrux_kyber::arithmetic::barrett_reduce
--> args: i32, ret: i32
248/465
Visiting function: libcrux_kyber::serialize::deserialize_then_decompress_message
  fn libcrux_kyber::serialize::deserialize_then_decompress_message(serialized^1 : @Array<u8, 32: usize>) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^1 : @Array<u8, 32: usize>;
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::Iter<'_, u8>;
    v@6 : core::slice::iter::Iter<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    v@8 : &'_ (@Array<u8, 32: usize>);
    iter^9 : core::slice::iter::Iter<'_, u8>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (u8)>;
    v@13 : &'_ mut (core::slice::iter::Iter<'_, u8>);
    v@14 : &'_ mut (core::slice::iter::Iter<'_, u8>);
    byte^15 : &'_ (u8);
    v@16 : ();
    v@17 : core::ops::range::Range<usize>;
    v@18 : core::ops::range::Range<usize>;
    iter^19 : core::ops::range::Range<usize>;
    v@20 : ();
    v@21 : core::option::Option<usize>;
    v@22 : &'_ mut (core::ops::range::Range<usize>);
    v@23 : &'_ mut (core::ops::range::Range<usize>);
    j^24 : usize;
    coefficient_compressed^25 : i32;
    v@26 : u8;
    v@27 : u8;
    v@28 : u8;
    v@29 : usize;
    v@30 : i32;
    v@31 : i32;
    v@32 : usize;
    v@33 : usize;
    v@34 : usize;
    v@35 : usize;
    v@36 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@37 : ();
    v@38 : ();
    v@39 : ();
    v@40 : ();
    v@41 : ();
    v@42 : ();
    v@43 : &'_ mut (@Array<i32, 256: usize>);
    v@44 : &'_ mut (i32);

    v@36 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    re^2 := move v@36;
    fake_read re^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &serialized^1;
    v@7 := move @ArrayToSliceShared<'_, u8, 32: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::iter<u8>(move v@7);
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, u8>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, u8>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          byte^15 := copy (v@12 as core::option::Option::Some).0;
          v@18 := core::ops::range::Range { start = (0: usize : usize); end = (8: usize : usize); };
          v@17 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@18);
          drop v@18;
          fake_read v@17;
          iter^19 := move v@17;
          loop {
            v@23 := &mut iter^19;
            v@22 := &two-phase *(v@23);
            v@21 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@22);
            drop v@22;
            fake_read v@21;
            match (v@21) {
            | 0 => {
                break 0
              }
            | 1 => {
                j^24 := copy (v@21 as core::option::Option::Some).0;
                v@28 := copy *(byte^15);
                v@29 := copy j^24;
                v@27 := move v@28 >> move v@29;
                drop v@29;
                drop v@28;
                v@26 := move v@27 & (1: u8 : u8);
                drop v@27;
                coefficient_compressed^25 := cast<u8,i32> move v@26;
                drop v@26;
                fake_read coefficient_compressed^25;
                v@31 := copy coefficient_compressed^25;
                v@30 := move libcrux_kyber::compress::decompress_message_coefficient(move v@31);
                drop v@31;
                v@34 := copy i^4;
                v@33 := (8: usize : usize) * move v@34;
                drop v@34;
                v@35 := copy j^24;
                v@32 := move v@33 + move v@35;
                drop v@35;
                drop v@33;
                v@43 := &mut (re^2).coefficients;
                v@44 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@43, copy v@32);
                *(v@44) := move v@30;
                drop v@30;
                drop v@32;
                v@39 := ();
                v@20 := move v@39;
                drop coefficient_compressed^25;
                drop j^24;
                drop v@23;
                drop v@21;
                drop v@20;
                v@41 := ();
                v@10 := move v@41;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@38 := ();
          v@16 := move v@38;
          drop v@23;
          drop v@21;
          drop v@20;
          drop iter^19;
          drop v@17;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@40 := ();
          v@11 := move v@40;
          drop byte^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@42 := ();
          v@10 := move v@42;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@37 := ();
    v@3 := move v@37;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy re^2;
    drop re^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, 32: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 32>
Visiting call: core::slice::{@Slice<T>}::iter<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<u8>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, u8>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::compress::decompress_message_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_message_coefficient
--> name: libcrux_kyber::compress::decompress_message_coefficient
--> args: i32, ret: i32
249/465
Visiting function: libcrux_kyber::matrix::compute_ring_element_v
  fn libcrux_kyber::matrix::compute_ring_element_v<0, 1, 2, 3, K>(t_as_ntt^1 : &0 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>), r_as_ntt^2 : &1 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>), error_2^3 : &2 (libcrux_kyber::arithmetic::PolynomialRingElement), message^4 : &3 (libcrux_kyber::arithmetic::PolynomialRingElement)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    t_as_ntt^1 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    r_as_ntt^2 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    error_2^3 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    message^4 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    result^5 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@6 : ();
    v@7 : core::ops::range::Range<usize>;
    v@8 : core::ops::range::Range<usize>;
    iter^9 : core::ops::range::Range<usize>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<usize>;
    v@13 : &'_ mut (core::ops::range::Range<usize>);
    v@14 : &'_ mut (core::ops::range::Range<usize>);
    i^15 : usize;
    product^16 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@17 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@18 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@19 : usize;
    v@20 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@21 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@22 : usize;
    v@23 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@24 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@25 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@26 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@27 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@28 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@29 : ();
    v@30 : core::ops::range::Range<usize>;
    v@31 : core::ops::range::Range<usize>;
    iter^32 : core::ops::range::Range<usize>;
    v@33 : ();
    v@34 : core::option::Option<usize>;
    v@35 : &'_ mut (core::ops::range::Range<usize>);
    v@36 : &'_ mut (core::ops::range::Range<usize>);
    i^37 : usize;
    coefficient_normal_form^38 : i32;
    v@39 : i32;
    v@40 : i32;
    v@41 : usize;
    v@42 : i32;
    v@43 : i32;
    v@44 : i32;
    v@45 : i32;
    v@46 : i32;
    v@47 : usize;
    v@48 : i32;
    v@49 : usize;
    v@50 : usize;
    v@51 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@52 : ();
    v@53 : usize;
    v@54 : ();
    v@55 : ();
    v@56 : ();
    v@57 : ();
    v@58 : ();
    v@59 : &'_ mut (@Array<i32, 256: usize>);
    v@60 : &'_ mut (i32);
    v@61 : &'_ (@Array<i32, 256: usize>);
    v@62 : &'_ (i32);
    v@63 : &'_ (@Array<i32, 256: usize>);
    v@64 : &'_ (i32);
    v@65 : &'_ (@Array<i32, 256: usize>);
    v@66 : &'_ (i32);
    v@67 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@68 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@69 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@70 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);

    v@51 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    result^5 := move v@51;
    fake_read result^5;
    v@8 := core::ops::range::Range { start = (0: usize : usize); end = K; };
    v@7 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@8);
    drop v@8;
    fake_read v@7;
    iter^9 := move v@7;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^15 := copy (v@12 as core::option::Option::Some).0;
          v@19 := copy i^15;
          v@69 := &*(t_as_ntt^1);
          v@70 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@69, copy v@19);
          v@18 := &*(v@70);
          v@17 := &*(v@18);
          v@22 := copy i^15;
          v@67 := &*(r_as_ntt^2);
          v@68 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@67, copy v@22);
          v@21 := &*(v@68);
          v@20 := &*(v@21);
          product^16 := move libcrux_kyber::ntt::ntt_multiply(move v@17, move v@20);
          drop v@20;
          drop v@17;
          fake_read product^16;
          drop v@22;
          drop v@21;
          drop v@19;
          drop v@18;
          v@24 := copy result^5;
          v@26 := &product^16;
          v@25 := &*(v@26);
          v@23 := move libcrux_kyber::arithmetic::add_to_ring_element<K>(move v@24, move v@25);
          drop v@25;
          drop v@24;
          result^5 := move v@23;
          drop v@23;
          drop v@26;
          v@54 := ();
          v@11 := move v@54;
          drop product^16;
          drop i^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@55 := ();
          v@10 := move v@55;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@52 := ();
    v@6 := move v@52;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@7;
    drop v@6;
    v@28 := copy result^5;
    v@27 := move libcrux_kyber::ntt::invert_ntt_montgomery<K>(move v@28);
    drop v@28;
    result^5 := move v@27;
    drop v@27;
    v@53 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@31 := core::ops::range::Range { start = (0: usize : usize); end = move v@53; };
    v@30 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@31);
    drop v@31;
    fake_read v@30;
    iter^32 := move v@30;
    loop {
      v@36 := &mut iter^32;
      v@35 := &two-phase *(v@36);
      v@34 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@35);
      drop v@35;
      fake_read v@34;
      match (v@34) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^37 := copy (v@34 as core::option::Option::Some).0;
          v@41 := copy i^37;
          v@65 := &(result^5).coefficients;
          v@66 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@65, copy v@41);
          v@40 := copy *(v@66);
          v@39 := move v@40 * (1441: i32 : i32);
          drop v@40;
          coefficient_normal_form^38 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@39);
          drop v@39;
          fake_read coefficient_normal_form^38;
          drop v@41;
          v@45 := copy coefficient_normal_form^38;
          v@47 := copy i^37;
          v@63 := &(*(error_2^3)).coefficients;
          v@64 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@63, copy v@47);
          v@46 := copy *(v@64);
          v@44 := move v@45 + move v@46;
          drop v@46;
          drop v@45;
          v@49 := copy i^37;
          v@61 := &(*(message^4)).coefficients;
          v@62 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@61, copy v@49);
          v@48 := copy *(v@62);
          v@43 := move v@44 + move v@48;
          drop v@48;
          drop v@44;
          v@42 := move libcrux_kyber::arithmetic::barrett_reduce(move v@43);
          drop v@43;
          v@50 := copy i^37;
          v@59 := &mut (result^5).coefficients;
          v@60 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@59, copy v@50);
          *(v@60) := move v@42;
          drop v@42;
          drop v@50;
          drop v@49;
          drop v@47;
          v@57 := ();
          v@33 := move v@57;
          drop coefficient_normal_form^38;
          drop i^37;
          drop v@36;
          drop v@34;
          drop v@33;
          v@58 := ();
          v@10 := move v@58;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@56 := ();
    v@29 := move v@56;
    drop v@36;
    drop v@34;
    drop v@33;
    drop iter^32;
    drop v@30;
    drop v@29;
    v@0 := copy result^5;
    drop result^5;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::ntt::ntt_multiply
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_multiply
--> name: libcrux_kyber::ntt::ntt_multiply
--> args: &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement) ++ &'0_1 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::arithmetic::add_to_ring_element<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::arithmetic::add_to_ring_element<@>
--> name: libcrux_kyber::arithmetic::add_to_ring_element
--> args: libcrux_kyber::arithmetic::PolynomialRingElement ++ &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_montgomery<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_montgomery<@>
--> name: libcrux_kyber::ntt::invert_ntt_montgomery
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
Visiting call: libcrux_kyber::arithmetic::barrett_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::barrett_reduce
--> name: libcrux_kyber::arithmetic::barrett_reduce
--> args: i32, ret: i32
250/465
Visiting function: libcrux_kyber::serialize::compress_then_serialize_4
  fn libcrux_kyber::serialize::compress_then_serialize_4<OUT_LEN>(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> @Array<u8, OUT_LEN>  
{
    v@0 : @Array<u8, OUT_LEN>;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^2 : @Array<u8, OUT_LEN>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, i32>;
    v@6 : core::slice::iter::ChunksExact<'_, i32>;
    v@7 : &'_ (@Slice<i32>);
    v@8 : &'_ (@Array<i32, 256: usize>);
    iter^9 : core::slice::iter::ChunksExact<'_, i32>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (@Slice<i32>)>;
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    v@14 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    coefficients^15 : &'_ (@Slice<i32>);
    v@16 : ();
    coefficient1^17 : u8;
    v@18 : i32;
    v@19 : u16;
    v@20 : i32;
    v@21 : usize;
    coefficient2^22 : u8;
    v@23 : i32;
    v@24 : u16;
    v@25 : i32;
    v@26 : usize;
    v@27 : u8;
    v@28 : u8;
    v@29 : u8;
    v@30 : usize;
    v@31 : ();
    v@32 : ();
    v@33 : ();
    v@34 : ();
    v@35 : &'_ mut (@Array<u8, OUT_LEN>);
    v@36 : &'_ mut (u8);
    v@37 : &'_ (@Slice<i32>);
    v@38 : &'_ (i32);
    v@39 : &'_ (@Slice<i32>);
    v@40 : &'_ (i32);

    serialized^2 := move @ArrayRepeat<'_, u8, OUT_LEN>((0: u8 : u8));
    fake_read serialized^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &(re^1).coefficients;
    v@7 := move @ArrayToSliceShared<'_, i32, 256: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<i32>(move v@7, (2: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          coefficients^15 := copy (v@12 as core::option::Option::Some).0;
          v@21 := (0: usize : usize);
          v@39 := &*(coefficients^15);
          v@40 := move @SliceIndexShared<'_, i32>(move v@39, copy v@21);
          v@20 := copy *(v@40);
          v@19 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@20);
          drop v@20;
          v@18 := move libcrux_kyber::compress::compress_ciphertext_coefficient((4: u8 : u8), move v@19);
          drop v@19;
          coefficient1^17 := cast<i32,u8> move v@18;
          drop v@18;
          fake_read coefficient1^17;
          drop v@21;
          v@26 := (1: usize : usize);
          v@37 := &*(coefficients^15);
          v@38 := move @SliceIndexShared<'_, i32>(move v@37, copy v@26);
          v@25 := copy *(v@38);
          v@24 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@25);
          drop v@25;
          v@23 := move libcrux_kyber::compress::compress_ciphertext_coefficient((4: u8 : u8), move v@24);
          drop v@24;
          coefficient2^22 := cast<i32,u8> move v@23;
          drop v@23;
          fake_read coefficient2^22;
          drop v@26;
          v@28 := copy coefficient2^22;
          v@27 := move v@28 << (4: i32 : i32);
          drop v@28;
          v@29 := copy coefficient1^17;
          v@30 := copy i^4;
          v@35 := &mut serialized^2;
          v@36 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@35, copy v@30);
          *(v@36) := move v@27 | move v@29;
          drop v@29;
          drop v@27;
          drop v@30;
          v@32 := ();
          v@16 := move v@32;
          drop coefficient2^22;
          drop coefficient1^17;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@33 := ();
          v@11 := move v@33;
          drop coefficients^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@34 := ();
          v@10 := move v@34;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@31 := ();
    v@3 := move v@31;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy serialized^2;
    drop serialized^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, i32, 256: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, i32, 256>
Visiting call: core::slice::{@Slice<T>}::chunks_exact<i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<i32>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, i32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, i32>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
251/465
Visiting function: libcrux_kyber::serialize::compress_coefficients_5
  fn libcrux_kyber::serialize::compress_coefficients_5(coefficient2^1 : u8, coefficient1^2 : u8, coefficient4^3 : u8, coefficient3^4 : u8, coefficient5^5 : u8, coefficient7^6 : u8, coefficient6^7 : u8, coefficient8^8 : u8) -> (u8, u8, u8, u8, u8)  
{
    v@0 : (u8, u8, u8, u8, u8);
    coefficient2^1 : u8;
    coefficient1^2 : u8;
    coefficient4^3 : u8;
    coefficient3^4 : u8;
    coefficient5^5 : u8;
    coefficient7^6 : u8;
    coefficient6^7 : u8;
    coefficient8^8 : u8;
    coef1^9 : u8;
    v@10 : u8;
    v@11 : u8;
    v@12 : u8;
    v@13 : u8;
    coef2^14 : u8;
    v@15 : u8;
    v@16 : u8;
    v@17 : u8;
    v@18 : u8;
    v@19 : u8;
    v@20 : u8;
    v@21 : u8;
    v@22 : u8;
    coef3^23 : u8;
    v@24 : u8;
    v@25 : u8;
    v@26 : u8;
    v@27 : u8;
    v@28 : u8;
    coef4^29 : u8;
    v@30 : u8;
    v@31 : u8;
    v@32 : u8;
    v@33 : u8;
    v@34 : u8;
    v@35 : u8;
    v@36 : u8;
    v@37 : u8;
    coef5^38 : u8;
    v@39 : u8;
    v@40 : u8;
    v@41 : u8;
    v@42 : u8;
    v@43 : u8;
    v@44 : u8;
    v@45 : u8;
    v@46 : u8;
    v@47 : u8;

    v@12 := copy coefficient2^1;
    v@11 := move v@12 & (7: u8 : u8);
    drop v@12;
    v@10 := move v@11 << (5: i32 : i32);
    drop v@11;
    v@13 := copy coefficient1^2;
    coef1^9 := move v@10 | move v@13;
    drop v@13;
    drop v@10;
    fake_read coef1^9;
    v@18 := copy coefficient4^3;
    v@17 := move v@18 & (1: u8 : u8);
    drop v@18;
    v@16 := move v@17 << (7: i32 : i32);
    drop v@17;
    v@20 := copy coefficient3^4;
    v@19 := move v@20 << (2: i32 : i32);
    drop v@20;
    v@15 := move v@16 | move v@19;
    drop v@19;
    drop v@16;
    v@22 := copy coefficient2^1;
    v@21 := move v@22 >> (3: i32 : i32);
    drop v@22;
    coef2^14 := move v@15 | move v@21;
    drop v@21;
    drop v@15;
    fake_read coef2^14;
    v@26 := copy coefficient5^5;
    v@25 := move v@26 & (15: u8 : u8);
    drop v@26;
    v@24 := move v@25 << (4: i32 : i32);
    drop v@25;
    v@28 := copy coefficient4^3;
    v@27 := move v@28 >> (1: i32 : i32);
    drop v@28;
    coef3^23 := move v@24 | move v@27;
    drop v@27;
    drop v@24;
    fake_read coef3^23;
    v@33 := copy coefficient7^6;
    v@32 := move v@33 & (3: u8 : u8);
    drop v@33;
    v@31 := move v@32 << (6: i32 : i32);
    drop v@32;
    v@35 := copy coefficient6^7;
    v@34 := move v@35 << (1: i32 : i32);
    drop v@35;
    v@30 := move v@31 | move v@34;
    drop v@34;
    drop v@31;
    v@37 := copy coefficient5^5;
    v@36 := move v@37 >> (4: i32 : i32);
    drop v@37;
    coef4^29 := move v@30 | move v@36;
    drop v@36;
    drop v@30;
    fake_read coef4^29;
    v@40 := copy coefficient8^8;
    v@39 := move v@40 << (3: i32 : i32);
    drop v@40;
    v@42 := copy coefficient7^6;
    v@41 := move v@42 >> (2: i32 : i32);
    drop v@42;
    coef5^38 := move v@39 | move v@41;
    drop v@41;
    drop v@39;
    fake_read coef5^38;
    v@43 := copy coef1^9;
    v@44 := copy coef2^14;
    v@45 := copy coef3^23;
    v@46 := copy coef4^29;
    v@47 := copy coef5^38;
    v@0 := (move v@43, move v@44, move v@45, move v@46, move v@47);
    drop v@47;
    drop v@46;
    drop v@45;
    drop v@44;
    drop v@43;
    drop coef5^38;
    drop coef4^29;
    drop coef3^23;
    drop coef2^14;
    drop coef1^9;
    return
  }
252/465
Visiting function: libcrux_kyber::serialize::compress_then_serialize_5
  fn libcrux_kyber::serialize::compress_then_serialize_5<OUT_LEN>(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> @Array<u8, OUT_LEN>  
{
    v@0 : @Array<u8, OUT_LEN>;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^2 : @Array<u8, OUT_LEN>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, i32>;
    v@6 : core::slice::iter::ChunksExact<'_, i32>;
    v@7 : &'_ (@Slice<i32>);
    v@8 : &'_ (@Array<i32, 256: usize>);
    iter^9 : core::slice::iter::ChunksExact<'_, i32>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (@Slice<i32>)>;
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    v@14 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    coefficients^15 : &'_ (@Slice<i32>);
    v@16 : ();
    coefficient1^17 : u8;
    v@18 : i32;
    v@19 : u16;
    v@20 : i32;
    v@21 : usize;
    coefficient2^22 : u8;
    v@23 : i32;
    v@24 : u16;
    v@25 : i32;
    v@26 : usize;
    coefficient3^27 : u8;
    v@28 : i32;
    v@29 : u16;
    v@30 : i32;
    v@31 : usize;
    coefficient4^32 : u8;
    v@33 : i32;
    v@34 : u16;
    v@35 : i32;
    v@36 : usize;
    coefficient5^37 : u8;
    v@38 : i32;
    v@39 : u16;
    v@40 : i32;
    v@41 : usize;
    coefficient6^42 : u8;
    v@43 : i32;
    v@44 : u16;
    v@45 : i32;
    v@46 : usize;
    coefficient7^47 : u8;
    v@48 : i32;
    v@49 : u16;
    v@50 : i32;
    v@51 : usize;
    coefficient8^52 : u8;
    v@53 : i32;
    v@54 : u16;
    v@55 : i32;
    v@56 : usize;
    coef1^57 : u8;
    coef2^58 : u8;
    coef3^59 : u8;
    coef4^60 : u8;
    coef5^61 : u8;
    v@62 : (u8, u8, u8, u8, u8);
    v@63 : u8;
    v@64 : u8;
    v@65 : u8;
    v@66 : u8;
    v@67 : u8;
    v@68 : u8;
    v@69 : u8;
    v@70 : u8;
    v@71 : u8;
    v@72 : usize;
    v@73 : usize;
    v@74 : u8;
    v@75 : usize;
    v@76 : usize;
    v@77 : usize;
    v@78 : u8;
    v@79 : usize;
    v@80 : usize;
    v@81 : usize;
    v@82 : u8;
    v@83 : usize;
    v@84 : usize;
    v@85 : usize;
    v@86 : u8;
    v@87 : usize;
    v@88 : usize;
    v@89 : usize;
    v@90 : ();
    v@91 : ();
    v@92 : ();
    v@93 : ();
    v@94 : &'_ mut (@Array<u8, OUT_LEN>);
    v@95 : &'_ mut (u8);
    v@96 : &'_ mut (@Array<u8, OUT_LEN>);
    v@97 : &'_ mut (u8);
    v@98 : &'_ mut (@Array<u8, OUT_LEN>);
    v@99 : &'_ mut (u8);
    v@100 : &'_ mut (@Array<u8, OUT_LEN>);
    v@101 : &'_ mut (u8);
    v@102 : &'_ mut (@Array<u8, OUT_LEN>);
    v@103 : &'_ mut (u8);
    v@104 : &'_ (@Slice<i32>);
    v@105 : &'_ (i32);
    v@106 : &'_ (@Slice<i32>);
    v@107 : &'_ (i32);
    v@108 : &'_ (@Slice<i32>);
    v@109 : &'_ (i32);
    v@110 : &'_ (@Slice<i32>);
    v@111 : &'_ (i32);
    v@112 : &'_ (@Slice<i32>);
    v@113 : &'_ (i32);
    v@114 : &'_ (@Slice<i32>);
    v@115 : &'_ (i32);
    v@116 : &'_ (@Slice<i32>);
    v@117 : &'_ (i32);
    v@118 : &'_ (@Slice<i32>);
    v@119 : &'_ (i32);

    serialized^2 := move @ArrayRepeat<'_, u8, OUT_LEN>((0: u8 : u8));
    fake_read serialized^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &(re^1).coefficients;
    v@7 := move @ArrayToSliceShared<'_, i32, 256: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<i32>(move v@7, (8: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          coefficients^15 := copy (v@12 as core::option::Option::Some).0;
          v@21 := (0: usize : usize);
          v@118 := &*(coefficients^15);
          v@119 := move @SliceIndexShared<'_, i32>(move v@118, copy v@21);
          v@20 := copy *(v@119);
          v@19 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@20);
          drop v@20;
          v@18 := move libcrux_kyber::compress::compress_ciphertext_coefficient((5: u8 : u8), move v@19);
          drop v@19;
          coefficient1^17 := cast<i32,u8> move v@18;
          drop v@18;
          fake_read coefficient1^17;
          drop v@21;
          v@26 := (1: usize : usize);
          v@116 := &*(coefficients^15);
          v@117 := move @SliceIndexShared<'_, i32>(move v@116, copy v@26);
          v@25 := copy *(v@117);
          v@24 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@25);
          drop v@25;
          v@23 := move libcrux_kyber::compress::compress_ciphertext_coefficient((5: u8 : u8), move v@24);
          drop v@24;
          coefficient2^22 := cast<i32,u8> move v@23;
          drop v@23;
          fake_read coefficient2^22;
          drop v@26;
          v@31 := (2: usize : usize);
          v@114 := &*(coefficients^15);
          v@115 := move @SliceIndexShared<'_, i32>(move v@114, copy v@31);
          v@30 := copy *(v@115);
          v@29 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@30);
          drop v@30;
          v@28 := move libcrux_kyber::compress::compress_ciphertext_coefficient((5: u8 : u8), move v@29);
          drop v@29;
          coefficient3^27 := cast<i32,u8> move v@28;
          drop v@28;
          fake_read coefficient3^27;
          drop v@31;
          v@36 := (3: usize : usize);
          v@112 := &*(coefficients^15);
          v@113 := move @SliceIndexShared<'_, i32>(move v@112, copy v@36);
          v@35 := copy *(v@113);
          v@34 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@35);
          drop v@35;
          v@33 := move libcrux_kyber::compress::compress_ciphertext_coefficient((5: u8 : u8), move v@34);
          drop v@34;
          coefficient4^32 := cast<i32,u8> move v@33;
          drop v@33;
          fake_read coefficient4^32;
          drop v@36;
          v@41 := (4: usize : usize);
          v@110 := &*(coefficients^15);
          v@111 := move @SliceIndexShared<'_, i32>(move v@110, copy v@41);
          v@40 := copy *(v@111);
          v@39 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@40);
          drop v@40;
          v@38 := move libcrux_kyber::compress::compress_ciphertext_coefficient((5: u8 : u8), move v@39);
          drop v@39;
          coefficient5^37 := cast<i32,u8> move v@38;
          drop v@38;
          fake_read coefficient5^37;
          drop v@41;
          v@46 := (5: usize : usize);
          v@108 := &*(coefficients^15);
          v@109 := move @SliceIndexShared<'_, i32>(move v@108, copy v@46);
          v@45 := copy *(v@109);
          v@44 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@45);
          drop v@45;
          v@43 := move libcrux_kyber::compress::compress_ciphertext_coefficient((5: u8 : u8), move v@44);
          drop v@44;
          coefficient6^42 := cast<i32,u8> move v@43;
          drop v@43;
          fake_read coefficient6^42;
          drop v@46;
          v@51 := (6: usize : usize);
          v@106 := &*(coefficients^15);
          v@107 := move @SliceIndexShared<'_, i32>(move v@106, copy v@51);
          v@50 := copy *(v@107);
          v@49 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@50);
          drop v@50;
          v@48 := move libcrux_kyber::compress::compress_ciphertext_coefficient((5: u8 : u8), move v@49);
          drop v@49;
          coefficient7^47 := cast<i32,u8> move v@48;
          drop v@48;
          fake_read coefficient7^47;
          drop v@51;
          v@56 := (7: usize : usize);
          v@104 := &*(coefficients^15);
          v@105 := move @SliceIndexShared<'_, i32>(move v@104, copy v@56);
          v@55 := copy *(v@105);
          v@54 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@55);
          drop v@55;
          v@53 := move libcrux_kyber::compress::compress_ciphertext_coefficient((5: u8 : u8), move v@54);
          drop v@54;
          coefficient8^52 := cast<i32,u8> move v@53;
          drop v@53;
          fake_read coefficient8^52;
          drop v@56;
          v@63 := copy coefficient2^22;
          v@64 := copy coefficient1^17;
          v@65 := copy coefficient4^32;
          v@66 := copy coefficient3^27;
          v@67 := copy coefficient5^37;
          v@68 := copy coefficient7^47;
          v@69 := copy coefficient6^42;
          v@70 := copy coefficient8^52;
          v@62 := move libcrux_kyber::serialize::compress_coefficients_5(move v@63, move v@64, move v@65, move v@66, move v@67, move v@68, move v@69, move v@70);
          drop v@70;
          drop v@69;
          drop v@68;
          drop v@67;
          drop v@66;
          drop v@65;
          drop v@64;
          drop v@63;
          fake_read v@62;
          coef1^57 := copy (v@62).0;
          coef2^58 := copy (v@62).1;
          coef3^59 := copy (v@62).2;
          coef4^60 := copy (v@62).3;
          coef5^61 := copy (v@62).4;
          drop v@62;
          v@71 := copy coef1^57;
          v@73 := copy i^4;
          v@72 := (5: usize : usize) * move v@73;
          drop v@73;
          v@102 := &mut serialized^2;
          v@103 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@102, copy v@72);
          *(v@103) := move v@71;
          drop v@71;
          drop v@72;
          v@74 := copy coef2^58;
          v@77 := copy i^4;
          v@76 := (5: usize : usize) * move v@77;
          drop v@77;
          v@75 := move v@76 + (1: usize : usize);
          drop v@76;
          v@100 := &mut serialized^2;
          v@101 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@100, copy v@75);
          *(v@101) := move v@74;
          drop v@74;
          drop v@75;
          v@78 := copy coef3^59;
          v@81 := copy i^4;
          v@80 := (5: usize : usize) * move v@81;
          drop v@81;
          v@79 := move v@80 + (2: usize : usize);
          drop v@80;
          v@98 := &mut serialized^2;
          v@99 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@98, copy v@79);
          *(v@99) := move v@78;
          drop v@78;
          drop v@79;
          v@82 := copy coef4^60;
          v@85 := copy i^4;
          v@84 := (5: usize : usize) * move v@85;
          drop v@85;
          v@83 := move v@84 + (3: usize : usize);
          drop v@84;
          v@96 := &mut serialized^2;
          v@97 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@96, copy v@83);
          *(v@97) := move v@82;
          drop v@82;
          drop v@83;
          v@86 := copy coef5^61;
          v@89 := copy i^4;
          v@88 := (5: usize : usize) * move v@89;
          drop v@89;
          v@87 := move v@88 + (4: usize : usize);
          drop v@88;
          v@94 := &mut serialized^2;
          v@95 := move @ArrayIndexMut<'_, u8, OUT_LEN>(move v@94, copy v@87);
          *(v@95) := move v@86;
          drop v@86;
          drop v@87;
          v@91 := ();
          v@16 := move v@91;
          drop coef5^61;
          drop coef4^60;
          drop coef3^59;
          drop coef2^58;
          drop coef1^57;
          drop coefficient8^52;
          drop coefficient7^47;
          drop coefficient6^42;
          drop coefficient5^37;
          drop coefficient4^32;
          drop coefficient3^27;
          drop coefficient2^22;
          drop coefficient1^17;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@92 := ();
          v@11 := move v@92;
          drop coefficients^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@93 := ();
          v@10 := move v@93;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@90 := ();
    v@3 := move v@90;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy serialized^2;
    drop serialized^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, i32, 256: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, i32, 256>
Visiting call: core::slice::{@Slice<T>}::chunks_exact<i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<i32>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, i32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, i32>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: @SliceIndexShared<'_, i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, i32>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_ciphertext_coefficient
--> name: libcrux_kyber::compress::compress_ciphertext_coefficient
--> args: u8 ++ u16, ret: i32
Visiting call: libcrux_kyber::serialize::compress_coefficients_5
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::compress_coefficients_5
--> name: libcrux_kyber::serialize::compress_coefficients_5
--> args: u8 ++ u8 ++ u8 ++ u8 ++ u8 ++ u8 ++ u8 ++ u8, ret: (u8, u8, u8, u8, u8)
253/465
Visiting function: libcrux_kyber::serialize::compress_then_serialize_ring_element_v
  fn libcrux_kyber::serialize::compress_then_serialize_ring_element_v<COMPRESSION_FACTOR, OUT_LEN>(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> @Array<u8, OUT_LEN>  
{
    v@0 : @Array<u8, OUT_LEN>;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@2 : u32;
    v@3 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@4 : libcrux_kyber::arithmetic::PolynomialRingElement;

    v@2 := cast<usize,u32> COMPRESSION_FACTOR;
    fake_read v@2;
    switch (copy v@2) {
    | 4: u32 => {
        v@3 := copy re^1;
        v@0 := move libcrux_kyber::serialize::compress_then_serialize_4<OUT_LEN>(move v@3);
        drop v@3
      }
    | 5: u32 => {
        v@4 := copy re^1;
        v@0 := move libcrux_kyber::serialize::compress_then_serialize_5<OUT_LEN>(move v@4);
        drop v@4
      }
      _ => {
        panic
      }
    };
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::serialize::compress_then_serialize_4<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::serialize::compress_then_serialize_4<@>
--> name: libcrux_kyber::serialize::compress_then_serialize_4
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: @Array<u8, C@0>
Visiting call: libcrux_kyber::serialize::compress_then_serialize_5<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::serialize::compress_then_serialize_5<@>
--> name: libcrux_kyber::serialize::compress_then_serialize_5
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: @Array<u8, C@0>
254/465
Visiting opaque function: core::array::{@Array<T, N>#23}::as_slice
  opaque fn core::array::{@Array<T, N>#23}::as_slice<0, T, N>(&0 (@Array<T, N>)) -> &0 (@Slice<T>)
255/465
Visiting function: libcrux_kyber::ind_cpa::encrypt
  fn libcrux_kyber::ind_cpa::encrypt<0, 1, K, CIPHERTEXT_SIZE, T_AS_NTT_ENCODED_SIZE, C1_LEN, C2_LEN, U_COMPRESSION_FACTOR, V_COMPRESSION_FACTOR, BLOCK_LEN, ETA1, ETA1_RANDOMNESS_SIZE, ETA2, ETA2_RANDOMNESS_SIZE>(public_key^1 : &0 (@Slice<u8>), message^2 : @Array<u8, 32: usize>, randomness^3 : &1 (@Slice<u8>)) -> @Array<u8, CIPHERTEXT_SIZE>  
{
    v@0 : @Array<u8, CIPHERTEXT_SIZE>;
    public_key^1 : &'_ (@Slice<u8>);
    message^2 : @Array<u8, 32: usize>;
    randomness^3 : &'_ (@Slice<u8>);
    t_as_ntt^4 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@5 : &'_ (@Slice<u8>);
    seed^6 : &'_ (@Slice<u8>);
    v@7 : &'_ (@Slice<u8>);
    v@8 : &'_ (@Slice<u8>);
    v@9 : core::ops::range::RangeFrom<usize>;
    A_transpose^10 : @Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>;
    v@11 : @Array<u8, 34: usize>;
    v@12 : &'_ (@Slice<u8>);
    prf_input^13 : @Array<u8, 33: usize>;
    v@14 : &'_ (@Slice<u8>);
    r_as_ntt^15 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    domain_separator^16 : u8;
    v@17 : (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, u8);
    v@18 : @Array<u8, 33: usize>;
    error_1^19 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@20 : &'_ mut (@Array<u8, 33: usize>);
    v@21 : &'_ mut (@Array<u8, 33: usize>);
    v@22 : &'_ mut (u8);
    v@23 : &'_ mut (u8);
    v@24 : u8;
    v@25 : usize;
    prf_output^26 : @Array<u8, ETA2_RANDOMNESS_SIZE>;
    v@27 : &'_ (@Slice<u8>);
    v@28 : &'_ (@Array<u8, 33: usize>);
    v@29 : &'_ (@Array<u8, 33: usize>);
    error_2^30 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@31 : &'_ (@Slice<u8>);
    v@32 : &'_ (@Array<u8, ETA2_RANDOMNESS_SIZE>);
    v@33 : &'_ (@Array<u8, ETA2_RANDOMNESS_SIZE>);
    u^34 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@35 : &'_ (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    v@36 : &'_ (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>, K>);
    v@37 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@38 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@39 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@40 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    message_as_ring_element^41 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@42 : @Array<u8, 32: usize>;
    v^43 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@44 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@45 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@46 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@47 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@48 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@49 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@50 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@51 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    c1^52 : @Array<u8, C1_LEN>;
    v@53 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    c2^54 : @Array<u8, C2_LEN>;
    v@55 : libcrux_kyber::arithmetic::PolynomialRingElement;
    ciphertext^56 : @Array<u8, CIPHERTEXT_SIZE>;
    v@57 : &'_ (@Slice<u8>);
    v@58 : &'_ (@Array<u8, C1_LEN>);
    v@59 : &'_ (@Array<u8, C1_LEN>);
    v@60 : ();
    v@61 : &'_ mut (@Slice<u8>);
    v@62 : &'_ mut (@Slice<u8>);
    v@63 : &'_ mut (@Array<u8, CIPHERTEXT_SIZE>);
    v@64 : core::ops::range::RangeFrom<usize>;
    v@65 : &'_ (@Slice<u8>);
    v@66 : &'_ (@Slice<u8>);
    v@67 : &'_ (@Array<u8, C2_LEN>);
    v@68 : &'_ mut (@Array<u8, 33: usize>);
    v@69 : &'_ mut (u8);

    v@5 := &*(public_key^1);
    t_as_ntt^4 := move libcrux_kyber::ind_cpa::deserialize_public_key<K, T_AS_NTT_ENCODED_SIZE>(move v@5);
    drop v@5;
    fake_read t_as_ntt^4;
    v@8 := &*(public_key^1);
    v@9 := core::ops::range::RangeFrom { start = T_AS_NTT_ENCODED_SIZE; };
    v@7 := move core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]::index(move v@8, move v@9);
    drop v@9;
    drop v@8;
    seed^6 := &*(v@7);
    fake_read seed^6;
    v@12 := &*(seed^6);
    v@11 := move libcrux_kyber::ind_cpa::into_padded_array<34: usize>(move v@12);
    drop v@12;
    A_transpose^10 := move libcrux_kyber::matrix::sample_matrix_A<K>(move v@11, (false : bool));
    drop v@11;
    fake_read A_transpose^10;
    v@14 := &*(randomness^3);
    prf_input^13 := move libcrux_kyber::ind_cpa::into_padded_array<33: usize>(move v@14);
    drop v@14;
    fake_read prf_input^13;
    v@18 := copy prf_input^13;
    v@17 := move libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<K, ETA1, ETA1_RANDOMNESS_SIZE>(move v@18, (0: u8 : u8));
    drop v@18;
    fake_read v@17;
    r_as_ntt^15 := copy (v@17).0;
    domain_separator^16 := copy (v@17).1;
    drop v@17;
    v@21 := &mut prf_input^13;
    v@20 := &two-phase *(v@21);
    v@23 := &mut domain_separator^16;
    v@22 := &two-phase *(v@23);
    error_1^19 := move libcrux_kyber::ind_cpa::sample_ring_element_cbd<K, ETA2_RANDOMNESS_SIZE, ETA2>(move v@20, move v@22);
    drop v@22;
    drop v@20;
    fake_read error_1^19;
    drop v@23;
    drop v@21;
    v@24 := copy domain_separator^16;
    v@25 := (32: usize : usize);
    v@68 := &mut prf_input^13;
    v@69 := move @ArrayIndexMut<'_, u8, 33: usize>(move v@68, copy v@25);
    *(v@69) := move v@24;
    drop v@24;
    drop v@25;
    v@29 := &prf_input^13;
    v@28 := &*(v@29);
    v@27 := move @ArrayToSliceShared<'_, u8, 33: usize>(move v@28);
    drop v@28;
    prf_output^26 := move libcrux_kyber::hash_functions::PRF<ETA2_RANDOMNESS_SIZE>(move v@27);
    drop v@27;
    fake_read prf_output^26;
    drop v@29;
    v@33 := &prf_output^26;
    v@32 := &*(v@33);
    v@31 := move @ArrayToSliceShared<'_, u8, ETA2_RANDOMNESS_SIZE>(move v@32);
    drop v@32;
    error_2^30 := move libcrux_kyber::sampling::sample_from_binomial_distribution<ETA2>(move v@31);
    drop v@31;
    fake_read error_2^30;
    drop v@33;
    v@36 := &A_transpose^10;
    v@35 := &*(v@36);
    v@38 := &r_as_ntt^15;
    v@37 := &*(v@38);
    v@40 := &error_1^19;
    v@39 := &*(v@40);
    u^34 := move libcrux_kyber::matrix::compute_vector_u<K>(move v@35, move v@37, move v@39);
    drop v@39;
    drop v@37;
    drop v@35;
    fake_read u^34;
    drop v@40;
    drop v@38;
    drop v@36;
    v@42 := copy message^2;
    message_as_ring_element^41 := move libcrux_kyber::serialize::deserialize_then_decompress_message(move v@42);
    drop v@42;
    fake_read message_as_ring_element^41;
    v@45 := &t_as_ntt^4;
    v@44 := &*(v@45);
    v@47 := &r_as_ntt^15;
    v@46 := &*(v@47);
    v@49 := &error_2^30;
    v@48 := &*(v@49);
    v@51 := &message_as_ring_element^41;
    v@50 := &*(v@51);
    v^43 := move libcrux_kyber::matrix::compute_ring_element_v<K>(move v@44, move v@46, move v@48, move v@50);
    drop v@50;
    drop v@48;
    drop v@46;
    drop v@44;
    fake_read v^43;
    drop v@51;
    drop v@49;
    drop v@47;
    drop v@45;
    v@53 := copy u^34;
    c1^52 := move libcrux_kyber::ind_cpa::compress_then_serialize_u<K, C1_LEN, U_COMPRESSION_FACTOR, BLOCK_LEN>(move v@53);
    drop v@53;
    fake_read c1^52;
    v@55 := copy v^43;
    c2^54 := move libcrux_kyber::serialize::compress_then_serialize_ring_element_v<V_COMPRESSION_FACTOR, C2_LEN>(move v@55);
    drop v@55;
    fake_read c2^54;
    v@59 := &c1^52;
    v@58 := &*(v@59);
    v@57 := move @ArrayToSliceShared<'_, u8, C1_LEN>(move v@58);
    drop v@58;
    ciphertext^56 := move libcrux_kyber::ind_cpa::into_padded_array<CIPHERTEXT_SIZE>(move v@57);
    drop v@57;
    fake_read ciphertext^56;
    drop v@59;
    v@63 := &mut ciphertext^56;
    v@64 := core::ops::range::RangeFrom { start = C1_LEN; };
    v@62 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, CIPHERTEXT_SIZE>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut(move v@63, move v@64);
    v@61 := &two-phase *(v@62);
    drop v@64;
    drop v@63;
    v@67 := &c2^54;
    v@66 := move core::array::{@Array<T, N>#23}::as_slice<u8, C2_LEN>(move v@67);
    v@65 := &*(v@66);
    drop v@67;
    v@60 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@61, move v@65);
    drop v@65;
    drop v@61;
    drop v@66;
    drop v@62;
    drop v@60;
    v@0 := copy ciphertext^56;
    drop ciphertext^56;
    drop c2^54;
    drop c1^52;
    drop v^43;
    drop message_as_ring_element^41;
    drop u^34;
    drop error_2^30;
    drop prf_output^26;
    drop error_1^19;
    drop domain_separator^16;
    drop r_as_ntt^15;
    drop prf_input^13;
    drop A_transpose^10;
    drop v@7;
    drop seed^6;
    drop t_as_ntt^4;
    return
  }
Visiting call: libcrux_kyber::ind_cpa::deserialize_public_key<C@0, C@2>
is_array_map: false
--> 0 type_args, 2 const_generics
--> 0 type_args, 2 const_generics
--> pattern: libcrux_kyber::ind_cpa::deserialize_public_key<@, @>
--> name: libcrux_kyber::ind_cpa::deserialize_public_key
--> args: &'0_0 (@Slice<u8>), ret: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
Visiting call: core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::ops::index::Index<[u8], core::ops::range::RangeFrom<usize>>::index
Visiting call: libcrux_kyber::ind_cpa::into_padded_array<34: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::into_padded_array<34>
--> name: libcrux_kyber::ind_cpa::into_padded_array
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: libcrux_kyber::matrix::sample_matrix_A<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::matrix::sample_matrix_A<@>
--> name: libcrux_kyber::matrix::sample_matrix_A
--> args: @Array<u8, 34: usize> ++ bool, ret: @Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, C@0>
Visiting call: libcrux_kyber::ind_cpa::into_padded_array<33: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::into_padded_array<33>
--> name: libcrux_kyber::ind_cpa::into_padded_array
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<C@0, C@8, C@9>
is_array_map: false
--> 0 type_args, 3 const_generics
--> 0 type_args, 3 const_generics
--> pattern: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt<@, @, @>
--> name: libcrux_kyber::ind_cpa::sample_vector_cbd_then_ntt
--> args: @Array<u8, 33: usize> ++ u8, ret: (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, u8)
Visiting call: libcrux_kyber::ind_cpa::sample_ring_element_cbd<C@0, C@11, C@10>
is_array_map: false
--> 0 type_args, 3 const_generics
--> 0 type_args, 3 const_generics
--> pattern: libcrux_kyber::ind_cpa::sample_ring_element_cbd<@, @, @>
--> name: libcrux_kyber::ind_cpa::sample_ring_element_cbd
--> args: &'0_0 mut (@Array<u8, 33: usize>) ++ &'0_1 mut (u8), ret: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
Visiting call: @ArrayToSliceShared<'_, u8, 33: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 33>
Visiting call: libcrux_kyber::hash_functions::PRF<C@11>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::hash_functions::PRF<@>
--> name: libcrux_kyber::hash_functions::PRF
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: @ArrayToSliceShared<'_, u8, C@11>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::sampling::sample_from_binomial_distribution<C@10>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::sampling::sample_from_binomial_distribution<@>
--> name: libcrux_kyber::sampling::sample_from_binomial_distribution
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::matrix::compute_vector_u<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::matrix::compute_vector_u<@>
--> name: libcrux_kyber::matrix::compute_vector_u
--> args: &'0_0 (@Array<@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, C@0>) ++ &'0_1 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>) ++ &'0_2 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>), ret: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
Visiting call: libcrux_kyber::serialize::deserialize_then_decompress_message
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_then_decompress_message
--> name: libcrux_kyber::serialize::deserialize_then_decompress_message
--> args: @Array<u8, 32: usize>, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::matrix::compute_ring_element_v<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::matrix::compute_ring_element_v<@>
--> name: libcrux_kyber::matrix::compute_ring_element_v
--> args: &'0_0 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>) ++ &'0_1 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>) ++ &'0_2 (libcrux_kyber::arithmetic::PolynomialRingElement) ++ &'0_3 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ind_cpa::compress_then_serialize_u<C@0, C@3, C@5, C@7>
is_array_map: false
--> 0 type_args, 4 const_generics
--> 0 type_args, 4 const_generics
--> pattern: libcrux_kyber::ind_cpa::compress_then_serialize_u<@, @, @, @>
--> name: libcrux_kyber::ind_cpa::compress_then_serialize_u
--> args: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>, ret: @Array<u8, C@1>
Visiting call: libcrux_kyber::serialize::compress_then_serialize_ring_element_v<C@6, C@4>
is_array_map: false
--> 0 type_args, 2 const_generics
--> 0 type_args, 2 const_generics
--> pattern: libcrux_kyber::serialize::compress_then_serialize_ring_element_v<@, @>
--> name: libcrux_kyber::serialize::compress_then_serialize_ring_element_v
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: @Array<u8, C@1>
Visiting call: @ArrayToSliceShared<'_, u8, C@3>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::ind_cpa::into_padded_array<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::into_padded_array<@>
--> name: libcrux_kyber::ind_cpa::into_padded_array
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, C@1>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::RangeFrom<usize>>::index_mut
Visiting call: core::array::{@Array<T, N>#23}::as_slice<u8, C@4>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: core::array::{[@T; @N]}::as_slice<u8, @>
--> name: core::array::{@Array<T, N>#23}::as_slice
--> args: &'0_0 (@Array<T@0, C@0>), ret: &'0_0 (@Slice<T@0>)
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
256/465
Visiting function: libcrux_kyber::serialize::decompress_coefficients_10
  fn libcrux_kyber::serialize::decompress_coefficients_10(byte2^1 : i32, byte1^2 : i32, byte3^3 : i32, byte4^4 : i32, byte5^5 : i32) -> (i32, i32, i32, i32)  
{
    v@0 : (i32, i32, i32, i32);
    byte2^1 : i32;
    byte1^2 : i32;
    byte3^3 : i32;
    byte4^4 : i32;
    byte5^5 : i32;
    coefficient1^6 : i32;
    v@7 : i32;
    v@8 : i32;
    v@9 : i32;
    v@10 : i32;
    v@11 : i32;
    coefficient2^12 : i32;
    v@13 : i32;
    v@14 : i32;
    v@15 : i32;
    v@16 : i32;
    v@17 : i32;
    coefficient3^18 : i32;
    v@19 : i32;
    v@20 : i32;
    v@21 : i32;
    v@22 : i32;
    v@23 : i32;
    coefficient4^24 : i32;
    v@25 : i32;
    v@26 : i32;
    v@27 : i32;
    v@28 : i32;
    v@29 : i32;
    v@30 : i32;
    v@31 : i32;
    v@32 : i32;

    v@9 := copy byte2^1;
    v@8 := move v@9 & (3: i32 : i32);
    drop v@9;
    v@7 := move v@8 << (8: i32 : i32);
    drop v@8;
    v@11 := copy byte1^2;
    v@10 := move v@11 & (255: i32 : i32);
    drop v@11;
    coefficient1^6 := move v@7 | move v@10;
    drop v@10;
    drop v@7;
    fake_read coefficient1^6;
    v@15 := copy byte3^3;
    v@14 := move v@15 & (15: i32 : i32);
    drop v@15;
    v@13 := move v@14 << (6: i32 : i32);
    drop v@14;
    v@17 := copy byte2^1;
    v@16 := move v@17 >> (2: i32 : i32);
    drop v@17;
    coefficient2^12 := move v@13 | move v@16;
    drop v@16;
    drop v@13;
    fake_read coefficient2^12;
    v@21 := copy byte4^4;
    v@20 := move v@21 & (63: i32 : i32);
    drop v@21;
    v@19 := move v@20 << (4: i32 : i32);
    drop v@20;
    v@23 := copy byte3^3;
    v@22 := move v@23 >> (4: i32 : i32);
    drop v@23;
    coefficient3^18 := move v@19 | move v@22;
    drop v@22;
    drop v@19;
    fake_read coefficient3^18;
    v@26 := copy byte5^5;
    v@25 := move v@26 << (2: i32 : i32);
    drop v@26;
    v@28 := copy byte4^4;
    v@27 := move v@28 >> (6: i32 : i32);
    drop v@28;
    coefficient4^24 := move v@25 | move v@27;
    drop v@27;
    drop v@25;
    fake_read coefficient4^24;
    v@29 := copy coefficient1^6;
    v@30 := copy coefficient2^12;
    v@31 := copy coefficient3^18;
    v@32 := copy coefficient4^24;
    v@0 := (move v@29, move v@30, move v@31, move v@32);
    drop v@32;
    drop v@31;
    drop v@30;
    drop v@29;
    drop coefficient4^24;
    drop coefficient3^18;
    drop coefficient2^12;
    drop coefficient1^6;
    return
  }
257/465
Visiting function: libcrux_kyber::serialize::deserialize_then_decompress_10
  fn libcrux_kyber::serialize::deserialize_then_decompress_10<0>(serialized^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^1 : &'_ (@Slice<u8>);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::ChunksExact<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (@Slice<u8>)>;
    v@12 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    bytes^14 : &'_ (@Slice<u8>);
    v@15 : ();
    byte1^16 : i32;
    v@17 : u8;
    v@18 : usize;
    byte2^19 : i32;
    v@20 : u8;
    v@21 : usize;
    byte3^22 : i32;
    v@23 : u8;
    v@24 : usize;
    byte4^25 : i32;
    v@26 : u8;
    v@27 : usize;
    byte5^28 : i32;
    v@29 : u8;
    v@30 : usize;
    coefficient1^31 : i32;
    coefficient2^32 : i32;
    coefficient3^33 : i32;
    coefficient4^34 : i32;
    v@35 : (i32, i32, i32, i32);
    v@36 : i32;
    v@37 : i32;
    v@38 : i32;
    v@39 : i32;
    v@40 : i32;
    v@41 : i32;
    v@42 : i32;
    v@43 : usize;
    v@44 : usize;
    v@45 : i32;
    v@46 : i32;
    v@47 : usize;
    v@48 : usize;
    v@49 : usize;
    v@50 : i32;
    v@51 : i32;
    v@52 : usize;
    v@53 : usize;
    v@54 : usize;
    v@55 : i32;
    v@56 : i32;
    v@57 : usize;
    v@58 : usize;
    v@59 : usize;
    v@60 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@61 : ();
    v@62 : ();
    v@63 : ();
    v@64 : ();
    v@65 : &'_ mut (@Array<i32, 256: usize>);
    v@66 : &'_ mut (i32);
    v@67 : &'_ mut (@Array<i32, 256: usize>);
    v@68 : &'_ mut (i32);
    v@69 : &'_ mut (@Array<i32, 256: usize>);
    v@70 : &'_ mut (i32);
    v@71 : &'_ mut (@Array<i32, 256: usize>);
    v@72 : &'_ mut (i32);
    v@73 : &'_ (@Slice<u8>);
    v@74 : &'_ (u8);
    v@75 : &'_ (@Slice<u8>);
    v@76 : &'_ (u8);
    v@77 : &'_ (@Slice<u8>);
    v@78 : &'_ (u8);
    v@79 : &'_ (@Slice<u8>);
    v@80 : &'_ (u8);
    v@81 : &'_ (@Slice<u8>);
    v@82 : &'_ (u8);

    v@60 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    re^2 := move v@60;
    fake_read re^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@7 := &*(serialized^1);
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, (5: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          bytes^14 := copy (v@11 as core::option::Option::Some).0;
          v@18 := (0: usize : usize);
          v@81 := &*(bytes^14);
          v@82 := move @SliceIndexShared<'_, u8>(move v@81, copy v@18);
          v@17 := copy *(v@82);
          byte1^16 := cast<u8,i32> move v@17;
          drop v@17;
          fake_read byte1^16;
          drop v@18;
          v@21 := (1: usize : usize);
          v@79 := &*(bytes^14);
          v@80 := move @SliceIndexShared<'_, u8>(move v@79, copy v@21);
          v@20 := copy *(v@80);
          byte2^19 := cast<u8,i32> move v@20;
          drop v@20;
          fake_read byte2^19;
          drop v@21;
          v@24 := (2: usize : usize);
          v@77 := &*(bytes^14);
          v@78 := move @SliceIndexShared<'_, u8>(move v@77, copy v@24);
          v@23 := copy *(v@78);
          byte3^22 := cast<u8,i32> move v@23;
          drop v@23;
          fake_read byte3^22;
          drop v@24;
          v@27 := (3: usize : usize);
          v@75 := &*(bytes^14);
          v@76 := move @SliceIndexShared<'_, u8>(move v@75, copy v@27);
          v@26 := copy *(v@76);
          byte4^25 := cast<u8,i32> move v@26;
          drop v@26;
          fake_read byte4^25;
          drop v@27;
          v@30 := (4: usize : usize);
          v@73 := &*(bytes^14);
          v@74 := move @SliceIndexShared<'_, u8>(move v@73, copy v@30);
          v@29 := copy *(v@74);
          byte5^28 := cast<u8,i32> move v@29;
          drop v@29;
          fake_read byte5^28;
          drop v@30;
          v@36 := copy byte2^19;
          v@37 := copy byte1^16;
          v@38 := copy byte3^22;
          v@39 := copy byte4^25;
          v@40 := copy byte5^28;
          v@35 := move libcrux_kyber::serialize::decompress_coefficients_10(move v@36, move v@37, move v@38, move v@39, move v@40);
          drop v@40;
          drop v@39;
          drop v@38;
          drop v@37;
          drop v@36;
          fake_read v@35;
          coefficient1^31 := copy (v@35).0;
          coefficient2^32 := copy (v@35).1;
          coefficient3^33 := copy (v@35).2;
          coefficient4^34 := copy (v@35).3;
          drop v@35;
          v@42 := copy coefficient1^31;
          v@41 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((10: u8 : u8), move v@42);
          drop v@42;
          v@44 := copy i^4;
          v@43 := (4: usize : usize) * move v@44;
          drop v@44;
          v@71 := &mut (re^2).coefficients;
          v@72 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@71, copy v@43);
          *(v@72) := move v@41;
          drop v@41;
          drop v@43;
          v@46 := copy coefficient2^32;
          v@45 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((10: u8 : u8), move v@46);
          drop v@46;
          v@49 := copy i^4;
          v@48 := (4: usize : usize) * move v@49;
          drop v@49;
          v@47 := move v@48 + (1: usize : usize);
          drop v@48;
          v@69 := &mut (re^2).coefficients;
          v@70 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@69, copy v@47);
          *(v@70) := move v@45;
          drop v@45;
          drop v@47;
          v@51 := copy coefficient3^33;
          v@50 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((10: u8 : u8), move v@51);
          drop v@51;
          v@54 := copy i^4;
          v@53 := (4: usize : usize) * move v@54;
          drop v@54;
          v@52 := move v@53 + (2: usize : usize);
          drop v@53;
          v@67 := &mut (re^2).coefficients;
          v@68 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@67, copy v@52);
          *(v@68) := move v@50;
          drop v@50;
          drop v@52;
          v@56 := copy coefficient4^34;
          v@55 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((10: u8 : u8), move v@56);
          drop v@56;
          v@59 := copy i^4;
          v@58 := (4: usize : usize) * move v@59;
          drop v@59;
          v@57 := move v@58 + (3: usize : usize);
          drop v@58;
          v@65 := &mut (re^2).coefficients;
          v@66 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@65, copy v@57);
          *(v@66) := move v@55;
          drop v@55;
          drop v@57;
          v@62 := ();
          v@15 := move v@62;
          drop coefficient4^34;
          drop coefficient3^33;
          drop coefficient2^32;
          drop coefficient1^31;
          drop byte5^28;
          drop byte4^25;
          drop byte3^22;
          drop byte2^19;
          drop byte1^16;
          drop v@15;
          i^4 := copy i^4 + (1: usize : usize);
          v@63 := ();
          v@10 := move v@63;
          drop bytes^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@64 := ();
          v@9 := move v@64;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@61 := ();
    v@3 := move v@61;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy re^2;
    drop re^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: libcrux_kyber::serialize::decompress_coefficients_10
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::decompress_coefficients_10
--> name: libcrux_kyber::serialize::decompress_coefficients_10
--> args: i32 ++ i32 ++ i32 ++ i32 ++ i32, ret: (i32, i32, i32, i32)
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
258/465
Visiting function: libcrux_kyber::serialize::decompress_coefficients_11
  fn libcrux_kyber::serialize::decompress_coefficients_11(byte2^1 : i32, byte1^2 : i32, byte3^3 : i32, byte5^4 : i32, byte4^5 : i32, byte6^6 : i32, byte7^7 : i32, byte9^8 : i32, byte8^9 : i32, byte10^10 : i32, byte11^11 : i32) -> (i32, i32, i32, i32, i32, i32, i32, i32)  
{
    v@0 : (i32, i32, i32, i32, i32, i32, i32, i32);
    byte2^1 : i32;
    byte1^2 : i32;
    byte3^3 : i32;
    byte5^4 : i32;
    byte4^5 : i32;
    byte6^6 : i32;
    byte7^7 : i32;
    byte9^8 : i32;
    byte8^9 : i32;
    byte10^10 : i32;
    byte11^11 : i32;
    coefficient1^12 : i32;
    v@13 : i32;
    v@14 : i32;
    v@15 : i32;
    v@16 : i32;
    coefficient2^17 : i32;
    v@18 : i32;
    v@19 : i32;
    v@20 : i32;
    v@21 : i32;
    v@22 : i32;
    coefficient3^23 : i32;
    v@24 : i32;
    v@25 : i32;
    v@26 : i32;
    v@27 : i32;
    v@28 : i32;
    v@29 : i32;
    v@30 : i32;
    v@31 : i32;
    coefficient4^32 : i32;
    v@33 : i32;
    v@34 : i32;
    v@35 : i32;
    v@36 : i32;
    v@37 : i32;
    coefficient5^38 : i32;
    v@39 : i32;
    v@40 : i32;
    v@41 : i32;
    v@42 : i32;
    v@43 : i32;
    coefficient6^44 : i32;
    v@45 : i32;
    v@46 : i32;
    v@47 : i32;
    v@48 : i32;
    v@49 : i32;
    v@50 : i32;
    v@51 : i32;
    v@52 : i32;
    coefficient7^53 : i32;
    v@54 : i32;
    v@55 : i32;
    v@56 : i32;
    v@57 : i32;
    v@58 : i32;
    coefficient8^59 : i32;
    v@60 : i32;
    v@61 : i32;
    v@62 : i32;
    v@63 : i32;
    v@64 : i32;
    v@65 : i32;
    v@66 : i32;
    v@67 : i32;
    v@68 : i32;
    v@69 : i32;
    v@70 : i32;
    v@71 : i32;

    v@15 := copy byte2^1;
    v@14 := move v@15 & (7: i32 : i32);
    drop v@15;
    v@13 := move v@14 << (8: i32 : i32);
    drop v@14;
    v@16 := copy byte1^2;
    coefficient1^12 := move v@13 | move v@16;
    drop v@16;
    drop v@13;
    fake_read coefficient1^12;
    v@20 := copy byte3^3;
    v@19 := move v@20 & (63: i32 : i32);
    drop v@20;
    v@18 := move v@19 << (5: i32 : i32);
    drop v@19;
    v@22 := copy byte2^1;
    v@21 := move v@22 >> (3: i32 : i32);
    drop v@22;
    coefficient2^17 := move v@18 | move v@21;
    drop v@21;
    drop v@18;
    fake_read coefficient2^17;
    v@27 := copy byte5^4;
    v@26 := move v@27 & (1: i32 : i32);
    drop v@27;
    v@25 := move v@26 << (10: i32 : i32);
    drop v@26;
    v@29 := copy byte4^5;
    v@28 := move v@29 << (2: i32 : i32);
    drop v@29;
    v@24 := move v@25 | move v@28;
    drop v@28;
    drop v@25;
    v@31 := copy byte3^3;
    v@30 := move v@31 >> (6: i32 : i32);
    drop v@31;
    coefficient3^23 := move v@24 | move v@30;
    drop v@30;
    drop v@24;
    fake_read coefficient3^23;
    v@35 := copy byte6^6;
    v@34 := move v@35 & (15: i32 : i32);
    drop v@35;
    v@33 := move v@34 << (7: i32 : i32);
    drop v@34;
    v@37 := copy byte5^4;
    v@36 := move v@37 >> (1: i32 : i32);
    drop v@37;
    coefficient4^32 := move v@33 | move v@36;
    drop v@36;
    drop v@33;
    fake_read coefficient4^32;
    v@41 := copy byte7^7;
    v@40 := move v@41 & (127: i32 : i32);
    drop v@41;
    v@39 := move v@40 << (4: i32 : i32);
    drop v@40;
    v@43 := copy byte6^6;
    v@42 := move v@43 >> (4: i32 : i32);
    drop v@43;
    coefficient5^38 := move v@39 | move v@42;
    drop v@42;
    drop v@39;
    fake_read coefficient5^38;
    v@48 := copy byte9^8;
    v@47 := move v@48 & (3: i32 : i32);
    drop v@48;
    v@46 := move v@47 << (9: i32 : i32);
    drop v@47;
    v@50 := copy byte8^9;
    v@49 := move v@50 << (1: i32 : i32);
    drop v@50;
    v@45 := move v@46 | move v@49;
    drop v@49;
    drop v@46;
    v@52 := copy byte7^7;
    v@51 := move v@52 >> (7: i32 : i32);
    drop v@52;
    coefficient6^44 := move v@45 | move v@51;
    drop v@51;
    drop v@45;
    fake_read coefficient6^44;
    v@56 := copy byte10^10;
    v@55 := move v@56 & (31: i32 : i32);
    drop v@56;
    v@54 := move v@55 << (6: i32 : i32);
    drop v@55;
    v@58 := copy byte9^8;
    v@57 := move v@58 >> (2: i32 : i32);
    drop v@58;
    coefficient7^53 := move v@54 | move v@57;
    drop v@57;
    drop v@54;
    fake_read coefficient7^53;
    v@61 := copy byte11^11;
    v@60 := move v@61 << (3: i32 : i32);
    drop v@61;
    v@63 := copy byte10^10;
    v@62 := move v@63 >> (5: i32 : i32);
    drop v@63;
    coefficient8^59 := move v@60 | move v@62;
    drop v@62;
    drop v@60;
    fake_read coefficient8^59;
    v@64 := copy coefficient1^12;
    v@65 := copy coefficient2^17;
    v@66 := copy coefficient3^23;
    v@67 := copy coefficient4^32;
    v@68 := copy coefficient5^38;
    v@69 := copy coefficient6^44;
    v@70 := copy coefficient7^53;
    v@71 := copy coefficient8^59;
    v@0 := (move v@64, move v@65, move v@66, move v@67, move v@68, move v@69, move v@70, move v@71);
    drop v@71;
    drop v@70;
    drop v@69;
    drop v@68;
    drop v@67;
    drop v@66;
    drop v@65;
    drop v@64;
    drop coefficient8^59;
    drop coefficient7^53;
    drop coefficient6^44;
    drop coefficient5^38;
    drop coefficient4^32;
    drop coefficient3^23;
    drop coefficient2^17;
    drop coefficient1^12;
    return
  }
259/465
Visiting function: libcrux_kyber::serialize::deserialize_then_decompress_11
  fn libcrux_kyber::serialize::deserialize_then_decompress_11<0>(serialized^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^1 : &'_ (@Slice<u8>);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::ChunksExact<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (@Slice<u8>)>;
    v@12 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    bytes^14 : &'_ (@Slice<u8>);
    v@15 : ();
    byte1^16 : i32;
    v@17 : u8;
    v@18 : usize;
    byte2^19 : i32;
    v@20 : u8;
    v@21 : usize;
    byte3^22 : i32;
    v@23 : u8;
    v@24 : usize;
    byte4^25 : i32;
    v@26 : u8;
    v@27 : usize;
    byte5^28 : i32;
    v@29 : u8;
    v@30 : usize;
    byte6^31 : i32;
    v@32 : u8;
    v@33 : usize;
    byte7^34 : i32;
    v@35 : u8;
    v@36 : usize;
    byte8^37 : i32;
    v@38 : u8;
    v@39 : usize;
    byte9^40 : i32;
    v@41 : u8;
    v@42 : usize;
    byte10^43 : i32;
    v@44 : u8;
    v@45 : usize;
    byte11^46 : i32;
    v@47 : u8;
    v@48 : usize;
    coefficient1^49 : i32;
    coefficient2^50 : i32;
    coefficient3^51 : i32;
    coefficient4^52 : i32;
    coefficient5^53 : i32;
    coefficient6^54 : i32;
    coefficient7^55 : i32;
    coefficient8^56 : i32;
    v@57 : (i32, i32, i32, i32, i32, i32, i32, i32);
    v@58 : i32;
    v@59 : i32;
    v@60 : i32;
    v@61 : i32;
    v@62 : i32;
    v@63 : i32;
    v@64 : i32;
    v@65 : i32;
    v@66 : i32;
    v@67 : i32;
    v@68 : i32;
    v@69 : i32;
    v@70 : i32;
    v@71 : usize;
    v@72 : usize;
    v@73 : i32;
    v@74 : i32;
    v@75 : usize;
    v@76 : usize;
    v@77 : usize;
    v@78 : i32;
    v@79 : i32;
    v@80 : usize;
    v@81 : usize;
    v@82 : usize;
    v@83 : i32;
    v@84 : i32;
    v@85 : usize;
    v@86 : usize;
    v@87 : usize;
    v@88 : i32;
    v@89 : i32;
    v@90 : usize;
    v@91 : usize;
    v@92 : usize;
    v@93 : i32;
    v@94 : i32;
    v@95 : usize;
    v@96 : usize;
    v@97 : usize;
    v@98 : i32;
    v@99 : i32;
    v@100 : usize;
    v@101 : usize;
    v@102 : usize;
    v@103 : i32;
    v@104 : i32;
    v@105 : usize;
    v@106 : usize;
    v@107 : usize;
    v@108 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@109 : ();
    v@110 : ();
    v@111 : ();
    v@112 : ();
    v@113 : &'_ mut (@Array<i32, 256: usize>);
    v@114 : &'_ mut (i32);
    v@115 : &'_ mut (@Array<i32, 256: usize>);
    v@116 : &'_ mut (i32);
    v@117 : &'_ mut (@Array<i32, 256: usize>);
    v@118 : &'_ mut (i32);
    v@119 : &'_ mut (@Array<i32, 256: usize>);
    v@120 : &'_ mut (i32);
    v@121 : &'_ mut (@Array<i32, 256: usize>);
    v@122 : &'_ mut (i32);
    v@123 : &'_ mut (@Array<i32, 256: usize>);
    v@124 : &'_ mut (i32);
    v@125 : &'_ mut (@Array<i32, 256: usize>);
    v@126 : &'_ mut (i32);
    v@127 : &'_ mut (@Array<i32, 256: usize>);
    v@128 : &'_ mut (i32);
    v@129 : &'_ (@Slice<u8>);
    v@130 : &'_ (u8);
    v@131 : &'_ (@Slice<u8>);
    v@132 : &'_ (u8);
    v@133 : &'_ (@Slice<u8>);
    v@134 : &'_ (u8);
    v@135 : &'_ (@Slice<u8>);
    v@136 : &'_ (u8);
    v@137 : &'_ (@Slice<u8>);
    v@138 : &'_ (u8);
    v@139 : &'_ (@Slice<u8>);
    v@140 : &'_ (u8);
    v@141 : &'_ (@Slice<u8>);
    v@142 : &'_ (u8);
    v@143 : &'_ (@Slice<u8>);
    v@144 : &'_ (u8);
    v@145 : &'_ (@Slice<u8>);
    v@146 : &'_ (u8);
    v@147 : &'_ (@Slice<u8>);
    v@148 : &'_ (u8);
    v@149 : &'_ (@Slice<u8>);
    v@150 : &'_ (u8);

    v@108 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    re^2 := move v@108;
    fake_read re^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@7 := &*(serialized^1);
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, (11: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          bytes^14 := copy (v@11 as core::option::Option::Some).0;
          v@18 := (0: usize : usize);
          v@149 := &*(bytes^14);
          v@150 := move @SliceIndexShared<'_, u8>(move v@149, copy v@18);
          v@17 := copy *(v@150);
          byte1^16 := cast<u8,i32> move v@17;
          drop v@17;
          fake_read byte1^16;
          drop v@18;
          v@21 := (1: usize : usize);
          v@147 := &*(bytes^14);
          v@148 := move @SliceIndexShared<'_, u8>(move v@147, copy v@21);
          v@20 := copy *(v@148);
          byte2^19 := cast<u8,i32> move v@20;
          drop v@20;
          fake_read byte2^19;
          drop v@21;
          v@24 := (2: usize : usize);
          v@145 := &*(bytes^14);
          v@146 := move @SliceIndexShared<'_, u8>(move v@145, copy v@24);
          v@23 := copy *(v@146);
          byte3^22 := cast<u8,i32> move v@23;
          drop v@23;
          fake_read byte3^22;
          drop v@24;
          v@27 := (3: usize : usize);
          v@143 := &*(bytes^14);
          v@144 := move @SliceIndexShared<'_, u8>(move v@143, copy v@27);
          v@26 := copy *(v@144);
          byte4^25 := cast<u8,i32> move v@26;
          drop v@26;
          fake_read byte4^25;
          drop v@27;
          v@30 := (4: usize : usize);
          v@141 := &*(bytes^14);
          v@142 := move @SliceIndexShared<'_, u8>(move v@141, copy v@30);
          v@29 := copy *(v@142);
          byte5^28 := cast<u8,i32> move v@29;
          drop v@29;
          fake_read byte5^28;
          drop v@30;
          v@33 := (5: usize : usize);
          v@139 := &*(bytes^14);
          v@140 := move @SliceIndexShared<'_, u8>(move v@139, copy v@33);
          v@32 := copy *(v@140);
          byte6^31 := cast<u8,i32> move v@32;
          drop v@32;
          fake_read byte6^31;
          drop v@33;
          v@36 := (6: usize : usize);
          v@137 := &*(bytes^14);
          v@138 := move @SliceIndexShared<'_, u8>(move v@137, copy v@36);
          v@35 := copy *(v@138);
          byte7^34 := cast<u8,i32> move v@35;
          drop v@35;
          fake_read byte7^34;
          drop v@36;
          v@39 := (7: usize : usize);
          v@135 := &*(bytes^14);
          v@136 := move @SliceIndexShared<'_, u8>(move v@135, copy v@39);
          v@38 := copy *(v@136);
          byte8^37 := cast<u8,i32> move v@38;
          drop v@38;
          fake_read byte8^37;
          drop v@39;
          v@42 := (8: usize : usize);
          v@133 := &*(bytes^14);
          v@134 := move @SliceIndexShared<'_, u8>(move v@133, copy v@42);
          v@41 := copy *(v@134);
          byte9^40 := cast<u8,i32> move v@41;
          drop v@41;
          fake_read byte9^40;
          drop v@42;
          v@45 := (9: usize : usize);
          v@131 := &*(bytes^14);
          v@132 := move @SliceIndexShared<'_, u8>(move v@131, copy v@45);
          v@44 := copy *(v@132);
          byte10^43 := cast<u8,i32> move v@44;
          drop v@44;
          fake_read byte10^43;
          drop v@45;
          v@48 := (10: usize : usize);
          v@129 := &*(bytes^14);
          v@130 := move @SliceIndexShared<'_, u8>(move v@129, copy v@48);
          v@47 := copy *(v@130);
          byte11^46 := cast<u8,i32> move v@47;
          drop v@47;
          fake_read byte11^46;
          drop v@48;
          v@58 := copy byte2^19;
          v@59 := copy byte1^16;
          v@60 := copy byte3^22;
          v@61 := copy byte5^28;
          v@62 := copy byte4^25;
          v@63 := copy byte6^31;
          v@64 := copy byte7^34;
          v@65 := copy byte9^40;
          v@66 := copy byte8^37;
          v@67 := copy byte10^43;
          v@68 := copy byte11^46;
          v@57 := move libcrux_kyber::serialize::decompress_coefficients_11(move v@58, move v@59, move v@60, move v@61, move v@62, move v@63, move v@64, move v@65, move v@66, move v@67, move v@68);
          drop v@68;
          drop v@67;
          drop v@66;
          drop v@65;
          drop v@64;
          drop v@63;
          drop v@62;
          drop v@61;
          drop v@60;
          drop v@59;
          drop v@58;
          fake_read v@57;
          coefficient1^49 := copy (v@57).0;
          coefficient2^50 := copy (v@57).1;
          coefficient3^51 := copy (v@57).2;
          coefficient4^52 := copy (v@57).3;
          coefficient5^53 := copy (v@57).4;
          coefficient6^54 := copy (v@57).5;
          coefficient7^55 := copy (v@57).6;
          coefficient8^56 := copy (v@57).7;
          drop v@57;
          v@70 := copy coefficient1^49;
          v@69 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((11: u8 : u8), move v@70);
          drop v@70;
          v@72 := copy i^4;
          v@71 := (8: usize : usize) * move v@72;
          drop v@72;
          v@127 := &mut (re^2).coefficients;
          v@128 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@127, copy v@71);
          *(v@128) := move v@69;
          drop v@69;
          drop v@71;
          v@74 := copy coefficient2^50;
          v@73 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((11: u8 : u8), move v@74);
          drop v@74;
          v@77 := copy i^4;
          v@76 := (8: usize : usize) * move v@77;
          drop v@77;
          v@75 := move v@76 + (1: usize : usize);
          drop v@76;
          v@125 := &mut (re^2).coefficients;
          v@126 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@125, copy v@75);
          *(v@126) := move v@73;
          drop v@73;
          drop v@75;
          v@79 := copy coefficient3^51;
          v@78 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((11: u8 : u8), move v@79);
          drop v@79;
          v@82 := copy i^4;
          v@81 := (8: usize : usize) * move v@82;
          drop v@82;
          v@80 := move v@81 + (2: usize : usize);
          drop v@81;
          v@123 := &mut (re^2).coefficients;
          v@124 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@123, copy v@80);
          *(v@124) := move v@78;
          drop v@78;
          drop v@80;
          v@84 := copy coefficient4^52;
          v@83 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((11: u8 : u8), move v@84);
          drop v@84;
          v@87 := copy i^4;
          v@86 := (8: usize : usize) * move v@87;
          drop v@87;
          v@85 := move v@86 + (3: usize : usize);
          drop v@86;
          v@121 := &mut (re^2).coefficients;
          v@122 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@121, copy v@85);
          *(v@122) := move v@83;
          drop v@83;
          drop v@85;
          v@89 := copy coefficient5^53;
          v@88 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((11: u8 : u8), move v@89);
          drop v@89;
          v@92 := copy i^4;
          v@91 := (8: usize : usize) * move v@92;
          drop v@92;
          v@90 := move v@91 + (4: usize : usize);
          drop v@91;
          v@119 := &mut (re^2).coefficients;
          v@120 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@119, copy v@90);
          *(v@120) := move v@88;
          drop v@88;
          drop v@90;
          v@94 := copy coefficient6^54;
          v@93 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((11: u8 : u8), move v@94);
          drop v@94;
          v@97 := copy i^4;
          v@96 := (8: usize : usize) * move v@97;
          drop v@97;
          v@95 := move v@96 + (5: usize : usize);
          drop v@96;
          v@117 := &mut (re^2).coefficients;
          v@118 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@117, copy v@95);
          *(v@118) := move v@93;
          drop v@93;
          drop v@95;
          v@99 := copy coefficient7^55;
          v@98 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((11: u8 : u8), move v@99);
          drop v@99;
          v@102 := copy i^4;
          v@101 := (8: usize : usize) * move v@102;
          drop v@102;
          v@100 := move v@101 + (6: usize : usize);
          drop v@101;
          v@115 := &mut (re^2).coefficients;
          v@116 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@115, copy v@100);
          *(v@116) := move v@98;
          drop v@98;
          drop v@100;
          v@104 := copy coefficient8^56;
          v@103 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((11: u8 : u8), move v@104);
          drop v@104;
          v@107 := copy i^4;
          v@106 := (8: usize : usize) * move v@107;
          drop v@107;
          v@105 := move v@106 + (7: usize : usize);
          drop v@106;
          v@113 := &mut (re^2).coefficients;
          v@114 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@113, copy v@105);
          *(v@114) := move v@103;
          drop v@103;
          drop v@105;
          v@110 := ();
          v@15 := move v@110;
          drop coefficient8^56;
          drop coefficient7^55;
          drop coefficient6^54;
          drop coefficient5^53;
          drop coefficient4^52;
          drop coefficient3^51;
          drop coefficient2^50;
          drop coefficient1^49;
          drop byte11^46;
          drop byte10^43;
          drop byte9^40;
          drop byte8^37;
          drop byte7^34;
          drop byte6^31;
          drop byte5^28;
          drop byte4^25;
          drop byte3^22;
          drop byte2^19;
          drop byte1^16;
          drop v@15;
          i^4 := copy i^4 + (1: usize : usize);
          v@111 := ();
          v@10 := move v@111;
          drop bytes^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@112 := ();
          v@9 := move v@112;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@109 := ();
    v@3 := move v@109;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy re^2;
    drop re^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: libcrux_kyber::serialize::decompress_coefficients_11
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::decompress_coefficients_11
--> name: libcrux_kyber::serialize::decompress_coefficients_11
--> args: i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32 ++ i32, ret: (i32, i32, i32, i32, i32, i32, i32, i32)
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
260/465
Visiting function: libcrux_kyber::serialize::deserialize_then_decompress_ring_element_u
  fn libcrux_kyber::serialize::deserialize_then_decompress_ring_element_u<0, COMPRESSION_FACTOR>(serialized^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^1 : &'_ (@Slice<u8>);
    v@2 : u32;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);

    v@2 := cast<usize,u32> COMPRESSION_FACTOR;
    fake_read v@2;
    switch (copy v@2) {
    | 10: u32 => {
        v@3 := &*(serialized^1);
        v@0 := move libcrux_kyber::serialize::deserialize_then_decompress_10(move v@3);
        drop v@3
      }
    | 11: u32 => {
        v@4 := &*(serialized^1);
        v@0 := move libcrux_kyber::serialize::deserialize_then_decompress_11(move v@4);
        drop v@4
      }
      _ => {
        panic
      }
    };
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::serialize::deserialize_then_decompress_10
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_then_decompress_10
--> name: libcrux_kyber::serialize::deserialize_then_decompress_10
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::serialize::deserialize_then_decompress_11
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_then_decompress_11
--> name: libcrux_kyber::serialize::deserialize_then_decompress_11
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
261/465
Visiting function: libcrux_kyber::ntt::ntt_at_layer_3328
  fn libcrux_kyber::ntt::ntt_at_layer_3328<0>(zeta_i^1 : &0 mut (usize), re^2 : libcrux_kyber::arithmetic::PolynomialRingElement, layer^3 : usize) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    zeta_i^1 : &'_ mut (usize);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    layer^3 : usize;
    v@4 : &'_ mut (usize);
    v@5 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@6 : usize;

    v@4 := &two-phase *(zeta_i^1);
    v@5 := copy re^2;
    v@6 := copy layer^3;
    v@0 := move libcrux_kyber::ntt::ntt_at_layer(move v@4, move v@5, move v@6, (3328: usize : usize));
    drop v@6;
    drop v@5;
    drop v@4;
    return
  }
Visiting call: libcrux_kyber::ntt::ntt_at_layer
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer
--> name: libcrux_kyber::ntt::ntt_at_layer
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
262/465
Visiting function: libcrux_kyber::ntt::ntt_vector_u
  fn libcrux_kyber::ntt::ntt_vector_u<VECTOR_U_COMPRESSION_FACTOR>(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    zeta_i^2 : usize;
    v@3 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@4 : &'_ mut (usize);
    v@5 : &'_ mut (usize);
    v@6 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@7 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@8 : &'_ mut (usize);
    v@9 : &'_ mut (usize);
    v@10 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@11 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@12 : &'_ mut (usize);
    v@13 : &'_ mut (usize);
    v@14 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@15 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@16 : &'_ mut (usize);
    v@17 : &'_ mut (usize);
    v@18 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@19 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@20 : &'_ mut (usize);
    v@21 : &'_ mut (usize);
    v@22 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@23 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@24 : &'_ mut (usize);
    v@25 : &'_ mut (usize);
    v@26 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@27 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@28 : &'_ mut (usize);
    v@29 : &'_ mut (usize);
    v@30 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@31 : ();
    v@32 : core::ops::range::Range<usize>;
    v@33 : core::ops::range::Range<usize>;
    iter^34 : core::ops::range::Range<usize>;
    v@35 : ();
    v@36 : ();
    v@37 : core::option::Option<usize>;
    v@38 : &'_ mut (core::ops::range::Range<usize>);
    v@39 : &'_ mut (core::ops::range::Range<usize>);
    i^40 : usize;
    v@41 : i32;
    v@42 : i32;
    v@43 : usize;
    v@44 : usize;
    v@45 : usize;
    v@46 : ();
    v@47 : ();
    v@48 : ();
    v@49 : &'_ mut (@Array<i32, 256: usize>);
    v@50 : &'_ mut (i32);
    v@51 : &'_ (@Array<i32, 256: usize>);
    v@52 : &'_ (i32);

    zeta_i^2 := (0: usize : usize);
    fake_read zeta_i^2;
    v@5 := &mut zeta_i^2;
    v@4 := &two-phase *(v@5);
    v@6 := copy re^1;
    v@3 := move libcrux_kyber::ntt::ntt_at_layer_3328(move v@4, move v@6, (7: usize : usize));
    drop v@6;
    drop v@4;
    re^1 := move v@3;
    drop v@3;
    drop v@5;
    v@9 := &mut zeta_i^2;
    v@8 := &two-phase *(v@9);
    v@10 := copy re^1;
    v@7 := move libcrux_kyber::ntt::ntt_at_layer_3328(move v@8, move v@10, (6: usize : usize));
    drop v@10;
    drop v@8;
    re^1 := move v@7;
    drop v@7;
    drop v@9;
    v@13 := &mut zeta_i^2;
    v@12 := &two-phase *(v@13);
    v@14 := copy re^1;
    v@11 := move libcrux_kyber::ntt::ntt_at_layer_3328(move v@12, move v@14, (5: usize : usize));
    drop v@14;
    drop v@12;
    re^1 := move v@11;
    drop v@11;
    drop v@13;
    v@17 := &mut zeta_i^2;
    v@16 := &two-phase *(v@17);
    v@18 := copy re^1;
    v@15 := move libcrux_kyber::ntt::ntt_at_layer_3328(move v@16, move v@18, (4: usize : usize));
    drop v@18;
    drop v@16;
    re^1 := move v@15;
    drop v@15;
    drop v@17;
    v@21 := &mut zeta_i^2;
    v@20 := &two-phase *(v@21);
    v@22 := copy re^1;
    v@19 := move libcrux_kyber::ntt::ntt_at_layer_3328(move v@20, move v@22, (3: usize : usize));
    drop v@22;
    drop v@20;
    re^1 := move v@19;
    drop v@19;
    drop v@21;
    v@25 := &mut zeta_i^2;
    v@24 := &two-phase *(v@25);
    v@26 := copy re^1;
    v@23 := move libcrux_kyber::ntt::ntt_at_layer_3328(move v@24, move v@26, (2: usize : usize));
    drop v@26;
    drop v@24;
    re^1 := move v@23;
    drop v@23;
    drop v@25;
    v@29 := &mut zeta_i^2;
    v@28 := &two-phase *(v@29);
    v@30 := copy re^1;
    v@27 := move libcrux_kyber::ntt::ntt_at_layer_3328(move v@28, move v@30, (1: usize : usize));
    drop v@30;
    drop v@28;
    re^1 := move v@27;
    drop v@27;
    drop v@29;
    v@45 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@33 := core::ops::range::Range { start = (0: usize : usize); end = move v@45; };
    v@32 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@33);
    drop v@33;
    fake_read v@32;
    iter^34 := move v@32;
    loop {
      v@39 := &mut iter^34;
      v@38 := &two-phase *(v@39);
      v@37 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@38);
      drop v@38;
      fake_read v@37;
      match (v@37) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^40 := copy (v@37 as core::option::Option::Some).0;
          v@43 := copy i^40;
          v@51 := &(re^1).coefficients;
          v@52 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@51, copy v@43);
          v@42 := copy *(v@52);
          v@41 := move libcrux_kyber::arithmetic::barrett_reduce(move v@42);
          drop v@42;
          v@44 := copy i^40;
          v@49 := &mut (re^1).coefficients;
          v@50 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@49, copy v@44);
          *(v@50) := move v@41;
          drop v@41;
          drop v@44;
          drop v@43;
          v@47 := ();
          v@36 := move v@47;
          drop i^40;
          drop v@39;
          drop v@37;
          drop v@36;
          v@48 := ();
          v@35 := move v@48;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@46 := ();
    v@31 := move v@46;
    drop v@39;
    drop v@37;
    drop v@36;
    drop iter^34;
    drop v@32;
    drop v@31;
    v@0 := copy re^1;
    drop zeta_i^2;
    return
  }
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3328
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3328
--> name: libcrux_kyber::ntt::ntt_at_layer_3328
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3328
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3328
--> name: libcrux_kyber::ntt::ntt_at_layer_3328
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3328
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3328
--> name: libcrux_kyber::ntt::ntt_at_layer_3328
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3328
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3328
--> name: libcrux_kyber::ntt::ntt_at_layer_3328
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3328
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3328
--> name: libcrux_kyber::ntt::ntt_at_layer_3328
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3328
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3328
--> name: libcrux_kyber::ntt::ntt_at_layer_3328
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_at_layer_3328
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_at_layer_3328
--> name: libcrux_kyber::ntt::ntt_at_layer_3328
--> args: &'0_0 mut (usize) ++ libcrux_kyber::arithmetic::PolynomialRingElement ++ usize, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::barrett_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::barrett_reduce
--> name: libcrux_kyber::arithmetic::barrett_reduce
--> args: i32, ret: i32
263/465
Visiting function: libcrux_kyber::ind_cpa::deserialize_then_decompress_u
  fn libcrux_kyber::ind_cpa::deserialize_then_decompress_u<0, K, CIPHERTEXT_SIZE, VECTOR_U_ENCODED_SIZE, U_COMPRESSION_FACTOR>(ciphertext^1 : &0 (@Array<u8, CIPHERTEXT_SIZE>)) -> @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>  
{
    v@0 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    ciphertext^1 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    u_as_ntt^2 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    v@8 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    v@9 : usize;
    v@10 : usize;
    iter^11 : core::slice::iter::ChunksExact<'_, u8>;
    v@12 : ();
    v@13 : ();
    v@14 : core::option::Option<&'_ (@Slice<u8>)>;
    v@15 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@16 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    u_bytes^17 : &'_ (@Slice<u8>);
    v@18 : ();
    u^19 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@20 : &'_ (@Slice<u8>);
    v@21 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@22 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@23 : usize;
    v@24 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@25 : usize;
    v@26 : ();
    v@27 : ();
    v@28 : ();
    v@29 : ();
    v@30 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@31 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);

    v@24 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    u_as_ntt^2 := move @ArrayRepeat<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@24);
    fake_read u_as_ntt^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &*(ciphertext^1);
    v@7 := move @ArrayToSliceShared<'_, u8, CIPHERTEXT_SIZE>(move v@8);
    drop v@8;
    v@25 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@10 := move v@25 * U_COMPRESSION_FACTOR;
    v@9 := move v@10 / (8: usize : usize);
    drop v@10;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, move v@9);
    drop v@9;
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^11 := move v@5;
    loop {
      v@16 := &mut iter^11;
      v@15 := &two-phase *(v@16);
      v@14 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@15);
      drop v@15;
      fake_read v@14;
      match (v@14) {
      | 0 => {
          break 0
        }
      | 1 => {
          u_bytes^17 := copy (v@14 as core::option::Option::Some).0;
          v@20 := &*(u_bytes^17);
          u^19 := move libcrux_kyber::serialize::deserialize_then_decompress_ring_element_u<U_COMPRESSION_FACTOR>(move v@20);
          drop v@20;
          fake_read u^19;
          v@22 := copy u^19;
          v@21 := move libcrux_kyber::ntt::ntt_vector_u<U_COMPRESSION_FACTOR>(move v@22);
          drop v@22;
          v@23 := copy i^4;
          v@30 := &mut u_as_ntt^2;
          v@31 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@30, copy v@23);
          *(v@31) := move v@21;
          drop v@21;
          drop v@23;
          v@27 := ();
          v@18 := move v@27;
          drop u^19;
          drop v@18;
          i^4 := copy i^4 + (1: usize : usize);
          v@28 := ();
          v@13 := move v@28;
          drop u_bytes^17;
          drop v@16;
          drop v@14;
          drop v@13;
          v@29 := ();
          v@12 := move v@29;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@26 := ();
    v@3 := move v@26;
    drop v@16;
    drop v@14;
    drop v@13;
    drop iter^11;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy u_as_ntt^2;
    drop u_as_ntt^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, C@1>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: libcrux_kyber::serialize::deserialize_then_decompress_ring_element_u<C@3>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_then_decompress_ring_element_u<@>
--> name: libcrux_kyber::serialize::deserialize_then_decompress_ring_element_u
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::ntt_vector_u<C@3>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ntt::ntt_vector_u<@>
--> name: libcrux_kyber::ntt::ntt_vector_u
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: libcrux_kyber::arithmetic::PolynomialRingElement
264/465
Visiting function: libcrux_kyber::ind_cpa::deserialize_secret_key
  fn libcrux_kyber::ind_cpa::deserialize_secret_key<0, K>(secret_key^1 : &0 (@Slice<u8>)) -> @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>  
{
    v@0 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    secret_key^1 : &'_ (@Slice<u8>);
    secret_as_ntt^2 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::ChunksExact<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (@Slice<u8>)>;
    v@12 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    secret_bytes^14 : &'_ (@Slice<u8>);
    v@15 : ();
    v@16 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@17 : &'_ (@Slice<u8>);
    v@18 : usize;
    v@19 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@20 : usize;
    v@21 : ();
    v@22 : ();
    v@23 : ();
    v@24 : ();
    v@25 : &'_ mut (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@26 : &'_ mut (libcrux_kyber::arithmetic::PolynomialRingElement);

    v@19 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    secret_as_ntt^2 := move @ArrayRepeat<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@19);
    fake_read secret_as_ntt^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@7 := &*(secret_key^1);
    v@20 := global libcrux_kyber::constants::BYTES_PER_RING_ELEMENT;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, move v@20);
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          secret_bytes^14 := copy (v@11 as core::option::Option::Some).0;
          v@17 := &*(secret_bytes^14);
          v@16 := move libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element(move v@17);
          drop v@17;
          v@18 := copy i^4;
          v@25 := &mut secret_as_ntt^2;
          v@26 := move @ArrayIndexMut<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@25, copy v@18);
          *(v@26) := move v@16;
          drop v@16;
          drop v@18;
          v@22 := ();
          v@15 := move v@22;
          drop v@15;
          i^4 := copy i^4 + (1: usize : usize);
          v@23 := ();
          v@10 := move v@23;
          drop secret_bytes^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@24 := ();
          v@9 := move v@24;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@21 := ();
    v@3 := move v@21;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy secret_as_ntt^2;
    drop secret_as_ntt^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element
--> name: libcrux_kyber::serialize::deserialize_to_uncompressed_ring_element
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
265/465
266/465
Visiting opaque function: core::ops::bit::{u8#29}::bitand
  opaque fn core::ops::bit::{u8#29}::bitand(u8, u8) -> u8
267/465
268/465
Visiting opaque function: core::ops::bit::{&'a (u8)#46}::bitand
  opaque fn core::ops::bit::{&'a (u8)#46}::bitand<'a>(&'a (u8), u8) -> core::ops::bit::{u8#29}::Output
ERROR translating core::ops::bit::{&'a (u8)#46}::bitand: Failure("TODO: TraitTypes core::ops::bit::{u8#29}::Output")

269/465
270/465
Visiting opaque function: core::ops::bit::BitAnd::bitand
  opaque fn core::ops::bit::BitAnd::bitand<Self, Rhs>(Self, Rhs) -> Self::Output
ERROR translating core::ops::bit::BitAnd::bitand: Failure("TODO: TraitTypes Self::Output")

271/465
272/465
Visiting opaque function: core::ops::bit::{u8#791}::shr
  opaque fn core::ops::bit::{u8#791}::shr(u8, i32) -> u8
273/465
274/465
Visiting opaque function: core::ops::bit::{&'a (u8)#792}::shr
  opaque fn core::ops::bit::{&'a (u8)#792}::shr<'a>(&'a (u8), i32) -> core::ops::bit::{u8#791}::Output
ERROR translating core::ops::bit::{&'a (u8)#792}::shr: Failure("TODO: TraitTypes core::ops::bit::{u8#791}::Output")

275/465
276/465
Visiting opaque function: core::ops::bit::Shr::shr
  opaque fn core::ops::bit::Shr::shr<Self, Rhs>(Self, Rhs) -> Self::Output
ERROR translating core::ops::bit::Shr::shr: Failure("TODO: TraitTypes Self::Output")

277/465
Visiting function: libcrux_kyber::serialize::decompress_coefficients_4
  fn libcrux_kyber::serialize::decompress_coefficients_4<0>(byte^1 : &0 (u8)) -> (i32, i32)  
{
    v@0 : (i32, i32);
    byte^1 : &'_ (u8);
    coefficient1^2 : i32;
    v@3 : u8;
    v@4 : &'_ (u8);
    coefficient2^5 : i32;
    v@6 : u8;
    v@7 : u8;
    v@8 : &'_ (u8);
    v@9 : i32;
    v@10 : i32;

    v@4 := copy byte^1;
    v@3 := move core::ops::bit::{&'a (u8)#46}<'_>::bitand(move v@4, (15: u8 : u8));
    drop v@4;
    coefficient1^2 := cast<u8,i32> move v@3;
    drop v@3;
    fake_read coefficient1^2;
    v@8 := copy byte^1;
    v@7 := move core::ops::bit::{&'a (u8)#792}<'_>::shr(move v@8, (4: i32 : i32));
    drop v@8;
    v@6 := move v@7 & (15: u8 : u8);
    drop v@7;
    coefficient2^5 := cast<u8,i32> move v@6;
    drop v@6;
    fake_read coefficient2^5;
    v@9 := copy coefficient1^2;
    v@10 := copy coefficient2^5;
    v@0 := (move v@9, move v@10);
    drop v@10;
    drop v@9;
    drop coefficient2^5;
    drop coefficient1^2;
    return
  }
Visiting call: core::ops::bit::{&'a (u8)#46}<'_>::bitand
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: core::ops::bit::BitAnd<&'_ u8, u8>::bitand
Visiting call: core::ops::bit::{&'a (u8)#792}<'_>::shr
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: core::ops::bit::Shr<&'_ u8, i32>::shr
278/465
Visiting function: libcrux_kyber::serialize::deserialize_then_decompress_4
  fn libcrux_kyber::serialize::deserialize_then_decompress_4<0>(serialized^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^1 : &'_ (@Slice<u8>);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::Iter<'_, u8>;
    v@6 : core::slice::iter::Iter<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::Iter<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (u8)>;
    v@12 : &'_ mut (core::slice::iter::Iter<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::Iter<'_, u8>);
    byte^14 : &'_ (u8);
    v@15 : ();
    coefficient1^16 : i32;
    coefficient2^17 : i32;
    v@18 : (i32, i32);
    v@19 : &'_ (u8);
    v@20 : i32;
    v@21 : i32;
    v@22 : usize;
    v@23 : usize;
    v@24 : i32;
    v@25 : i32;
    v@26 : usize;
    v@27 : usize;
    v@28 : usize;
    v@29 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@30 : ();
    v@31 : ();
    v@32 : ();
    v@33 : ();
    v@34 : &'_ mut (@Array<i32, 256: usize>);
    v@35 : &'_ mut (i32);
    v@36 : &'_ mut (@Array<i32, 256: usize>);
    v@37 : &'_ mut (i32);

    v@29 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    re^2 := move v@29;
    fake_read re^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@7 := &*(serialized^1);
    v@6 := move core::slice::{@Slice<T>}::iter<u8>(move v@7);
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, u8>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          byte^14 := copy (v@11 as core::option::Option::Some).0;
          v@19 := &*(byte^14);
          v@18 := move libcrux_kyber::serialize::decompress_coefficients_4(move v@19);
          drop v@19;
          fake_read v@18;
          coefficient1^16 := copy (v@18).0;
          coefficient2^17 := copy (v@18).1;
          drop v@18;
          v@21 := copy coefficient1^16;
          v@20 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((4: u8 : u8), move v@21);
          drop v@21;
          v@23 := copy i^4;
          v@22 := (2: usize : usize) * move v@23;
          drop v@23;
          v@36 := &mut (re^2).coefficients;
          v@37 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@36, copy v@22);
          *(v@37) := move v@20;
          drop v@20;
          drop v@22;
          v@25 := copy coefficient2^17;
          v@24 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((4: u8 : u8), move v@25);
          drop v@25;
          v@28 := copy i^4;
          v@27 := (2: usize : usize) * move v@28;
          drop v@28;
          v@26 := move v@27 + (1: usize : usize);
          drop v@27;
          v@34 := &mut (re^2).coefficients;
          v@35 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@34, copy v@26);
          *(v@35) := move v@24;
          drop v@24;
          drop v@26;
          v@31 := ();
          v@15 := move v@31;
          drop coefficient2^17;
          drop coefficient1^16;
          drop v@15;
          i^4 := copy i^4 + (1: usize : usize);
          v@32 := ();
          v@10 := move v@32;
          drop byte^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@33 := ();
          v@9 := move v@33;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@30 := ();
    v@3 := move v@30;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy re^2;
    drop re^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::iter<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<u8>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, u8>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: libcrux_kyber::serialize::decompress_coefficients_4
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::decompress_coefficients_4
--> name: libcrux_kyber::serialize::decompress_coefficients_4
--> args: &'0_0 (u8), ret: (i32, i32)
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
279/465
Visiting function: libcrux_kyber::serialize::decompress_coefficients_5
  fn libcrux_kyber::serialize::decompress_coefficients_5(byte1^1 : i32, byte2^2 : i32, byte3^3 : i32, byte4^4 : i32, byte5^5 : i32) -> (i32, i32, i32, i32, i32, i32, i32, i32)  
{
    v@0 : (i32, i32, i32, i32, i32, i32, i32, i32);
    byte1^1 : i32;
    byte2^2 : i32;
    byte3^3 : i32;
    byte4^4 : i32;
    byte5^5 : i32;
    coefficient1^6 : i32;
    v@7 : i32;
    coefficient2^8 : i32;
    v@9 : i32;
    v@10 : i32;
    v@11 : i32;
    v@12 : i32;
    v@13 : i32;
    coefficient3^14 : i32;
    v@15 : i32;
    v@16 : i32;
    coefficient4^17 : i32;
    v@18 : i32;
    v@19 : i32;
    v@20 : i32;
    v@21 : i32;
    v@22 : i32;
    coefficient5^23 : i32;
    v@24 : i32;
    v@25 : i32;
    v@26 : i32;
    v@27 : i32;
    v@28 : i32;
    coefficient6^29 : i32;
    v@30 : i32;
    v@31 : i32;
    coefficient7^32 : i32;
    v@33 : i32;
    v@34 : i32;
    v@35 : i32;
    v@36 : i32;
    v@37 : i32;
    coefficient8^38 : i32;
    v@39 : i32;
    v@40 : i32;
    v@41 : i32;
    v@42 : i32;
    v@43 : i32;
    v@44 : i32;
    v@45 : i32;
    v@46 : i32;
    v@47 : i32;

    v@7 := copy byte1^1;
    coefficient1^6 := move v@7 & (31: i32 : i32);
    drop v@7;
    fake_read coefficient1^6;
    v@11 := copy byte2^2;
    v@10 := move v@11 & (3: i32 : i32);
    drop v@11;
    v@9 := move v@10 << (3: i32 : i32);
    drop v@10;
    v@13 := copy byte1^1;
    v@12 := move v@13 >> (5: i32 : i32);
    drop v@13;
    coefficient2^8 := move v@9 | move v@12;
    drop v@12;
    drop v@9;
    fake_read coefficient2^8;
    v@16 := copy byte2^2;
    v@15 := move v@16 >> (2: i32 : i32);
    drop v@16;
    coefficient3^14 := move v@15 & (31: i32 : i32);
    drop v@15;
    fake_read coefficient3^14;
    v@20 := copy byte3^3;
    v@19 := move v@20 & (15: i32 : i32);
    drop v@20;
    v@18 := move v@19 << (1: i32 : i32);
    drop v@19;
    v@22 := copy byte2^2;
    v@21 := move v@22 >> (7: i32 : i32);
    drop v@22;
    coefficient4^17 := move v@18 | move v@21;
    drop v@21;
    drop v@18;
    fake_read coefficient4^17;
    v@26 := copy byte4^4;
    v@25 := move v@26 & (1: i32 : i32);
    drop v@26;
    v@24 := move v@25 << (4: i32 : i32);
    drop v@25;
    v@28 := copy byte3^3;
    v@27 := move v@28 >> (4: i32 : i32);
    drop v@28;
    coefficient5^23 := move v@24 | move v@27;
    drop v@27;
    drop v@24;
    fake_read coefficient5^23;
    v@31 := copy byte4^4;
    v@30 := move v@31 >> (1: i32 : i32);
    drop v@31;
    coefficient6^29 := move v@30 & (31: i32 : i32);
    drop v@30;
    fake_read coefficient6^29;
    v@35 := copy byte5^5;
    v@34 := move v@35 & (7: i32 : i32);
    drop v@35;
    v@33 := move v@34 << (2: i32 : i32);
    drop v@34;
    v@37 := copy byte4^4;
    v@36 := move v@37 >> (6: i32 : i32);
    drop v@37;
    coefficient7^32 := move v@33 | move v@36;
    drop v@36;
    drop v@33;
    fake_read coefficient7^32;
    v@39 := copy byte5^5;
    coefficient8^38 := move v@39 >> (3: i32 : i32);
    drop v@39;
    fake_read coefficient8^38;
    v@40 := copy coefficient1^6;
    v@41 := copy coefficient2^8;
    v@42 := copy coefficient3^14;
    v@43 := copy coefficient4^17;
    v@44 := copy coefficient5^23;
    v@45 := copy coefficient6^29;
    v@46 := copy coefficient7^32;
    v@47 := copy coefficient8^38;
    v@0 := (move v@40, move v@41, move v@42, move v@43, move v@44, move v@45, move v@46, move v@47);
    drop v@47;
    drop v@46;
    drop v@45;
    drop v@44;
    drop v@43;
    drop v@42;
    drop v@41;
    drop v@40;
    drop coefficient8^38;
    drop coefficient7^32;
    drop coefficient6^29;
    drop coefficient5^23;
    drop coefficient4^17;
    drop coefficient3^14;
    drop coefficient2^8;
    drop coefficient1^6;
    return
  }
280/465
Visiting function: libcrux_kyber::serialize::deserialize_then_decompress_5
  fn libcrux_kyber::serialize::deserialize_then_decompress_5<0>(serialized^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^1 : &'_ (@Slice<u8>);
    re^2 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, u8>;
    v@6 : core::slice::iter::ChunksExact<'_, u8>;
    v@7 : &'_ (@Slice<u8>);
    iter^8 : core::slice::iter::ChunksExact<'_, u8>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<&'_ (@Slice<u8>)>;
    v@12 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, u8>);
    bytes^14 : &'_ (@Slice<u8>);
    v@15 : ();
    byte1^16 : i32;
    v@17 : u8;
    v@18 : usize;
    byte2^19 : i32;
    v@20 : u8;
    v@21 : usize;
    byte3^22 : i32;
    v@23 : u8;
    v@24 : usize;
    byte4^25 : i32;
    v@26 : u8;
    v@27 : usize;
    byte5^28 : i32;
    v@29 : u8;
    v@30 : usize;
    coefficient1^31 : i32;
    coefficient2^32 : i32;
    coefficient3^33 : i32;
    coefficient4^34 : i32;
    coefficient5^35 : i32;
    coefficient6^36 : i32;
    coefficient7^37 : i32;
    coefficient8^38 : i32;
    v@39 : (i32, i32, i32, i32, i32, i32, i32, i32);
    v@40 : i32;
    v@41 : i32;
    v@42 : i32;
    v@43 : i32;
    v@44 : i32;
    v@45 : i32;
    v@46 : i32;
    v@47 : usize;
    v@48 : usize;
    v@49 : i32;
    v@50 : i32;
    v@51 : usize;
    v@52 : usize;
    v@53 : usize;
    v@54 : i32;
    v@55 : i32;
    v@56 : usize;
    v@57 : usize;
    v@58 : usize;
    v@59 : i32;
    v@60 : i32;
    v@61 : usize;
    v@62 : usize;
    v@63 : usize;
    v@64 : i32;
    v@65 : i32;
    v@66 : usize;
    v@67 : usize;
    v@68 : usize;
    v@69 : i32;
    v@70 : i32;
    v@71 : usize;
    v@72 : usize;
    v@73 : usize;
    v@74 : i32;
    v@75 : i32;
    v@76 : usize;
    v@77 : usize;
    v@78 : usize;
    v@79 : i32;
    v@80 : i32;
    v@81 : usize;
    v@82 : usize;
    v@83 : usize;
    v@84 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@85 : ();
    v@86 : ();
    v@87 : ();
    v@88 : ();
    v@89 : &'_ mut (@Array<i32, 256: usize>);
    v@90 : &'_ mut (i32);
    v@91 : &'_ mut (@Array<i32, 256: usize>);
    v@92 : &'_ mut (i32);
    v@93 : &'_ mut (@Array<i32, 256: usize>);
    v@94 : &'_ mut (i32);
    v@95 : &'_ mut (@Array<i32, 256: usize>);
    v@96 : &'_ mut (i32);
    v@97 : &'_ mut (@Array<i32, 256: usize>);
    v@98 : &'_ mut (i32);
    v@99 : &'_ mut (@Array<i32, 256: usize>);
    v@100 : &'_ mut (i32);
    v@101 : &'_ mut (@Array<i32, 256: usize>);
    v@102 : &'_ mut (i32);
    v@103 : &'_ mut (@Array<i32, 256: usize>);
    v@104 : &'_ mut (i32);
    v@105 : &'_ (@Slice<u8>);
    v@106 : &'_ (u8);
    v@107 : &'_ (@Slice<u8>);
    v@108 : &'_ (u8);
    v@109 : &'_ (@Slice<u8>);
    v@110 : &'_ (u8);
    v@111 : &'_ (@Slice<u8>);
    v@112 : &'_ (u8);
    v@113 : &'_ (@Slice<u8>);
    v@114 : &'_ (u8);

    v@84 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    re^2 := move v@84;
    fake_read re^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@7 := &*(serialized^1);
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<u8>(move v@7, (5: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^8 := move v@5;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          bytes^14 := copy (v@11 as core::option::Option::Some).0;
          v@18 := (0: usize : usize);
          v@113 := &*(bytes^14);
          v@114 := move @SliceIndexShared<'_, u8>(move v@113, copy v@18);
          v@17 := copy *(v@114);
          byte1^16 := cast<u8,i32> move v@17;
          drop v@17;
          fake_read byte1^16;
          drop v@18;
          v@21 := (1: usize : usize);
          v@111 := &*(bytes^14);
          v@112 := move @SliceIndexShared<'_, u8>(move v@111, copy v@21);
          v@20 := copy *(v@112);
          byte2^19 := cast<u8,i32> move v@20;
          drop v@20;
          fake_read byte2^19;
          drop v@21;
          v@24 := (2: usize : usize);
          v@109 := &*(bytes^14);
          v@110 := move @SliceIndexShared<'_, u8>(move v@109, copy v@24);
          v@23 := copy *(v@110);
          byte3^22 := cast<u8,i32> move v@23;
          drop v@23;
          fake_read byte3^22;
          drop v@24;
          v@27 := (3: usize : usize);
          v@107 := &*(bytes^14);
          v@108 := move @SliceIndexShared<'_, u8>(move v@107, copy v@27);
          v@26 := copy *(v@108);
          byte4^25 := cast<u8,i32> move v@26;
          drop v@26;
          fake_read byte4^25;
          drop v@27;
          v@30 := (4: usize : usize);
          v@105 := &*(bytes^14);
          v@106 := move @SliceIndexShared<'_, u8>(move v@105, copy v@30);
          v@29 := copy *(v@106);
          byte5^28 := cast<u8,i32> move v@29;
          drop v@29;
          fake_read byte5^28;
          drop v@30;
          v@40 := copy byte1^16;
          v@41 := copy byte2^19;
          v@42 := copy byte3^22;
          v@43 := copy byte4^25;
          v@44 := copy byte5^28;
          v@39 := move libcrux_kyber::serialize::decompress_coefficients_5(move v@40, move v@41, move v@42, move v@43, move v@44);
          drop v@44;
          drop v@43;
          drop v@42;
          drop v@41;
          drop v@40;
          fake_read v@39;
          coefficient1^31 := copy (v@39).0;
          coefficient2^32 := copy (v@39).1;
          coefficient3^33 := copy (v@39).2;
          coefficient4^34 := copy (v@39).3;
          coefficient5^35 := copy (v@39).4;
          coefficient6^36 := copy (v@39).5;
          coefficient7^37 := copy (v@39).6;
          coefficient8^38 := copy (v@39).7;
          drop v@39;
          v@46 := copy coefficient1^31;
          v@45 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((5: u8 : u8), move v@46);
          drop v@46;
          v@48 := copy i^4;
          v@47 := (8: usize : usize) * move v@48;
          drop v@48;
          v@103 := &mut (re^2).coefficients;
          v@104 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@103, copy v@47);
          *(v@104) := move v@45;
          drop v@45;
          drop v@47;
          v@50 := copy coefficient2^32;
          v@49 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((5: u8 : u8), move v@50);
          drop v@50;
          v@53 := copy i^4;
          v@52 := (8: usize : usize) * move v@53;
          drop v@53;
          v@51 := move v@52 + (1: usize : usize);
          drop v@52;
          v@101 := &mut (re^2).coefficients;
          v@102 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@101, copy v@51);
          *(v@102) := move v@49;
          drop v@49;
          drop v@51;
          v@55 := copy coefficient3^33;
          v@54 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((5: u8 : u8), move v@55);
          drop v@55;
          v@58 := copy i^4;
          v@57 := (8: usize : usize) * move v@58;
          drop v@58;
          v@56 := move v@57 + (2: usize : usize);
          drop v@57;
          v@99 := &mut (re^2).coefficients;
          v@100 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@99, copy v@56);
          *(v@100) := move v@54;
          drop v@54;
          drop v@56;
          v@60 := copy coefficient4^34;
          v@59 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((5: u8 : u8), move v@60);
          drop v@60;
          v@63 := copy i^4;
          v@62 := (8: usize : usize) * move v@63;
          drop v@63;
          v@61 := move v@62 + (3: usize : usize);
          drop v@62;
          v@97 := &mut (re^2).coefficients;
          v@98 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@97, copy v@61);
          *(v@98) := move v@59;
          drop v@59;
          drop v@61;
          v@65 := copy coefficient5^35;
          v@64 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((5: u8 : u8), move v@65);
          drop v@65;
          v@68 := copy i^4;
          v@67 := (8: usize : usize) * move v@68;
          drop v@68;
          v@66 := move v@67 + (4: usize : usize);
          drop v@67;
          v@95 := &mut (re^2).coefficients;
          v@96 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@95, copy v@66);
          *(v@96) := move v@64;
          drop v@64;
          drop v@66;
          v@70 := copy coefficient6^36;
          v@69 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((5: u8 : u8), move v@70);
          drop v@70;
          v@73 := copy i^4;
          v@72 := (8: usize : usize) * move v@73;
          drop v@73;
          v@71 := move v@72 + (5: usize : usize);
          drop v@72;
          v@93 := &mut (re^2).coefficients;
          v@94 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@93, copy v@71);
          *(v@94) := move v@69;
          drop v@69;
          drop v@71;
          v@75 := copy coefficient7^37;
          v@74 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((5: u8 : u8), move v@75);
          drop v@75;
          v@78 := copy i^4;
          v@77 := (8: usize : usize) * move v@78;
          drop v@78;
          v@76 := move v@77 + (6: usize : usize);
          drop v@77;
          v@91 := &mut (re^2).coefficients;
          v@92 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@91, copy v@76);
          *(v@92) := move v@74;
          drop v@74;
          drop v@76;
          v@80 := copy coefficient8^38;
          v@79 := move libcrux_kyber::compress::decompress_ciphertext_coefficient((5: u8 : u8), move v@80);
          drop v@80;
          v@83 := copy i^4;
          v@82 := (8: usize : usize) * move v@83;
          drop v@83;
          v@81 := move v@82 + (7: usize : usize);
          drop v@82;
          v@89 := &mut (re^2).coefficients;
          v@90 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@89, copy v@81);
          *(v@90) := move v@79;
          drop v@79;
          drop v@81;
          v@86 := ();
          v@15 := move v@86;
          drop coefficient8^38;
          drop coefficient7^37;
          drop coefficient6^36;
          drop coefficient5^35;
          drop coefficient4^34;
          drop coefficient3^33;
          drop coefficient2^32;
          drop coefficient1^31;
          drop byte5^28;
          drop byte4^25;
          drop byte3^22;
          drop byte2^19;
          drop byte1^16;
          drop v@15;
          i^4 := copy i^4 + (1: usize : usize);
          v@87 := ();
          v@10 := move v@87;
          drop bytes^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@88 := ();
          v@9 := move v@88;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@85 := ();
    v@3 := move v@85;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy re^2;
    drop re^2;
    return
  }
Visiting call: core::slice::{@Slice<T>}::chunks_exact<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<u8>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, u8>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, u8>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, u8>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, u8>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: @SliceIndexShared<'_, u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: SliceIndexShared<'_, u8>
Visiting call: libcrux_kyber::serialize::decompress_coefficients_5
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::decompress_coefficients_5
--> name: libcrux_kyber::serialize::decompress_coefficients_5
--> args: i32 ++ i32 ++ i32 ++ i32 ++ i32, ret: (i32, i32, i32, i32, i32, i32, i32, i32)
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
Visiting call: libcrux_kyber::compress::decompress_ciphertext_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> name: libcrux_kyber::compress::decompress_ciphertext_coefficient
--> args: u8 ++ i32, ret: i32
281/465
Visiting function: libcrux_kyber::serialize::deserialize_then_decompress_ring_element_v
  fn libcrux_kyber::serialize::deserialize_then_decompress_ring_element_v<0, COMPRESSION_FACTOR>(serialized^1 : &0 (@Slice<u8>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^1 : &'_ (@Slice<u8>);
    v@2 : u32;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);

    v@2 := cast<usize,u32> COMPRESSION_FACTOR;
    fake_read v@2;
    switch (copy v@2) {
    | 4: u32 => {
        v@3 := &*(serialized^1);
        v@0 := move libcrux_kyber::serialize::deserialize_then_decompress_4(move v@3);
        drop v@3
      }
    | 5: u32 => {
        v@4 := &*(serialized^1);
        v@0 := move libcrux_kyber::serialize::deserialize_then_decompress_5(move v@4);
        drop v@4
      }
      _ => {
        panic
      }
    };
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::serialize::deserialize_then_decompress_4
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_then_decompress_4
--> name: libcrux_kyber::serialize::deserialize_then_decompress_4
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::serialize::deserialize_then_decompress_5
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_then_decompress_5
--> name: libcrux_kyber::serialize::deserialize_then_decompress_5
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
282/465
Visiting function: libcrux_kyber::matrix::compute_message
  fn libcrux_kyber::matrix::compute_message<0, 1, 2, K>(v^1 : &0 (libcrux_kyber::arithmetic::PolynomialRingElement), secret_as_ntt^2 : &1 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>), u_as_ntt^3 : &2 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>)) -> libcrux_kyber::arithmetic::PolynomialRingElement  
{
    v@0 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v^1 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    secret_as_ntt^2 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    u_as_ntt^3 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    result^4 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@5 : ();
    v@6 : core::ops::range::Range<usize>;
    v@7 : core::ops::range::Range<usize>;
    iter^8 : core::ops::range::Range<usize>;
    v@9 : ();
    v@10 : ();
    v@11 : core::option::Option<usize>;
    v@12 : &'_ mut (core::ops::range::Range<usize>);
    v@13 : &'_ mut (core::ops::range::Range<usize>);
    i^14 : usize;
    product^15 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@16 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@17 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@18 : usize;
    v@19 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@20 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@21 : usize;
    v@22 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@23 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@24 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@25 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@26 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@27 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@28 : ();
    v@29 : core::ops::range::Range<usize>;
    v@30 : core::ops::range::Range<usize>;
    iter^31 : core::ops::range::Range<usize>;
    v@32 : ();
    v@33 : core::option::Option<usize>;
    v@34 : &'_ mut (core::ops::range::Range<usize>);
    v@35 : &'_ mut (core::ops::range::Range<usize>);
    i^36 : usize;
    coefficient_normal_form^37 : i32;
    v@38 : i32;
    v@39 : i32;
    v@40 : usize;
    v@41 : i32;
    v@42 : i32;
    v@43 : i32;
    v@44 : usize;
    v@45 : i32;
    v@46 : usize;
    v@47 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@48 : ();
    v@49 : usize;
    v@50 : ();
    v@51 : ();
    v@52 : ();
    v@53 : ();
    v@54 : ();
    v@55 : &'_ mut (@Array<i32, 256: usize>);
    v@56 : &'_ mut (i32);
    v@57 : &'_ (@Array<i32, 256: usize>);
    v@58 : &'_ (i32);
    v@59 : &'_ (@Array<i32, 256: usize>);
    v@60 : &'_ (i32);
    v@61 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@62 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@63 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@64 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);

    v@47 := global libcrux_kyber::arithmetic::{libcrux_kyber::arithmetic::PolynomialRingElement}::ZERO;
    result^4 := move v@47;
    fake_read result^4;
    v@7 := core::ops::range::Range { start = (0: usize : usize); end = K; };
    v@6 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@7);
    drop v@7;
    fake_read v@6;
    iter^8 := move v@6;
    loop {
      v@13 := &mut iter^8;
      v@12 := &two-phase *(v@13);
      v@11 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@12);
      drop v@12;
      fake_read v@11;
      match (v@11) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^14 := copy (v@11 as core::option::Option::Some).0;
          v@18 := copy i^14;
          v@63 := &*(secret_as_ntt^2);
          v@64 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@63, copy v@18);
          v@17 := &*(v@64);
          v@16 := &*(v@17);
          v@21 := copy i^14;
          v@61 := &*(u_as_ntt^3);
          v@62 := move @ArrayIndexShared<'_, libcrux_kyber::arithmetic::PolynomialRingElement, K>(move v@61, copy v@21);
          v@20 := &*(v@62);
          v@19 := &*(v@20);
          product^15 := move libcrux_kyber::ntt::ntt_multiply(move v@16, move v@19);
          drop v@19;
          drop v@16;
          fake_read product^15;
          drop v@21;
          drop v@20;
          drop v@18;
          drop v@17;
          v@23 := copy result^4;
          v@25 := &product^15;
          v@24 := &*(v@25);
          v@22 := move libcrux_kyber::arithmetic::add_to_ring_element<K>(move v@23, move v@24);
          drop v@24;
          drop v@23;
          result^4 := move v@22;
          drop v@22;
          drop v@25;
          v@50 := ();
          v@10 := move v@50;
          drop product^15;
          drop i^14;
          drop v@13;
          drop v@11;
          drop v@10;
          v@51 := ();
          v@9 := move v@51;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@48 := ();
    v@5 := move v@48;
    drop v@13;
    drop v@11;
    drop v@10;
    drop iter^8;
    drop v@6;
    drop v@5;
    v@27 := copy result^4;
    v@26 := move libcrux_kyber::ntt::invert_ntt_montgomery<K>(move v@27);
    drop v@27;
    result^4 := move v@26;
    drop v@26;
    v@49 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@30 := core::ops::range::Range { start = (0: usize : usize); end = move v@49; };
    v@29 := move core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter(move v@30);
    drop v@30;
    fake_read v@29;
    iter^31 := move v@29;
    loop {
      v@35 := &mut iter^31;
      v@34 := &two-phase *(v@35);
      v@33 := move core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next(move v@34);
      drop v@34;
      fake_read v@33;
      match (v@33) {
      | 0 => {
          break 0
        }
      | 1 => {
          i^36 := copy (v@33 as core::option::Option::Some).0;
          v@40 := copy i^36;
          v@59 := &(result^4).coefficients;
          v@60 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@59, copy v@40);
          v@39 := copy *(v@60);
          v@38 := move v@39 * (1441: i32 : i32);
          drop v@39;
          coefficient_normal_form^37 := move libcrux_kyber::arithmetic::montgomery_reduce(move v@38);
          drop v@38;
          fake_read coefficient_normal_form^37;
          drop v@40;
          v@44 := copy i^36;
          v@57 := &(*(v^1)).coefficients;
          v@58 := move @ArrayIndexShared<'_, i32, 256: usize>(move v@57, copy v@44);
          v@43 := copy *(v@58);
          v@45 := copy coefficient_normal_form^37;
          v@42 := move v@43 - move v@45;
          drop v@45;
          drop v@43;
          v@41 := move libcrux_kyber::arithmetic::barrett_reduce(move v@42);
          drop v@42;
          v@46 := copy i^36;
          v@55 := &mut (result^4).coefficients;
          v@56 := move @ArrayIndexMut<'_, i32, 256: usize>(move v@55, copy v@46);
          *(v@56) := move v@41;
          drop v@41;
          drop v@46;
          drop v@44;
          v@53 := ();
          v@32 := move v@53;
          drop coefficient_normal_form^37;
          drop i^36;
          drop v@35;
          drop v@33;
          drop v@32;
          v@54 := ();
          v@9 := move v@54;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@52 := ();
    v@28 := move v@52;
    drop v@35;
    drop v@33;
    drop v@32;
    drop iter^31;
    drop v@29;
    drop v@28;
    v@0 := copy result^4;
    drop result^4;
    return
  }
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::ntt::ntt_multiply
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::ntt::ntt_multiply
--> name: libcrux_kyber::ntt::ntt_multiply
--> args: &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement) ++ &'0_1 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::arithmetic::add_to_ring_element<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::arithmetic::add_to_ring_element<@>
--> name: libcrux_kyber::arithmetic::add_to_ring_element
--> args: libcrux_kyber::arithmetic::PolynomialRingElement ++ &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ntt::invert_ntt_montgomery<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ntt::invert_ntt_montgomery<@>
--> name: libcrux_kyber::ntt::invert_ntt_montgomery
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: core::iter::traits::collect::{I}<core::ops::range::Range<usize>>[core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::ops::range::Range<usize>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::iter::range::{core::ops::range::Range<A>#3}<usize>[core::iter::range::{usize#37}]::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<usize>>::next
--> name: core::iter::range::{core::ops::range::Range<A>#3}::next
--> args: &'0_0 mut (core::ops::range::Range<T@0>), ret: core::option::Option<T@0>
Visiting call: libcrux_kyber::arithmetic::montgomery_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::montgomery_reduce
--> name: libcrux_kyber::arithmetic::montgomery_reduce
--> args: i32, ret: i32
Visiting call: libcrux_kyber::arithmetic::barrett_reduce
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::barrett_reduce
--> name: libcrux_kyber::arithmetic::barrett_reduce
--> args: i32, ret: i32
283/465
Visiting function: libcrux_kyber::serialize::compress_then_serialize_message
  fn libcrux_kyber::serialize::compress_then_serialize_message(re^1 : libcrux_kyber::arithmetic::PolynomialRingElement) -> @Array<u8, 32: usize>  
{
    v@0 : @Array<u8, 32: usize>;
    re^1 : libcrux_kyber::arithmetic::PolynomialRingElement;
    serialized^2 : @Array<u8, 32: usize>;
    v@3 : ();
    i^4 : usize;
    v@5 : core::slice::iter::ChunksExact<'_, i32>;
    v@6 : core::slice::iter::ChunksExact<'_, i32>;
    v@7 : &'_ (@Slice<i32>);
    v@8 : &'_ (@Array<i32, 256: usize>);
    iter^9 : core::slice::iter::ChunksExact<'_, i32>;
    v@10 : ();
    v@11 : ();
    v@12 : core::option::Option<&'_ (@Slice<i32>)>;
    v@13 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    v@14 : &'_ mut (core::slice::iter::ChunksExact<'_, i32>);
    coefficients^15 : &'_ (@Slice<i32>);
    v@16 : ();
    j^17 : i32;
    v@18 : core::slice::iter::Iter<'_, i32>;
    v@19 : core::slice::iter::Iter<'_, i32>;
    v@20 : &'_ (@Slice<i32>);
    iter^21 : core::slice::iter::Iter<'_, i32>;
    v@22 : ();
    v@23 : core::option::Option<&'_ (i32)>;
    v@24 : &'_ mut (core::slice::iter::Iter<'_, i32>);
    v@25 : &'_ mut (core::slice::iter::Iter<'_, i32>);
    coefficient^26 : &'_ (i32);
    v@27 : ();
    coefficient^28 : u16;
    v@29 : i32;
    coefficient_compressed^30 : u8;
    v@31 : u16;
    v@32 : u8;
    v@33 : u8;
    v@34 : i32;
    v@35 : usize;
    v@36 : ();
    v@37 : ();
    v@38 : ();
    v@39 : ();
    v@40 : ();
    v@41 : ();
    v@42 : ();
    v@43 : &'_ mut (@Array<u8, 32: usize>);
    v@44 : &'_ mut (u8);
    v@45 : &'_ (@Array<u8, 32: usize>);
    v@46 : &'_ (u8);

    serialized^2 := move @ArrayRepeat<'_, u8, 32: usize>((0: u8 : u8));
    fake_read serialized^2;
    i^4 := (0: usize : usize);
    fake_read i^4;
    v@8 := &(re^1).coefficients;
    v@7 := move @ArrayToSliceShared<'_, i32, 256: usize>(move v@8);
    drop v@8;
    v@6 := move core::slice::{@Slice<T>}::chunks_exact<i32>(move v@7, (8: usize : usize));
    drop v@7;
    v@5 := move core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter(move v@6);
    drop v@6;
    fake_read v@5;
    iter^9 := move v@5;
    loop {
      v@14 := &mut iter^9;
      v@13 := &two-phase *(v@14);
      v@12 := move core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next(move v@13);
      drop v@13;
      fake_read v@12;
      match (v@12) {
      | 0 => {
          break 0
        }
      | 1 => {
          coefficients^15 := copy (v@12 as core::option::Option::Some).0;
          j^17 := (0: i32 : i32);
          fake_read j^17;
          v@20 := &*(coefficients^15);
          v@19 := move core::slice::{@Slice<T>}::iter<i32>(move v@20);
          drop v@20;
          v@18 := move core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, i32>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, i32>]::into_iter(move v@19);
          drop v@19;
          fake_read v@18;
          iter^21 := move v@18;
          loop {
            v@25 := &mut iter^21;
            v@24 := &two-phase *(v@25);
            v@23 := move core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, i32>::next(move v@24);
            drop v@24;
            fake_read v@23;
            match (v@23) {
            | 0 => {
                break 0
              }
            | 1 => {
                coefficient^26 := copy (v@23 as core::option::Option::Some).0;
                v@29 := copy *(coefficient^26);
                coefficient^28 := move libcrux_kyber::arithmetic::to_unsigned_representative(move v@29);
                drop v@29;
                fake_read coefficient^28;
                v@31 := copy coefficient^28;
                coefficient_compressed^30 := move libcrux_kyber::compress::compress_message_coefficient(move v@31);
                drop v@31;
                fake_read coefficient_compressed^30;
                v@33 := copy coefficient_compressed^30;
                v@34 := copy j^17;
                v@32 := move v@33 << move v@34;
                drop v@34;
                drop v@33;
                v@35 := copy i^4;
                v@43 := &mut serialized^2;
                v@44 := move @ArrayIndexMut<'_, u8, 32: usize>(move v@43, copy v@35);
                v@45 := &serialized^2;
                v@46 := move @ArrayIndexShared<'_, u8, 32: usize>(move v@45, copy v@35);
                *(v@44) := copy *(v@46) | move v@32;
                v@39 := ();
                v@27 := move v@39;
                drop v@32;
                drop coefficient_compressed^30;
                drop coefficient^28;
                drop v@35;
                drop v@27;
                j^17 := copy j^17 + (1: i32 : i32);
                v@40 := ();
                v@22 := move v@40;
                drop coefficient^26;
                drop v@25;
                drop v@23;
                drop v@22;
                v@42 := ();
                v@10 := move v@42;
                continue 0
              }
              _ => {
                panic
              }
            }
          };
          v@37 := ();
          v@16 := move v@37;
          drop v@25;
          drop v@23;
          drop v@22;
          drop iter^21;
          drop v@18;
          drop j^17;
          drop v@16;
          i^4 := copy i^4 + (1: usize : usize);
          v@38 := ();
          v@11 := move v@38;
          drop coefficients^15;
          drop v@14;
          drop v@12;
          drop v@11;
          v@41 := ();
          v@10 := move v@41;
          continue 0
        }
        _ => {
          panic
        }
      }
    };
    v@36 := ();
    v@3 := move v@36;
    drop v@14;
    drop v@12;
    drop v@11;
    drop iter^9;
    drop v@5;
    drop i^4;
    drop v@3;
    v@0 := copy serialized^2;
    drop serialized^2;
    return
  }
Visiting call: @ArrayToSliceShared<'_, i32, 256: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, i32, 256>
Visiting call: core::slice::{@Slice<T>}::chunks_exact<i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::chunks_exact<i32>
--> name: core::slice::{@Slice<T>}::chunks_exact
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: core::slice::iter::ChunksExact<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::ChunksExact<'_, i32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'_, i32>>::next
--> name: core::slice::iter::{core::slice::iter::ChunksExact<'a, T>#89}::next
--> args: &'0_1 mut (core::slice::iter::ChunksExact<'0_0, T@0>), ret: core::option::Option<&'0_0 (@Slice<T@0>)>
Visiting call: core::slice::{@Slice<T>}::iter<i32>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::iter<i32>
--> name: core::slice::{@Slice<T>}::iter
--> args: &'0_0 (@Slice<T@0>), ret: core::slice::iter::Iter<'0_0, T@0>
Visiting call: core::iter::traits::collect::{I}<core::slice::iter::Iter<'_, i32>>[core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, i32>]::into_iter
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::collect::IntoIterator<core::slice::iter::Iter<'_, i32>>::into_iter
--> name: core::iter::traits::collect::{I}::into_iter
--> args: T@0, ret: T@0
Visiting call: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}<'_, i32>::next
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'_, i32>>::next
--> name: core::slice::iter::{core::slice::iter::Iter<'a, T>#181}::next
--> args: &'0_1 mut (core::slice::iter::Iter<'0_0, T@0>), ret: core::option::Option<&'0_0 (T@0)>
Visiting call: libcrux_kyber::arithmetic::to_unsigned_representative
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::arithmetic::to_unsigned_representative
--> name: libcrux_kyber::arithmetic::to_unsigned_representative
--> args: i32, ret: u16
Visiting call: libcrux_kyber::compress::compress_message_coefficient
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::compress::compress_message_coefficient
--> name: libcrux_kyber::compress::compress_message_coefficient
--> args: u16, ret: u8
284/465
Visiting function: libcrux_kyber::ind_cpa::decrypt
  fn libcrux_kyber::ind_cpa::decrypt<0, 1, K, CIPHERTEXT_SIZE, VECTOR_U_ENCODED_SIZE, U_COMPRESSION_FACTOR, V_COMPRESSION_FACTOR>(secret_key^1 : &0 (@Slice<u8>), ciphertext^2 : &1 (@Array<u8, CIPHERTEXT_SIZE>)) -> @Array<u8, 32: usize>  
{
    v@0 : @Array<u8, 32: usize>;
    secret_key^1 : &'_ (@Slice<u8>);
    ciphertext^2 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    u_as_ntt^3 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@4 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    v^5 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@6 : &'_ (@Slice<u8>);
    v@7 : &'_ (@Slice<u8>);
    v@8 : &'_ (@Slice<u8>);
    v@9 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    v@10 : core::ops::range::RangeFrom<usize>;
    secret_as_ntt^11 : @Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>;
    v@12 : &'_ (@Slice<u8>);
    message^13 : libcrux_kyber::arithmetic::PolynomialRingElement;
    v@14 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@15 : &'_ (libcrux_kyber::arithmetic::PolynomialRingElement);
    v@16 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@17 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@18 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@19 : &'_ (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, K>);
    v@20 : libcrux_kyber::arithmetic::PolynomialRingElement;

    v@4 := &*(ciphertext^2);
    u_as_ntt^3 := move libcrux_kyber::ind_cpa::deserialize_then_decompress_u<K, CIPHERTEXT_SIZE, VECTOR_U_ENCODED_SIZE, U_COMPRESSION_FACTOR>(move v@4);
    drop v@4;
    fake_read u_as_ntt^3;
    v@9 := &*(ciphertext^2);
    v@10 := core::ops::range::RangeFrom { start = VECTOR_U_ENCODED_SIZE; };
    v@8 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, CIPHERTEXT_SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index(move v@9, move v@10);
    drop v@10;
    drop v@9;
    v@7 := &*(v@8);
    v@6 := &*(v@7);
    v^5 := move libcrux_kyber::serialize::deserialize_then_decompress_ring_element_v<V_COMPRESSION_FACTOR>(move v@6);
    drop v@6;
    fake_read v^5;
    drop v@8;
    drop v@7;
    v@12 := &*(secret_key^1);
    secret_as_ntt^11 := move libcrux_kyber::ind_cpa::deserialize_secret_key<K>(move v@12);
    drop v@12;
    fake_read secret_as_ntt^11;
    v@15 := &v^5;
    v@14 := &*(v@15);
    v@17 := &secret_as_ntt^11;
    v@16 := &*(v@17);
    v@19 := &u_as_ntt^3;
    v@18 := &*(v@19);
    message^13 := move libcrux_kyber::matrix::compute_message<K>(move v@14, move v@16, move v@18);
    drop v@18;
    drop v@16;
    drop v@14;
    fake_read message^13;
    drop v@19;
    drop v@17;
    drop v@15;
    v@20 := copy message^13;
    v@0 := move libcrux_kyber::serialize::compress_then_serialize_message(move v@20);
    drop v@20;
    drop message^13;
    drop secret_as_ntt^11;
    drop v^5;
    drop u_as_ntt^3;
    return
  }
Visiting call: libcrux_kyber::ind_cpa::deserialize_then_decompress_u<C@0, C@1, C@2, C@3>
is_array_map: false
--> 0 type_args, 4 const_generics
--> 0 type_args, 4 const_generics
--> pattern: libcrux_kyber::ind_cpa::deserialize_then_decompress_u<@, @, @, @>
--> name: libcrux_kyber::ind_cpa::deserialize_then_decompress_u
--> args: &'0_0 (@Array<u8, C@1>), ret: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, C@1>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::RangeFrom<usize>>::index
Visiting call: libcrux_kyber::serialize::deserialize_then_decompress_ring_element_v<C@4>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::serialize::deserialize_then_decompress_ring_element_v<@>
--> name: libcrux_kyber::serialize::deserialize_then_decompress_ring_element_v
--> args: &'0_0 (@Slice<u8>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::ind_cpa::deserialize_secret_key<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::deserialize_secret_key<@>
--> name: libcrux_kyber::ind_cpa::deserialize_secret_key
--> args: &'0_0 (@Slice<u8>), ret: @Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>
Visiting call: libcrux_kyber::matrix::compute_message<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::matrix::compute_message<@>
--> name: libcrux_kyber::matrix::compute_message
--> args: &'0_0 (libcrux_kyber::arithmetic::PolynomialRingElement) ++ &'0_1 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>) ++ &'0_2 (@Array<libcrux_kyber::arithmetic::PolynomialRingElement, C@0>), ret: libcrux_kyber::arithmetic::PolynomialRingElement
Visiting call: libcrux_kyber::serialize::compress_then_serialize_message
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::serialize::compress_then_serialize_message
--> name: libcrux_kyber::serialize::compress_then_serialize_message
--> args: libcrux_kyber::arithmetic::PolynomialRingElement, ret: @Array<u8, 32: usize>
285/465
Visiting type: libcrux_kyber::types::KyberCiphertext
struct libcrux_kyber::types::KyberCiphertext<SIZE>
{
  value : @Array<u8, SIZE>
}
286/465
287/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}::as_ref
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}::as_ref<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberCiphertext<SIZE>)) -> &0 (@Slice<u8>)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberCiphertext<SIZE>);
    v@2 : &'_ (@Array<u8, SIZE>);
    v@3 : &'_ (@Array<u8, SIZE>);

    v@3 := &(*(self^1)).value;
    v@2 := &*(v@3);
    v@0 := move @ArrayToSliceShared<'_, u8, SIZE>(move v@2);
    drop v@2;
    drop v@3;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
288/465
289/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#2}::from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#2}::from<SIZE>(value^1 : @Array<u8, SIZE>) -> libcrux_kyber::types::KyberCiphertext<SIZE>  
{
    v@0 : libcrux_kyber::types::KyberCiphertext<SIZE>;
    value^1 : @Array<u8, SIZE>;
    v@2 : @Array<u8, SIZE>;

    v@2 := copy value^1;
    v@0 := libcrux_kyber::types::KyberCiphertext { value = move v@2; };
    drop v@2;
    return
  }
290/465
291/465
Visiting opaque function: core::array::{@Array<T, N>#20}::clone
  opaque fn core::array::{@Array<T, N>#20}::clone<0, T, N>(&0 (@Array<T, N>)) -> @Array<T, N>
  where
    // Inherited clauses
    [TraitClause@0]: core::clone::Clone<T>,
292/465
Visiting opaque function: core::array::{@Array<T, N>#20}::clone_from
  opaque fn core::array::{@Array<T, N>#20}::clone_from<0, 1, T, N>(&0 mut (@Array<T, N>), &1 (@Array<T, N>))
  where
    // Inherited clauses
    [TraitClause@0]: core::clone::Clone<T>,
293/465
294/465
Visiting opaque function: core::clone::Clone::clone
  opaque fn core::clone::Clone::clone<0, Self>(&0 (Self)) -> Self
295/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#3}::from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#3}::from<0, 1, SIZE>(value^1 : &1 (@Array<u8, SIZE>)) -> libcrux_kyber::types::KyberCiphertext<SIZE>  
{
    v@0 : libcrux_kyber::types::KyberCiphertext<SIZE>;
    value^1 : &'_ (@Array<u8, SIZE>);
    v@2 : @Array<u8, SIZE>;
    v@3 : &'_ (@Array<u8, SIZE>);

    v@3 := &*(value^1);
    v@2 := move core::array::{@Array<T, N>#20}<u8, SIZE>[core::clone::impls::{u8#6}]::clone(move v@3);
    drop v@3;
    v@0 := libcrux_kyber::types::KyberCiphertext { value = move v@2; };
    drop v@2;
    return
  }
Visiting call: core::array::{@Array<T, N>#20}<u8, C@0>[core::clone::impls::{u8#6}]::clone
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 1 const_generics
--> pattern: core::clone::Clone<[u8; @]>::clone
--> name: core::array::{@Array<T, N>#20}::clone
--> args: &'0_0 (@Array<T@0, C@0>), ret: @Array<T@0, C@0>
296/465
297/465
Visiting function: libcrux_kyber::types::{@Array<u8, SIZE>#4}::from
  fn libcrux_kyber::types::{@Array<u8, SIZE>#4}::from<SIZE>(value^1 : libcrux_kyber::types::KyberCiphertext<SIZE>) -> @Array<u8, SIZE>  
{
    v@0 : @Array<u8, SIZE>;
    value^1 : libcrux_kyber::types::KyberCiphertext<SIZE>;

    v@0 := copy (value^1).value;
    return
  }
298/465
299/465
300/465
Visiting type: core::array::TryFromSliceError
opaque type core::array::TryFromSliceError
301/465
302/465
Visiting opaque function: core::convert::{T#6}::try_into
  opaque fn core::convert::{T#6}::try_into<T, U>(T) -> core::result::Result<U, TraitClause@0::Error>
  where
    // Inherited clauses
    [TraitClause@0]: core::convert::TryFrom<U, T>,
ERROR translating core::convert::{T#6}::try_into: Failure("TODO: TraitTypes TraitClause@0::Error")

303/465
304/465
Visiting opaque function: core::array::{@Array<T, N>#7}::try_from
  opaque fn core::array::{@Array<T, N>#7}::try_from<0, 1, T, N>(&1 (@Slice<T>)) -> core::result::Result<@Array<T, N>, core::array::TryFromSliceError>
  where
    // Inherited clauses
    [TraitClause@0]: core::marker::Copy<T>,
305/465
306/465
Visiting opaque function: core::convert::TryInto::try_into
  opaque fn core::convert::TryInto::try_into<Self, T>(Self) -> core::result::Result<T, Self::Error>
ERROR translating core::convert::TryInto::try_into: Failure("TODO: TraitTypes Self::Error")

307/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#5}::try_from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#5}::try_from<0, 1, SIZE>(value^1 : &1 (@Slice<u8>)) -> core::result::Result<libcrux_kyber::types::KyberCiphertext<SIZE>, libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#5}<0, SIZE>::Error>  
{
    v@0 : core::result::Result<libcrux_kyber::types::KyberCiphertext<SIZE>, core::array::TryFromSliceError>;
    value^1 : &'_ (@Slice<u8>);
    v@2 : core::result::Result<@Array<u8, SIZE>, core::array::TryFromSliceError>;
    v@3 : &'_ (@Slice<u8>);
    value^4 : @Array<u8, SIZE>;
    v@5 : libcrux_kyber::types::KyberCiphertext<SIZE>;
    v@6 : @Array<u8, SIZE>;
    e^7 : core::array::TryFromSliceError;
    v@8 : core::array::TryFromSliceError;

    v@3 := &*(value^1);
    v@2 := move core::convert::{T#6}<&'_ (@Slice<u8>), @Array<u8, SIZE>>[core::array::{@Array<T, N>#7}<'_, u8, SIZE>[core::marker::{u8#38}]]::try_into(move v@3);
    drop v@3;
    fake_read v@2;
    match (v@2) {
    | 0 => {
        value^4 := copy (v@2 as core::result::Result::Ok).0;
        v@6 := copy value^4;
        v@5 := libcrux_kyber::types::KyberCiphertext { value = move v@6; };
        drop v@6;
        v@0 := core::result::Result::core::result::Result::Ok (move v@5);
        drop v@5;
        drop value^4
      }
    | 1 => {
        e^7 := copy (v@2 as core::result::Result::Err).0;
        v@8 := copy e^7;
        v@0 := core::result::Result::core::result::Result::Err (move v@8);
        drop v@8;
        drop e^7
      }
      _ => {
        panic
      }
    };
    drop v@2;
    return
  }
Visiting call: core::convert::{T#6}<&'_ (@Slice<u8>), @Array<u8, C@0>>[core::array::{@Array<T, N>#7}<'_, u8, C@0>[core::marker::{u8#38}]]::try_into
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::convert::TryInto<&'_ [u8], [u8; @]>::try_into
308/465
309/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#6}::as_slice
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#6}::as_slice<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberCiphertext<SIZE>)) -> &0 (@Array<u8, SIZE>)  
{
    v@0 : &'_ (@Array<u8, SIZE>);
    self^1 : &'_ (libcrux_kyber::types::KyberCiphertext<SIZE>);
    v@2 : &'_ (@Array<u8, SIZE>);

    v@2 := &(*(self^1)).value;
    v@0 := &*(v@2);
    drop v@2;
    return
  }
310/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#6}::split_at
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#6}::split_at<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberCiphertext<SIZE>), mid^2 : usize) -> (&0 (@Slice<u8>), &0 (@Slice<u8>))  
{
    v@0 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    self^1 : &'_ (libcrux_kyber::types::KyberCiphertext<SIZE>);
    mid^2 : usize;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Array<u8, SIZE>);
    v@5 : usize;

    v@4 := &(*(self^1)).value;
    v@3 := move @ArrayToSliceShared<'_, u8, SIZE>(move v@4);
    drop v@4;
    v@5 := copy mid^2;
    v@0 := move core::slice::{@Slice<T>}::split_at<u8>(move v@3, move v@5);
    drop v@5;
    drop v@3;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: core::slice::{@Slice<T>}::split_at<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::split_at<u8>
--> name: core::slice::{@Slice<T>}::split_at
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: (&'0_0 (@Slice<T@0>), &'0_0 (@Slice<T@0>))
311/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#6}::len
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#6}::len<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberCiphertext<SIZE>)) -> usize  
{
    v@0 : usize;
    self^1 : &'_ (libcrux_kyber::types::KyberCiphertext<SIZE>);

    v@0 := SIZE;
    return
  }
312/465
Visiting type: libcrux_kyber::types::KyberPrivateKey
struct libcrux_kyber::types::KyberPrivateKey<SIZE>
{
  value : @Array<u8, SIZE>
}
313/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#7}::as_ref
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#7}::as_ref<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SIZE>)) -> &0 (@Slice<u8>)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SIZE>);
    v@2 : &'_ (@Array<u8, SIZE>);
    v@3 : &'_ (@Array<u8, SIZE>);

    v@3 := &(*(self^1)).value;
    v@2 := &*(v@3);
    v@0 := move @ArrayToSliceShared<'_, u8, SIZE>(move v@2);
    drop v@2;
    drop v@3;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
314/465
315/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}::from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}::from<SIZE>(value^1 : @Array<u8, SIZE>) -> libcrux_kyber::types::KyberPrivateKey<SIZE>  
{
    v@0 : libcrux_kyber::types::KyberPrivateKey<SIZE>;
    value^1 : @Array<u8, SIZE>;
    v@2 : @Array<u8, SIZE>;

    v@2 := copy value^1;
    v@0 := libcrux_kyber::types::KyberPrivateKey { value = move v@2; };
    drop v@2;
    return
  }
316/465
317/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#9}::from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#9}::from<0, 1, SIZE>(value^1 : &1 (@Array<u8, SIZE>)) -> libcrux_kyber::types::KyberPrivateKey<SIZE>  
{
    v@0 : libcrux_kyber::types::KyberPrivateKey<SIZE>;
    value^1 : &'_ (@Array<u8, SIZE>);
    v@2 : @Array<u8, SIZE>;
    v@3 : &'_ (@Array<u8, SIZE>);

    v@3 := &*(value^1);
    v@2 := move core::array::{@Array<T, N>#20}<u8, SIZE>[core::clone::impls::{u8#6}]::clone(move v@3);
    drop v@3;
    v@0 := libcrux_kyber::types::KyberPrivateKey { value = move v@2; };
    drop v@2;
    return
  }
Visiting call: core::array::{@Array<T, N>#20}<u8, C@0>[core::clone::impls::{u8#6}]::clone
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 1 const_generics
--> pattern: core::clone::Clone<[u8; @]>::clone
--> name: core::array::{@Array<T, N>#20}::clone
--> args: &'0_0 (@Array<T@0, C@0>), ret: @Array<T@0, C@0>
318/465
319/465
Visiting function: libcrux_kyber::types::{@Array<u8, SIZE>#10}::from
  fn libcrux_kyber::types::{@Array<u8, SIZE>#10}::from<SIZE>(value^1 : libcrux_kyber::types::KyberPrivateKey<SIZE>) -> @Array<u8, SIZE>  
{
    v@0 : @Array<u8, SIZE>;
    value^1 : libcrux_kyber::types::KyberPrivateKey<SIZE>;

    v@0 := copy (value^1).value;
    return
  }
320/465
321/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#11}::try_from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#11}::try_from<0, 1, SIZE>(value^1 : &1 (@Slice<u8>)) -> core::result::Result<libcrux_kyber::types::KyberPrivateKey<SIZE>, libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#11}<0, SIZE>::Error>  
{
    v@0 : core::result::Result<libcrux_kyber::types::KyberPrivateKey<SIZE>, core::array::TryFromSliceError>;
    value^1 : &'_ (@Slice<u8>);
    v@2 : core::result::Result<@Array<u8, SIZE>, core::array::TryFromSliceError>;
    v@3 : &'_ (@Slice<u8>);
    value^4 : @Array<u8, SIZE>;
    v@5 : libcrux_kyber::types::KyberPrivateKey<SIZE>;
    v@6 : @Array<u8, SIZE>;
    e^7 : core::array::TryFromSliceError;
    v@8 : core::array::TryFromSliceError;

    v@3 := &*(value^1);
    v@2 := move core::convert::{T#6}<&'_ (@Slice<u8>), @Array<u8, SIZE>>[core::array::{@Array<T, N>#7}<'_, u8, SIZE>[core::marker::{u8#38}]]::try_into(move v@3);
    drop v@3;
    fake_read v@2;
    match (v@2) {
    | 0 => {
        value^4 := copy (v@2 as core::result::Result::Ok).0;
        v@6 := copy value^4;
        v@5 := libcrux_kyber::types::KyberPrivateKey { value = move v@6; };
        drop v@6;
        v@0 := core::result::Result::core::result::Result::Ok (move v@5);
        drop v@5;
        drop value^4
      }
    | 1 => {
        e^7 := copy (v@2 as core::result::Result::Err).0;
        v@8 := copy e^7;
        v@0 := core::result::Result::core::result::Result::Err (move v@8);
        drop v@8;
        drop e^7
      }
      _ => {
        panic
      }
    };
    drop v@2;
    return
  }
Visiting call: core::convert::{T#6}<&'_ (@Slice<u8>), @Array<u8, C@0>>[core::array::{@Array<T, N>#7}<'_, u8, C@0>[core::marker::{u8#38}]]::try_into
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::convert::TryInto<&'_ [u8], [u8; @]>::try_into
322/465
323/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::as_slice
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::as_slice<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SIZE>)) -> &0 (@Array<u8, SIZE>)  
{
    v@0 : &'_ (@Array<u8, SIZE>);
    self^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SIZE>);
    v@2 : &'_ (@Array<u8, SIZE>);

    v@2 := &(*(self^1)).value;
    v@0 := &*(v@2);
    drop v@2;
    return
  }
324/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::split_at
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::split_at<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SIZE>), mid^2 : usize) -> (&0 (@Slice<u8>), &0 (@Slice<u8>))  
{
    v@0 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    self^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SIZE>);
    mid^2 : usize;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Array<u8, SIZE>);
    v@5 : usize;

    v@4 := &(*(self^1)).value;
    v@3 := move @ArrayToSliceShared<'_, u8, SIZE>(move v@4);
    drop v@4;
    v@5 := copy mid^2;
    v@0 := move core::slice::{@Slice<T>}::split_at<u8>(move v@3, move v@5);
    drop v@5;
    drop v@3;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: core::slice::{@Slice<T>}::split_at<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::split_at<u8>
--> name: core::slice::{@Slice<T>}::split_at
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: (&'0_0 (@Slice<T@0>), &'0_0 (@Slice<T@0>))
325/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::len
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::len<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SIZE>)) -> usize  
{
    v@0 : usize;
    self^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SIZE>);

    v@0 := SIZE;
    return
  }
326/465
Visiting type: libcrux_kyber::types::KyberPublicKey
struct libcrux_kyber::types::KyberPublicKey<SIZE>
{
  value : @Array<u8, SIZE>
}
327/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#13}::as_ref
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#13}::as_ref<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPublicKey<SIZE>)) -> &0 (@Slice<u8>)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberPublicKey<SIZE>);
    v@2 : &'_ (@Array<u8, SIZE>);
    v@3 : &'_ (@Array<u8, SIZE>);

    v@3 := &(*(self^1)).value;
    v@2 := &*(v@3);
    v@0 := move @ArrayToSliceShared<'_, u8, SIZE>(move v@2);
    drop v@2;
    drop v@3;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
328/465
329/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#14}::from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#14}::from<SIZE>(value^1 : @Array<u8, SIZE>) -> libcrux_kyber::types::KyberPublicKey<SIZE>  
{
    v@0 : libcrux_kyber::types::KyberPublicKey<SIZE>;
    value^1 : @Array<u8, SIZE>;
    v@2 : @Array<u8, SIZE>;

    v@2 := copy value^1;
    v@0 := libcrux_kyber::types::KyberPublicKey { value = move v@2; };
    drop v@2;
    return
  }
330/465
331/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#15}::from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#15}::from<0, 1, SIZE>(value^1 : &1 (@Array<u8, SIZE>)) -> libcrux_kyber::types::KyberPublicKey<SIZE>  
{
    v@0 : libcrux_kyber::types::KyberPublicKey<SIZE>;
    value^1 : &'_ (@Array<u8, SIZE>);
    v@2 : @Array<u8, SIZE>;
    v@3 : &'_ (@Array<u8, SIZE>);

    v@3 := &*(value^1);
    v@2 := move core::array::{@Array<T, N>#20}<u8, SIZE>[core::clone::impls::{u8#6}]::clone(move v@3);
    drop v@3;
    v@0 := libcrux_kyber::types::KyberPublicKey { value = move v@2; };
    drop v@2;
    return
  }
Visiting call: core::array::{@Array<T, N>#20}<u8, C@0>[core::clone::impls::{u8#6}]::clone
is_array_map: false
--> 0 type_args, 0 const_generics
--> 1 type_args, 1 const_generics
--> pattern: core::clone::Clone<[u8; @]>::clone
--> name: core::array::{@Array<T, N>#20}::clone
--> args: &'0_0 (@Array<T@0, C@0>), ret: @Array<T@0, C@0>
332/465
333/465
Visiting function: libcrux_kyber::types::{@Array<u8, SIZE>#16}::from
  fn libcrux_kyber::types::{@Array<u8, SIZE>#16}::from<SIZE>(value^1 : libcrux_kyber::types::KyberPublicKey<SIZE>) -> @Array<u8, SIZE>  
{
    v@0 : @Array<u8, SIZE>;
    value^1 : libcrux_kyber::types::KyberPublicKey<SIZE>;

    v@0 := copy (value^1).value;
    return
  }
334/465
335/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#17}::try_from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#17}::try_from<0, 1, SIZE>(value^1 : &1 (@Slice<u8>)) -> core::result::Result<libcrux_kyber::types::KyberPublicKey<SIZE>, libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#17}<0, SIZE>::Error>  
{
    v@0 : core::result::Result<libcrux_kyber::types::KyberPublicKey<SIZE>, core::array::TryFromSliceError>;
    value^1 : &'_ (@Slice<u8>);
    v@2 : core::result::Result<@Array<u8, SIZE>, core::array::TryFromSliceError>;
    v@3 : &'_ (@Slice<u8>);
    value^4 : @Array<u8, SIZE>;
    v@5 : libcrux_kyber::types::KyberPublicKey<SIZE>;
    v@6 : @Array<u8, SIZE>;
    e^7 : core::array::TryFromSliceError;
    v@8 : core::array::TryFromSliceError;

    v@3 := &*(value^1);
    v@2 := move core::convert::{T#6}<&'_ (@Slice<u8>), @Array<u8, SIZE>>[core::array::{@Array<T, N>#7}<'_, u8, SIZE>[core::marker::{u8#38}]]::try_into(move v@3);
    drop v@3;
    fake_read v@2;
    match (v@2) {
    | 0 => {
        value^4 := copy (v@2 as core::result::Result::Ok).0;
        v@6 := copy value^4;
        v@5 := libcrux_kyber::types::KyberPublicKey { value = move v@6; };
        drop v@6;
        v@0 := core::result::Result::core::result::Result::Ok (move v@5);
        drop v@5;
        drop value^4
      }
    | 1 => {
        e^7 := copy (v@2 as core::result::Result::Err).0;
        v@8 := copy e^7;
        v@0 := core::result::Result::core::result::Result::Err (move v@8);
        drop v@8;
        drop e^7
      }
      _ => {
        panic
      }
    };
    drop v@2;
    return
  }
Visiting call: core::convert::{T#6}<&'_ (@Slice<u8>), @Array<u8, C@0>>[core::array::{@Array<T, N>#7}<'_, u8, C@0>[core::marker::{u8#38}]]::try_into
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::convert::TryInto<&'_ [u8], [u8; @]>::try_into
336/465
337/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPublicKey<SIZE>)) -> &0 (@Array<u8, SIZE>)  
{
    v@0 : &'_ (@Array<u8, SIZE>);
    self^1 : &'_ (libcrux_kyber::types::KyberPublicKey<SIZE>);
    v@2 : &'_ (@Array<u8, SIZE>);

    v@2 := &(*(self^1)).value;
    v@0 := &*(v@2);
    drop v@2;
    return
  }
338/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::split_at
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::split_at<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPublicKey<SIZE>), mid^2 : usize) -> (&0 (@Slice<u8>), &0 (@Slice<u8>))  
{
    v@0 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    self^1 : &'_ (libcrux_kyber::types::KyberPublicKey<SIZE>);
    mid^2 : usize;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Array<u8, SIZE>);
    v@5 : usize;

    v@4 := &(*(self^1)).value;
    v@3 := move @ArrayToSliceShared<'_, u8, SIZE>(move v@4);
    drop v@4;
    v@5 := copy mid^2;
    v@0 := move core::slice::{@Slice<T>}::split_at<u8>(move v@3, move v@5);
    drop v@5;
    drop v@3;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, C@0>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: core::slice::{@Slice<T>}::split_at<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::split_at<u8>
--> name: core::slice::{@Slice<T>}::split_at
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: (&'0_0 (@Slice<T@0>), &'0_0 (@Slice<T@0>))
339/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::len
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::len<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPublicKey<SIZE>)) -> usize  
{
    v@0 : usize;
    self^1 : &'_ (libcrux_kyber::types::KyberPublicKey<SIZE>);

    v@0 := SIZE;
    return
  }
340/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberCiphertext<SIZE>), index^2 : usize) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>}<SIZE>::Output)  
{
    v@0 : &'_ (u8);
    self^1 : &'_ (libcrux_kyber::types::KyberCiphertext<SIZE>);
    index^2 : usize;
    v@3 : &'_ (u8);
    v@4 : usize;
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : &'_ (u8);

    v@4 := copy index^2;
    v@5 := &(*(self^1)).value;
    v@6 := move @ArrayIndexShared<'_, u8, SIZE>(move v@5, copy v@4);
    v@3 := &*(v@6);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
341/465
342/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberCiphertext<SIZE>), range^2 : core::ops::range::Range<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberCiphertext<SIZE>);
    range^2 : core::ops::range::Range<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::Range<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := move range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::Range<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::Range<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::Range<usize>>::index
343/465
344/465
Visiting type: core::ops::range::RangeTo
struct core::ops::range::RangeTo<Idx>
{
  end : Idx
}
345/465
346/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeTo<usize>#5}::get
  opaque fn core::slice::index::{core::ops::range::RangeTo<usize>#5}::get<0, T>(core::ops::range::RangeTo<usize>, &0 (@Slice<T>)) -> core::option::Option<&0 (@Slice<T>)>
347/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeTo<usize>#5}::get_mut
  opaque fn core::slice::index::{core::ops::range::RangeTo<usize>#5}::get_mut<0, T>(core::ops::range::RangeTo<usize>, &0 mut (@Slice<T>)) -> core::option::Option<&0 mut (@Slice<T>)>
348/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeTo<usize>#5}::get_unchecked
  opaque unsafe fn core::slice::index::{core::ops::range::RangeTo<usize>#5}::get_unchecked<T>(core::ops::range::RangeTo<usize>, *const @Slice<T>) -> *const @Slice<T>
ERROR translating core::slice::index::{core::ops::range::RangeTo<usize>#5}::get_unchecked: Failure("TODO: TRawPtr")

349/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeTo<usize>#5}::get_unchecked_mut
  opaque unsafe fn core::slice::index::{core::ops::range::RangeTo<usize>#5}::get_unchecked_mut<T>(core::ops::range::RangeTo<usize>, *mut @Slice<T>) -> *mut @Slice<T>
ERROR translating core::slice::index::{core::ops::range::RangeTo<usize>#5}::get_unchecked_mut: Failure("TODO: TRawPtr")

350/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeTo<usize>#5}::index
  opaque fn core::slice::index::{core::ops::range::RangeTo<usize>#5}::index<0, T>(core::ops::range::RangeTo<usize>, &0 (@Slice<T>)) -> &0 (@Slice<T>)
351/465
Visiting opaque function: core::slice::index::{core::ops::range::RangeTo<usize>#5}::index_mut
  opaque fn core::slice::index::{core::ops::range::RangeTo<usize>#5}::index_mut<0, T>(core::ops::range::RangeTo<usize>, &0 mut (@Slice<T>)) -> &0 mut (@Slice<T>)
352/465
353/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#2}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#2}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberCiphertext<SIZE>), range^2 : core::ops::range::RangeTo<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#2}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberCiphertext<SIZE>);
    range^2 : core::ops::range::RangeTo<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::RangeTo<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := copy range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeTo<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeTo<usize>>[core::slice::index::{core::ops::range::RangeTo<usize>#5}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeTo<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeTo<usize>>[core::slice::index::{core::ops::range::RangeTo<usize>#5}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::RangeTo<usize>>::index
354/465
355/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#3}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#3}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberCiphertext<SIZE>), range^2 : core::ops::range::RangeFrom<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberCiphertext<SIZE>#3}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberCiphertext<SIZE>);
    range^2 : core::ops::range::RangeFrom<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::RangeFrom<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := move range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::RangeFrom<usize>>::index
356/465
357/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#4}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#4}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SIZE>), index^2 : usize) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#4}<SIZE>::Output)  
{
    v@0 : &'_ (u8);
    self^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SIZE>);
    index^2 : usize;
    v@3 : &'_ (u8);
    v@4 : usize;
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : &'_ (u8);

    v@4 := copy index^2;
    v@5 := &(*(self^1)).value;
    v@6 := move @ArrayIndexShared<'_, u8, SIZE>(move v@5, copy v@4);
    v@3 := &*(v@6);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
358/465
359/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#5}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#5}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SIZE>), range^2 : core::ops::range::Range<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#5}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SIZE>);
    range^2 : core::ops::range::Range<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::Range<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := move range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::Range<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::Range<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::Range<usize>>::index
360/465
361/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#6}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#6}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SIZE>), range^2 : core::ops::range::RangeTo<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#6}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SIZE>);
    range^2 : core::ops::range::RangeTo<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::RangeTo<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := copy range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeTo<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeTo<usize>>[core::slice::index::{core::ops::range::RangeTo<usize>#5}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeTo<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeTo<usize>>[core::slice::index::{core::ops::range::RangeTo<usize>#5}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::RangeTo<usize>>::index
362/465
363/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#7}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#7}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SIZE>), range^2 : core::ops::range::RangeFrom<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPrivateKey<SIZE>#7}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SIZE>);
    range^2 : core::ops::range::RangeFrom<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::RangeFrom<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := move range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::RangeFrom<usize>>::index
364/465
365/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#8}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#8}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPublicKey<SIZE>), index^2 : usize) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#8}<SIZE>::Output)  
{
    v@0 : &'_ (u8);
    self^1 : &'_ (libcrux_kyber::types::KyberPublicKey<SIZE>);
    index^2 : usize;
    v@3 : &'_ (u8);
    v@4 : usize;
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : &'_ (u8);

    v@4 := copy index^2;
    v@5 := &(*(self^1)).value;
    v@6 := move @ArrayIndexShared<'_, u8, SIZE>(move v@5, copy v@4);
    v@3 := &*(v@6);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
366/465
367/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#9}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#9}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPublicKey<SIZE>), range^2 : core::ops::range::Range<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#9}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberPublicKey<SIZE>);
    range^2 : core::ops::range::Range<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::Range<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := move range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::Range<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::Range<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::Range<usize>>::index
368/465
369/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#10}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#10}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPublicKey<SIZE>), range^2 : core::ops::range::RangeTo<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#10}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberPublicKey<SIZE>);
    range^2 : core::ops::range::RangeTo<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::RangeTo<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := copy range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeTo<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeTo<usize>>[core::slice::index::{core::ops::range::RangeTo<usize>#5}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeTo<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeTo<usize>>[core::slice::index::{core::ops::range::RangeTo<usize>#5}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::RangeTo<usize>>::index
370/465
371/465
Visiting function: libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#11}::index
  fn libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#11}::index<0, SIZE>(self^1 : &0 (libcrux_kyber::types::KyberPublicKey<SIZE>), range^2 : core::ops::range::RangeFrom<usize>) -> &0 (libcrux_kyber::types::index_impls::{libcrux_kyber::types::KyberPublicKey<SIZE>#11}<SIZE>::Output)  
{
    v@0 : &'_ (@Slice<u8>);
    self^1 : &'_ (libcrux_kyber::types::KyberPublicKey<SIZE>);
    range^2 : core::ops::range::RangeFrom<usize>;
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, SIZE>);
    v@6 : core::ops::range::RangeFrom<usize>;

    v@5 := &(*(self^1)).value;
    v@6 := move range^2;
    v@4 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, SIZE>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index(move v@5, move v@6);
    drop v@6;
    drop v@5;
    v@3 := &*(v@4);
    v@0 := &*(v@3);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, C@0>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; @], core::ops::range::RangeFrom<usize>>::index
372/465
373/465
Visiting type: libcrux_kyber::types::KyberKeyPair
struct libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>
{
  sk : libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>,
  pk : libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>
}
374/465
375/465
Visiting opaque function: core::convert::{T#3}::into
  opaque fn core::convert::{T#3}::into<T, U>(T) -> U
  where
    // Inherited clauses
    [TraitClause@0]: core::convert::From<U, T>,
376/465
377/465
Visiting opaque function: core::convert::Into::into
  opaque fn core::convert::Into::into<Self, T>(Self) -> T
378/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::new
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::new<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>(sk^1 : @Array<u8, PRIVATE_KEY_SIZE>, pk^2 : @Array<u8, PUBLIC_KEY_SIZE>) -> libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>  
{
    v@0 : libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>;
    sk^1 : @Array<u8, PRIVATE_KEY_SIZE>;
    pk^2 : @Array<u8, PUBLIC_KEY_SIZE>;
    v@3 : libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>;
    v@4 : @Array<u8, PRIVATE_KEY_SIZE>;
    v@5 : libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>;
    v@6 : @Array<u8, PUBLIC_KEY_SIZE>;

    v@4 := copy sk^1;
    v@3 := move core::convert::{T#3}<@Array<u8, PRIVATE_KEY_SIZE>, libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>>[libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}<PRIVATE_KEY_SIZE>]::into(move v@4);
    drop v@4;
    v@6 := copy pk^2;
    v@5 := move core::convert::{T#3}<@Array<u8, PUBLIC_KEY_SIZE>, libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>>[libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#14}<PUBLIC_KEY_SIZE>]::into(move v@6);
    drop v@6;
    v@0 := libcrux_kyber::types::KyberKeyPair { sk = move v@3; pk = move v@5; };
    drop v@5;
    drop v@3;
    return
  }
Visiting call: core::convert::{T#3}<@Array<u8, C@0>, libcrux_kyber::types::KyberPrivateKey<C@0>>[libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}<C@0>]::into
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::convert::Into<[u8; @], libcrux_kyber::types::KyberPrivateKey<@>>::into
--> name: core::convert::{T#3}::into
--> args: T@0, ret: T@1
Visiting call: core::convert::{T#3}<@Array<u8, C@1>, libcrux_kyber::types::KyberPublicKey<C@1>>[libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#14}<C@1>]::into
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::convert::Into<[u8; @], libcrux_kyber::types::KyberPublicKey<@>>::into
--> name: core::convert::{T#3}::into
--> args: T@0, ret: T@1
379/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::from
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::from<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>(sk^1 : libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>, pk^2 : libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>) -> libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>  
{
    v@0 : libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>;
    sk^1 : libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>;
    pk^2 : libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>;
    v@3 : libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>;
    v@4 : libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>;

    v@3 := move sk^1;
    v@4 := move pk^2;
    v@0 := libcrux_kyber::types::KyberKeyPair { sk = move v@3; pk = move v@4; };
    drop v@4;
    drop v@3;
    return
  }
380/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::public_key
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::public_key<0, PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>(self^1 : &0 (libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>)) -> &0 (libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>)  
{
    v@0 : &'_ (libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>);
    self^1 : &'_ (libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>);
    v@2 : &'_ (libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>);

    v@2 := &(*(self^1)).pk;
    v@0 := &*(v@2);
    drop v@2;
    return
  }
381/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::private_key
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::private_key<0, PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>(self^1 : &0 (libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>)) -> &0 (libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>)  
{
    v@0 : &'_ (libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>);
    self^1 : &'_ (libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>);
    v@2 : &'_ (libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>);

    v@2 := &(*(self^1)).sk;
    v@0 := &*(v@2);
    drop v@2;
    return
  }
382/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::pk
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::pk<0, PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>(self^1 : &0 (libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>)) -> &0 (@Array<u8, PUBLIC_KEY_SIZE>)  
{
    v@0 : &'_ (@Array<u8, PUBLIC_KEY_SIZE>);
    self^1 : &'_ (libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>);
    v@2 : &'_ (@Array<u8, PUBLIC_KEY_SIZE>);
    v@3 : &'_ (libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>);

    v@3 := &(*(self^1)).pk;
    v@2 := move libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice<PUBLIC_KEY_SIZE>(move v@3);
    v@0 := &*(v@2);
    drop v@3;
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<@SIZE>}::as_slice<@>
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice
--> args: &'0_0 (libcrux_kyber::types::KyberPublicKey<C@0>), ret: &'0_0 (@Array<u8, C@0>)
383/465
Visiting function: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::sk
  fn libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::sk<0, PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>(self^1 : &0 (libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>)) -> &0 (@Array<u8, PRIVATE_KEY_SIZE>)  
{
    v@0 : &'_ (@Array<u8, PRIVATE_KEY_SIZE>);
    self^1 : &'_ (libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>);
    v@2 : &'_ (@Array<u8, PRIVATE_KEY_SIZE>);
    v@3 : &'_ (libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>);

    v@3 := &(*(self^1)).sk;
    v@2 := move libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::as_slice<PRIVATE_KEY_SIZE>(move v@3);
    v@0 := &*(v@2);
    drop v@3;
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::as_slice<C@0>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<@SIZE>}::as_slice<@>
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::as_slice
--> args: &'0_0 (libcrux_kyber::types::KyberPrivateKey<C@0>), ret: &'0_0 (@Array<u8, C@0>)
384/465
Visiting global: libcrux_kyber::kyber1024::RANK_1024
  global libcrux_kyber::kyber1024::RANK_1024 : usize = libcrux_kyber::kyber1024::RANK_1024
Corresponding body:  fn libcrux_kyber::kyber1024::RANK_1024() -> usize  
{
    v@0 : usize;

    v@0 := (4: usize : usize);
    return
  }
385/465
Visiting global: libcrux_kyber::kyber1024::RANKED_BYTES_PER_RING_ELEMENT_1024
  global libcrux_kyber::kyber1024::RANKED_BYTES_PER_RING_ELEMENT_1024 : usize = libcrux_kyber::kyber1024::RANKED_BYTES_PER_RING_ELEMENT_1024
Corresponding body:  fn libcrux_kyber::kyber1024::RANKED_BYTES_PER_RING_ELEMENT_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::kyber1024::RANK_1024;
    v@3 := global libcrux_kyber::constants::BITS_PER_RING_ELEMENT;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
386/465
Visiting global: libcrux_kyber::kyber1024::T_AS_NTT_ENCODED_SIZE_1024
  global libcrux_kyber::kyber1024::T_AS_NTT_ENCODED_SIZE_1024 : usize = libcrux_kyber::kyber1024::T_AS_NTT_ENCODED_SIZE_1024
Corresponding body:  fn libcrux_kyber::kyber1024::T_AS_NTT_ENCODED_SIZE_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;

    v@3 := global libcrux_kyber::kyber1024::RANK_1024;
    v@4 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@2 := move v@3 * move v@4;
    v@5 := global libcrux_kyber::constants::BITS_PER_COEFFICIENT;
    v@1 := copy v@2 * move v@5;
    drop v@2;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
387/465
Visiting global: libcrux_kyber::kyber1024::VECTOR_U_COMPRESSION_FACTOR_1024
  global libcrux_kyber::kyber1024::VECTOR_U_COMPRESSION_FACTOR_1024 : usize = libcrux_kyber::kyber1024::VECTOR_U_COMPRESSION_FACTOR_1024
Corresponding body:  fn libcrux_kyber::kyber1024::VECTOR_U_COMPRESSION_FACTOR_1024() -> usize  
{
    v@0 : usize;

    v@0 := (11: usize : usize);
    return
  }
388/465
Visiting global: libcrux_kyber::kyber1024::C1_BLOCK_SIZE_1024
  global libcrux_kyber::kyber1024::C1_BLOCK_SIZE_1024 : usize = libcrux_kyber::kyber1024::C1_BLOCK_SIZE_1024
Corresponding body:  fn libcrux_kyber::kyber1024::C1_BLOCK_SIZE_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@3 := global libcrux_kyber::kyber1024::VECTOR_U_COMPRESSION_FACTOR_1024;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
389/465
Visiting global: libcrux_kyber::kyber1024::C1_SIZE_1024
  global libcrux_kyber::kyber1024::C1_SIZE_1024 : usize = libcrux_kyber::kyber1024::C1_SIZE_1024
Corresponding body:  fn libcrux_kyber::kyber1024::C1_SIZE_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::kyber1024::C1_BLOCK_SIZE_1024;
    v@2 := global libcrux_kyber::kyber1024::RANK_1024;
    v@0 := move v@1 * move v@2;
    return
  }
390/465
Visiting global: libcrux_kyber::kyber1024::VECTOR_V_COMPRESSION_FACTOR_1024
  global libcrux_kyber::kyber1024::VECTOR_V_COMPRESSION_FACTOR_1024 : usize = libcrux_kyber::kyber1024::VECTOR_V_COMPRESSION_FACTOR_1024
Corresponding body:  fn libcrux_kyber::kyber1024::VECTOR_V_COMPRESSION_FACTOR_1024() -> usize  
{
    v@0 : usize;

    v@0 := (5: usize : usize);
    return
  }
391/465
Visiting global: libcrux_kyber::kyber1024::C2_SIZE_1024
  global libcrux_kyber::kyber1024::C2_SIZE_1024 : usize = libcrux_kyber::kyber1024::C2_SIZE_1024
Corresponding body:  fn libcrux_kyber::kyber1024::C2_SIZE_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@3 := global libcrux_kyber::kyber1024::VECTOR_V_COMPRESSION_FACTOR_1024;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
392/465
Visiting global: libcrux_kyber::kyber1024::CPA_PKE_SECRET_KEY_SIZE_1024
  global libcrux_kyber::kyber1024::CPA_PKE_SECRET_KEY_SIZE_1024 : usize = libcrux_kyber::kyber1024::CPA_PKE_SECRET_KEY_SIZE_1024
Corresponding body:  fn libcrux_kyber::kyber1024::CPA_PKE_SECRET_KEY_SIZE_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;

    v@3 := global libcrux_kyber::kyber1024::RANK_1024;
    v@4 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@2 := move v@3 * move v@4;
    v@5 := global libcrux_kyber::constants::BITS_PER_COEFFICIENT;
    v@1 := copy v@2 * move v@5;
    drop v@2;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
393/465
Visiting global: libcrux_kyber::kyber1024::CPA_PKE_PUBLIC_KEY_SIZE_1024
  global libcrux_kyber::kyber1024::CPA_PKE_PUBLIC_KEY_SIZE_1024 : usize = libcrux_kyber::kyber1024::CPA_PKE_PUBLIC_KEY_SIZE_1024
Corresponding body:  fn libcrux_kyber::kyber1024::CPA_PKE_PUBLIC_KEY_SIZE_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber1024::T_AS_NTT_ENCODED_SIZE_1024;
    v@0 := move v@1 + (32: usize : usize);
    return
  }
394/465
Visiting global: libcrux_kyber::kyber1024::CPA_PKE_CIPHERTEXT_SIZE_1024
  global libcrux_kyber::kyber1024::CPA_PKE_CIPHERTEXT_SIZE_1024 : usize = libcrux_kyber::kyber1024::CPA_PKE_CIPHERTEXT_SIZE_1024
Corresponding body:  fn libcrux_kyber::kyber1024::CPA_PKE_CIPHERTEXT_SIZE_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::kyber1024::C1_SIZE_1024;
    v@2 := global libcrux_kyber::kyber1024::C2_SIZE_1024;
    v@0 := move v@1 + move v@2;
    return
  }
395/465
Visiting global: libcrux_kyber::kyber1024::SECRET_KEY_SIZE_1024
  global libcrux_kyber::kyber1024::SECRET_KEY_SIZE_1024 : usize = libcrux_kyber::kyber1024::SECRET_KEY_SIZE_1024
Corresponding body:  fn libcrux_kyber::kyber1024::SECRET_KEY_SIZE_1024() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;
    v@6 : usize;

    v@3 := global libcrux_kyber::kyber1024::CPA_PKE_SECRET_KEY_SIZE_1024;
    v@4 := global libcrux_kyber::kyber1024::CPA_PKE_PUBLIC_KEY_SIZE_1024;
    v@2 := move v@3 + move v@4;
    v@5 := global libcrux_kyber::constants::H_DIGEST_SIZE;
    v@1 := copy v@2 + move v@5;
    drop v@2;
    v@6 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@0 := copy v@1 + move v@6;
    drop v@1;
    return
  }
396/465
Visiting global: libcrux_kyber::kyber1024::ETA1
  global libcrux_kyber::kyber1024::ETA1 : usize = libcrux_kyber::kyber1024::ETA1
Corresponding body:  fn libcrux_kyber::kyber1024::ETA1() -> usize  
{
    v@0 : usize;

    v@0 := (2: usize : usize);
    return
  }
397/465
Visiting global: libcrux_kyber::kyber1024::ETA1_RANDOMNESS_SIZE
  global libcrux_kyber::kyber1024::ETA1_RANDOMNESS_SIZE : usize = libcrux_kyber::kyber1024::ETA1_RANDOMNESS_SIZE
Corresponding body:  fn libcrux_kyber::kyber1024::ETA1_RANDOMNESS_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber1024::ETA1;
    v@0 := move v@1 * (64: usize : usize);
    return
  }
398/465
Visiting global: libcrux_kyber::kyber1024::ETA2
  global libcrux_kyber::kyber1024::ETA2 : usize = libcrux_kyber::kyber1024::ETA2
Corresponding body:  fn libcrux_kyber::kyber1024::ETA2() -> usize  
{
    v@0 : usize;

    v@0 := (2: usize : usize);
    return
  }
399/465
Visiting global: libcrux_kyber::kyber1024::ETA2_RANDOMNESS_SIZE
  global libcrux_kyber::kyber1024::ETA2_RANDOMNESS_SIZE : usize = libcrux_kyber::kyber1024::ETA2_RANDOMNESS_SIZE
Corresponding body:  fn libcrux_kyber::kyber1024::ETA2_RANDOMNESS_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber1024::ETA2;
    v@0 := move v@1 * (64: usize : usize);
    return
  }
400/465
Visiting global: libcrux_kyber::kyber1024::IMPLICIT_REJECTION_HASH_INPUT_SIZE
  global libcrux_kyber::kyber1024::IMPLICIT_REJECTION_HASH_INPUT_SIZE : usize = libcrux_kyber::kyber1024::IMPLICIT_REJECTION_HASH_INPUT_SIZE
Corresponding body:  fn libcrux_kyber::kyber1024::IMPLICIT_REJECTION_HASH_INPUT_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@2 := global libcrux_kyber::kyber1024::CPA_PKE_CIPHERTEXT_SIZE_1024;
    v@0 := move v@1 + move v@2;
    return
  }
401/465
Visiting function: libcrux_kyber::serialize_kem_secret_key
  fn libcrux_kyber::serialize_kem_secret_key<0, 1, 2, SERIALIZED_KEY_LEN>(private_key^1 : &0 (@Slice<u8>), public_key^2 : &1 (@Slice<u8>), implicit_rejection_value^3 : &2 (@Slice<u8>)) -> @Array<u8, SERIALIZED_KEY_LEN>  
{
    v@0 : @Array<u8, SERIALIZED_KEY_LEN>;
    private_key^1 : &'_ (@Slice<u8>);
    public_key^2 : &'_ (@Slice<u8>);
    implicit_rejection_value^3 : &'_ (@Slice<u8>);
    out^4 : @Array<u8, SERIALIZED_KEY_LEN>;
    pointer^5 : usize;
    v@6 : ();
    v@7 : &'_ mut (@Slice<u8>);
    v@8 : &'_ mut (@Slice<u8>);
    v@9 : &'_ mut (@Array<u8, SERIALIZED_KEY_LEN>);
    v@10 : core::ops::range::Range<usize>;
    v@11 : usize;
    v@12 : usize;
    v@13 : usize;
    v@14 : usize;
    v@15 : &'_ (@Slice<u8>);
    v@16 : &'_ (@Slice<u8>);
    v@17 : usize;
    v@18 : &'_ (@Slice<u8>);
    v@19 : ();
    v@20 : &'_ mut (@Slice<u8>);
    v@21 : &'_ mut (@Slice<u8>);
    v@22 : &'_ mut (@Array<u8, SERIALIZED_KEY_LEN>);
    v@23 : core::ops::range::Range<usize>;
    v@24 : usize;
    v@25 : usize;
    v@26 : usize;
    v@27 : usize;
    v@28 : &'_ (@Slice<u8>);
    v@29 : &'_ (@Slice<u8>);
    v@30 : usize;
    v@31 : &'_ (@Slice<u8>);
    v@32 : ();
    v@33 : &'_ mut (@Slice<u8>);
    v@34 : &'_ mut (@Slice<u8>);
    v@35 : &'_ mut (@Array<u8, SERIALIZED_KEY_LEN>);
    v@36 : core::ops::range::Range<usize>;
    v@37 : usize;
    v@38 : usize;
    v@39 : usize;
    v@40 : &'_ (@Slice<u8>);
    v@41 : &'_ (@Array<u8, 32: usize>);
    v@42 : &'_ (@Array<u8, 32: usize>);
    v@43 : @Array<u8, 32: usize>;
    v@44 : &'_ (@Slice<u8>);
    v@45 : ();
    v@46 : &'_ mut (@Slice<u8>);
    v@47 : &'_ mut (@Slice<u8>);
    v@48 : &'_ mut (@Array<u8, SERIALIZED_KEY_LEN>);
    v@49 : core::ops::range::Range<usize>;
    v@50 : usize;
    v@51 : usize;
    v@52 : usize;
    v@53 : usize;
    v@54 : &'_ (@Slice<u8>);
    v@55 : &'_ (@Slice<u8>);
    v@56 : usize;
    v@57 : usize;

    out^4 := move @ArrayRepeat<'_, u8, SERIALIZED_KEY_LEN>((0: u8 : u8));
    fake_read out^4;
    pointer^5 := (0: usize : usize);
    fake_read pointer^5;
    v@9 := &mut out^4;
    v@11 := copy pointer^5;
    v@13 := copy pointer^5;
    v@15 := &*(private_key^1);
    v@14 := move core::slice::{@Slice<T>}::len<u8>(move v@15);
    drop v@15;
    v@12 := move v@13 + move v@14;
    drop v@14;
    drop v@13;
    v@10 := core::ops::range::Range { start = move v@11; end = move v@12; };
    drop v@12;
    drop v@11;
    v@8 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, SERIALIZED_KEY_LEN>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut(move v@9, move v@10);
    v@7 := &two-phase *(v@8);
    drop v@10;
    drop v@9;
    v@16 := &*(private_key^1);
    v@6 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@7, move v@16);
    drop v@16;
    drop v@7;
    drop v@8;
    drop v@6;
    v@18 := &*(private_key^1);
    v@17 := move core::slice::{@Slice<T>}::len<u8>(move v@18);
    drop v@18;
    pointer^5 := copy pointer^5 + move v@17;
    drop v@17;
    v@22 := &mut out^4;
    v@24 := copy pointer^5;
    v@26 := copy pointer^5;
    v@28 := &*(public_key^2);
    v@27 := move core::slice::{@Slice<T>}::len<u8>(move v@28);
    drop v@28;
    v@25 := move v@26 + move v@27;
    drop v@27;
    drop v@26;
    v@23 := core::ops::range::Range { start = move v@24; end = move v@25; };
    drop v@25;
    drop v@24;
    v@21 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, SERIALIZED_KEY_LEN>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut(move v@22, move v@23);
    v@20 := &two-phase *(v@21);
    drop v@23;
    drop v@22;
    v@29 := &*(public_key^2);
    v@19 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@20, move v@29);
    drop v@29;
    drop v@20;
    drop v@21;
    drop v@19;
    v@31 := &*(public_key^2);
    v@30 := move core::slice::{@Slice<T>}::len<u8>(move v@31);
    drop v@31;
    pointer^5 := copy pointer^5 + move v@30;
    drop v@30;
    v@35 := &mut out^4;
    v@37 := copy pointer^5;
    v@39 := copy pointer^5;
    v@56 := global libcrux_kyber::constants::H_DIGEST_SIZE;
    v@38 := move v@39 + move v@56;
    drop v@39;
    v@36 := core::ops::range::Range { start = move v@37; end = move v@38; };
    drop v@38;
    drop v@37;
    v@34 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, SERIALIZED_KEY_LEN>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut(move v@35, move v@36);
    v@33 := &two-phase *(v@34);
    drop v@36;
    drop v@35;
    v@44 := &*(public_key^2);
    v@43 := move libcrux_kyber::hash_functions::H(move v@44);
    drop v@44;
    v@42 := &v@43;
    v@41 := &*(v@42);
    v@40 := move @ArrayToSliceShared<'_, u8, 32: usize>(move v@41);
    drop v@41;
    v@32 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@33, move v@40);
    drop v@40;
    drop v@33;
    drop v@43;
    drop v@42;
    drop v@34;
    drop v@32;
    v@57 := global libcrux_kyber::constants::H_DIGEST_SIZE;
    pointer^5 := copy pointer^5 + move v@57;
    v@48 := &mut out^4;
    v@50 := copy pointer^5;
    v@52 := copy pointer^5;
    v@54 := &*(implicit_rejection_value^3);
    v@53 := move core::slice::{@Slice<T>}::len<u8>(move v@54);
    drop v@54;
    v@51 := move v@52 + move v@53;
    drop v@53;
    drop v@52;
    v@49 := core::ops::range::Range { start = move v@50; end = move v@51; };
    drop v@51;
    drop v@50;
    v@47 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, SERIALIZED_KEY_LEN>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut(move v@48, move v@49);
    v@46 := &two-phase *(v@47);
    drop v@49;
    drop v@48;
    v@55 := &*(implicit_rejection_value^3);
    v@45 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@46, move v@55);
    drop v@55;
    drop v@46;
    drop v@47;
    drop v@45;
    v@0 := copy out^4;
    drop pointer^5;
    drop out^4;
    return
  }
Visiting call: core::slice::{@Slice<T>}::len<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::len<u8>
--> name: core::slice::{@Slice<T>}::len
--> args: &'0_0 (@Slice<T@0>), ret: usize
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, C@0>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::Range<usize>>::index_mut
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
Visiting call: core::slice::{@Slice<T>}::len<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::len<u8>
--> name: core::slice::{@Slice<T>}::len
--> args: &'0_0 (@Slice<T@0>), ret: usize
Visiting call: core::slice::{@Slice<T>}::len<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::len<u8>
--> name: core::slice::{@Slice<T>}::len
--> args: &'0_0 (@Slice<T@0>), ret: usize
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, C@0>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::Range<usize>>::index_mut
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
Visiting call: core::slice::{@Slice<T>}::len<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::len<u8>
--> name: core::slice::{@Slice<T>}::len
--> args: &'0_0 (@Slice<T@0>), ret: usize
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, C@0>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::Range<usize>>::index_mut
Visiting call: libcrux_kyber::hash_functions::H
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::hash_functions::H
--> name: libcrux_kyber::hash_functions::H
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, 32: usize>
Visiting call: @ArrayToSliceShared<'_, u8, 32: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 32>
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
Visiting call: core::slice::{@Slice<T>}::len<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::len<u8>
--> name: core::slice::{@Slice<T>}::len
--> args: &'0_0 (@Slice<T@0>), ret: usize
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::Range<usize>, C@0>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::Range<usize>>::index_mut
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
402/465
Visiting function: libcrux_kyber::generate_keypair
  fn libcrux_kyber::generate_keypair<K, CPA_PRIVATE_KEY_SIZE, PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE, BYTES_PER_RING_ELEMENT, ETA1, ETA1_RANDOMNESS_SIZE>(randomness^1 : @Array<u8, 64: usize>) -> libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>  
{
    v@0 : libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>;
    randomness^1 : @Array<u8, 64: usize>;
    ind_cpa_keypair_randomness^2 : &'_ (@Slice<u8>);
    v@3 : &'_ (@Slice<u8>);
    v@4 : &'_ (@Array<u8, 64: usize>);
    v@5 : core::ops::range::Range<usize>;
    implicit_rejection_value^6 : &'_ (@Slice<u8>);
    v@7 : &'_ (@Slice<u8>);
    v@8 : &'_ (@Array<u8, 64: usize>);
    v@9 : core::ops::range::RangeFrom<usize>;
    ind_cpa_private_key^10 : @Array<u8, CPA_PRIVATE_KEY_SIZE>;
    public_key^11 : @Array<u8, PUBLIC_KEY_SIZE>;
    v@12 : (@Array<u8, CPA_PRIVATE_KEY_SIZE>, @Array<u8, PUBLIC_KEY_SIZE>);
    v@13 : &'_ (@Slice<u8>);
    secret_key_serialized^14 : @Array<u8, PRIVATE_KEY_SIZE>;
    v@15 : &'_ (@Slice<u8>);
    v@16 : &'_ (@Array<u8, CPA_PRIVATE_KEY_SIZE>);
    v@17 : &'_ (@Array<u8, CPA_PRIVATE_KEY_SIZE>);
    v@18 : &'_ (@Slice<u8>);
    v@19 : &'_ (@Array<u8, PUBLIC_KEY_SIZE>);
    v@20 : &'_ (@Array<u8, PUBLIC_KEY_SIZE>);
    v@21 : &'_ (@Slice<u8>);
    private_key^22 : libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>;
    v@23 : @Array<u8, PRIVATE_KEY_SIZE>;
    v@24 : libcrux_kyber::types::KyberPrivateKey<PRIVATE_KEY_SIZE>;
    v@25 : libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>;
    v@26 : @Array<u8, PUBLIC_KEY_SIZE>;
    v@27 : usize;
    v@28 : usize;

    v@4 := &randomness^1;
    v@27 := global libcrux_kyber::constants::CPA_PKE_KEY_GENERATION_SEED_SIZE;
    v@5 := core::ops::range::Range { start = (0: usize : usize); end = move v@27; };
    v@3 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::Range<usize>, 64: usize>[core::slice::index::{@Slice<T>}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index(move v@4, move v@5);
    drop v@5;
    drop v@4;
    ind_cpa_keypair_randomness^2 := &*(v@3);
    fake_read ind_cpa_keypair_randomness^2;
    v@8 := &randomness^1;
    v@28 := global libcrux_kyber::constants::CPA_PKE_KEY_GENERATION_SEED_SIZE;
    v@9 := core::ops::range::RangeFrom { start = move v@28; };
    v@7 := move core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, 64: usize>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index(move v@8, move v@9);
    drop v@9;
    drop v@8;
    implicit_rejection_value^6 := &*(v@7);
    fake_read implicit_rejection_value^6;
    v@13 := &*(ind_cpa_keypair_randomness^2);
    v@12 := move libcrux_kyber::ind_cpa::generate_keypair<K, CPA_PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE, BYTES_PER_RING_ELEMENT, ETA1, ETA1_RANDOMNESS_SIZE>(move v@13);
    drop v@13;
    fake_read v@12;
    ind_cpa_private_key^10 := copy (v@12).0;
    public_key^11 := copy (v@12).1;
    drop v@12;
    v@17 := &ind_cpa_private_key^10;
    v@16 := &*(v@17);
    v@15 := move @ArrayToSliceShared<'_, u8, CPA_PRIVATE_KEY_SIZE>(move v@16);
    drop v@16;
    v@20 := &public_key^11;
    v@19 := &*(v@20);
    v@18 := move @ArrayToSliceShared<'_, u8, PUBLIC_KEY_SIZE>(move v@19);
    drop v@19;
    v@21 := &*(implicit_rejection_value^6);
    secret_key_serialized^14 := move libcrux_kyber::serialize_kem_secret_key<PRIVATE_KEY_SIZE>(move v@15, move v@18, move v@21);
    drop v@21;
    drop v@18;
    drop v@15;
    fake_read secret_key_serialized^14;
    drop v@20;
    drop v@17;
    v@23 := copy secret_key_serialized^14;
    private_key^22 := move libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}<PRIVATE_KEY_SIZE>::from(move v@23);
    drop v@23;
    fake_read private_key^22;
    v@24 := move private_key^22;
    v@26 := copy public_key^11;
    v@25 := move core::convert::{T#3}<@Array<u8, PUBLIC_KEY_SIZE>, libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>>[libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#14}<PUBLIC_KEY_SIZE>]::into(move v@26);
    drop v@26;
    v@0 := move libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::from<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>(move v@24, move v@25);
    drop v@25;
    drop v@24;
    drop private_key^22;
    drop secret_key_serialized^14;
    drop public_key^11;
    drop ind_cpa_private_key^10;
    drop v@7;
    drop implicit_rejection_value^6;
    drop v@3;
    drop ind_cpa_keypair_randomness^2;
    return
  }
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::Range<usize>, 64: usize>[core::slice::index::{@Slice<T>}<u8, core::ops::range::Range<usize>>[core::slice::index::{core::ops::range::Range<usize>#4}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; 64], core::ops::range::Range<usize>>::index
Visiting call: core::array::{@Array<T, N>#15}<u8, core::ops::range::RangeFrom<usize>, 64: usize>[core::slice::index::{@Slice<T>}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::Index<[u8; 64], core::ops::range::RangeFrom<usize>>::index
Visiting call: libcrux_kyber::ind_cpa::generate_keypair<C@0, C@1, C@3, C@4, C@5, C@6>
is_array_map: false
--> 0 type_args, 6 const_generics
--> 0 type_args, 6 const_generics
--> pattern: libcrux_kyber::ind_cpa::generate_keypair<@, @, @, @, @, @>
--> name: libcrux_kyber::ind_cpa::generate_keypair
--> args: &'0_0 (@Slice<u8>), ret: (@Array<u8, C@1>, @Array<u8, C@2>)
Visiting call: @ArrayToSliceShared<'_, u8, C@1>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: @ArrayToSliceShared<'_, u8, C@3>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::serialize_kem_secret_key<C@2>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::serialize_kem_secret_key<@>
--> name: libcrux_kyber::serialize_kem_secret_key
--> args: &'0_0 (@Slice<u8>) ++ &'0_1 (@Slice<u8>) ++ &'0_2 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}<C@2>::from
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 1 const_generics
--> pattern: core::convert::From<libcrux_kyber::types::KyberPrivateKey<@>, [u8; @]>::from
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}::from
--> args: @Array<u8, C@0>, ret: libcrux_kyber::types::KyberPrivateKey<C@0>
Visiting call: core::convert::{T#3}<@Array<u8, C@3>, libcrux_kyber::types::KyberPublicKey<C@3>>[libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#14}<C@3>]::into
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::convert::Into<[u8; @], libcrux_kyber::types::KyberPublicKey<@>>::into
--> name: core::convert::{T#3}::into
--> args: T@0, ret: T@1
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::from<C@2, C@3>
is_array_map: false
--> 0 type_args, 2 const_generics
--> 0 type_args, 2 const_generics
--> pattern: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<@PRIVATE_KEY_SIZE, @PUBLIC_KEY_SIZE>}::from<@, @>
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}::from
--> args: libcrux_kyber::types::KyberPrivateKey<C@0> ++ libcrux_kyber::types::KyberPublicKey<C@1>, ret: libcrux_kyber::types::KyberKeyPair<C@0, C@1>
403/465
Visiting function: libcrux_kyber::kyber1024::generate_key_pair_1024
  fn libcrux_kyber::kyber1024::generate_key_pair_1024(randomness^1 : @Array<u8, 64: usize>) -> libcrux_kyber::types::KyberKeyPair<3168: usize, 1568: usize>  
{
    v@0 : libcrux_kyber::types::KyberKeyPair<3168: usize, 1568: usize>;
    randomness^1 : @Array<u8, 64: usize>;
    v@2 : @Array<u8, 64: usize>;

    v@2 := copy randomness^1;
    v@0 := move libcrux_kyber::generate_keypair<4: usize, 1536: usize, 3168: usize, 1568: usize, 1536: usize, 2: usize, 128: usize>(move v@2);
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::generate_keypair<4: usize, 1536: usize, 3168: usize, 1568: usize, 1536: usize, 2: usize, 128: usize>
is_array_map: false
--> 0 type_args, 7 const_generics
--> 0 type_args, 7 const_generics
--> pattern: libcrux_kyber::generate_keypair<4, 1536, 3168, 1568, 1536, 2, 128>
--> name: libcrux_kyber::generate_keypair
--> args: @Array<u8, 64: usize>, ret: libcrux_kyber::types::KyberKeyPair<C@2, C@3>
404/465
Visiting function: libcrux_kyber::encapsulate
  fn libcrux_kyber::encapsulate<0, K, CIPHERTEXT_SIZE, PUBLIC_KEY_SIZE, T_AS_NTT_ENCODED_SIZE, C1_SIZE, C2_SIZE, VECTOR_U_COMPRESSION_FACTOR, VECTOR_V_COMPRESSION_FACTOR, VECTOR_U_BLOCK_LEN, ETA1, ETA1_RANDOMNESS_SIZE, ETA2, ETA2_RANDOMNESS_SIZE>(public_key^1 : &0 (libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>), randomness^2 : @Array<u8, 32: usize>) -> (libcrux_kyber::types::KyberCiphertext<CIPHERTEXT_SIZE>, @Array<u8, 32: usize>)  
{
    v@0 : (libcrux_kyber::types::KyberCiphertext<CIPHERTEXT_SIZE>, @Array<u8, 32: usize>);
    public_key^1 : &'_ (libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>);
    randomness^2 : @Array<u8, 32: usize>;
    to_hash^3 : @Array<u8, 64: usize>;
    v@4 : &'_ (@Slice<u8>);
    v@5 : &'_ (@Array<u8, 32: usize>);
    v@6 : &'_ (@Array<u8, 32: usize>);
    v@7 : ();
    v@8 : &'_ mut (@Slice<u8>);
    v@9 : &'_ mut (@Slice<u8>);
    v@10 : &'_ mut (@Array<u8, 64: usize>);
    v@11 : core::ops::range::RangeFrom<usize>;
    v@12 : &'_ (@Slice<u8>);
    v@13 : &'_ (@Array<u8, 32: usize>);
    v@14 : &'_ (@Array<u8, 32: usize>);
    v@15 : @Array<u8, 32: usize>;
    v@16 : &'_ (@Slice<u8>);
    v@17 : &'_ (@Array<u8, PUBLIC_KEY_SIZE>);
    v@18 : &'_ (@Array<u8, PUBLIC_KEY_SIZE>);
    v@19 : &'_ (libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>);
    hashed^20 : @Array<u8, 64: usize>;
    v@21 : &'_ (@Slice<u8>);
    v@22 : &'_ (@Array<u8, 64: usize>);
    v@23 : &'_ (@Array<u8, 64: usize>);
    shared_secret^24 : &'_ (@Slice<u8>);
    pseudorandomness^25 : &'_ (@Slice<u8>);
    v@26 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    v@27 : &'_ (@Slice<u8>);
    v@28 : &'_ (@Array<u8, 64: usize>);
    ciphertext^29 : @Array<u8, CIPHERTEXT_SIZE>;
    v@30 : &'_ (@Slice<u8>);
    v@31 : &'_ (@Array<u8, PUBLIC_KEY_SIZE>);
    v@32 : &'_ (@Array<u8, PUBLIC_KEY_SIZE>);
    v@33 : &'_ (libcrux_kyber::types::KyberPublicKey<PUBLIC_KEY_SIZE>);
    v@34 : @Array<u8, 32: usize>;
    v@35 : &'_ (@Slice<u8>);
    shared_secret^36 : @Array<u8, 32: usize>;
    v@37 : core::result::Result<@Array<u8, 32: usize>, core::array::TryFromSliceError>;
    v@38 : &'_ (@Slice<u8>);
    ss^39 : @Array<u8, 32: usize>;
    v@40 : libcrux_kyber::types::KyberCiphertext<CIPHERTEXT_SIZE>;
    v@41 : @Array<u8, CIPHERTEXT_SIZE>;
    v@42 : @Array<u8, 32: usize>;
    v@43 : usize;
    v@44 : usize;

    v@6 := &randomness^2;
    v@5 := &*(v@6);
    v@4 := move @ArrayToSliceShared<'_, u8, 32: usize>(move v@5);
    drop v@5;
    to_hash^3 := move libcrux_kyber::ind_cpa::into_padded_array<64: usize>(move v@4);
    drop v@4;
    fake_read to_hash^3;
    drop v@6;
    v@10 := &mut to_hash^3;
    v@43 := global libcrux_kyber::constants::H_DIGEST_SIZE;
    v@11 := core::ops::range::RangeFrom { start = move v@43; };
    v@9 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, 64: usize>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut(move v@10, move v@11);
    v@8 := &two-phase *(v@9);
    drop v@11;
    drop v@10;
    v@19 := &*(public_key^1);
    v@18 := move libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice<PUBLIC_KEY_SIZE>(move v@19);
    v@17 := &*(v@18);
    v@16 := move @ArrayToSliceShared<'_, u8, PUBLIC_KEY_SIZE>(move v@17);
    drop v@19;
    drop v@17;
    v@15 := move libcrux_kyber::hash_functions::H(move v@16);
    drop v@16;
    v@14 := &v@15;
    v@13 := &*(v@14);
    v@12 := move @ArrayToSliceShared<'_, u8, 32: usize>(move v@13);
    drop v@13;
    v@7 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@8, move v@12);
    drop v@12;
    drop v@8;
    drop v@18;
    drop v@15;
    drop v@14;
    drop v@9;
    drop v@7;
    v@23 := &to_hash^3;
    v@22 := &*(v@23);
    v@21 := move @ArrayToSliceShared<'_, u8, 64: usize>(move v@22);
    drop v@22;
    hashed^20 := move libcrux_kyber::hash_functions::G(move v@21);
    drop v@21;
    fake_read hashed^20;
    drop v@23;
    v@28 := &hashed^20;
    v@27 := move @ArrayToSliceShared<'_, u8, 64: usize>(move v@28);
    drop v@28;
    v@44 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@26 := move core::slice::{@Slice<T>}::split_at<u8>(move v@27, move v@44);
    drop v@27;
    fake_read v@26;
    shared_secret^24 := copy (v@26).0;
    pseudorandomness^25 := copy (v@26).1;
    drop v@26;
    v@33 := &*(public_key^1);
    v@32 := move libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice<PUBLIC_KEY_SIZE>(move v@33);
    v@31 := &*(v@32);
    v@30 := move @ArrayToSliceShared<'_, u8, PUBLIC_KEY_SIZE>(move v@31);
    drop v@33;
    drop v@31;
    v@34 := copy randomness^2;
    v@35 := &*(pseudorandomness^25);
    ciphertext^29 := move libcrux_kyber::ind_cpa::encrypt<K, CIPHERTEXT_SIZE, T_AS_NTT_ENCODED_SIZE, C1_SIZE, C2_SIZE, VECTOR_U_COMPRESSION_FACTOR, VECTOR_V_COMPRESSION_FACTOR, VECTOR_U_BLOCK_LEN, ETA1, ETA1_RANDOMNESS_SIZE, ETA2, ETA2_RANDOMNESS_SIZE>(move v@30, move v@34, move v@35);
    drop v@35;
    drop v@34;
    drop v@30;
    fake_read ciphertext^29;
    drop v@32;
    v@38 := &*(shared_secret^24);
    v@37 := move core::convert::{T#6}<&'_ (@Slice<u8>), @Array<u8, 32: usize>>[core::array::{@Array<T, N>#7}<'_, u8, 32: usize>[core::marker::{u8#38}]]::try_into(move v@38);
    drop v@38;
    fake_read v@37;
    match (v@37) {
    | 0 => {
        nop
      }
    | 1 => {
        panic
      }
      _ => {
        panic
      }
    };
    ss^39 := copy (v@37 as core::result::Result::Ok).0;
    shared_secret^36 := copy ss^39;
    drop ss^39;
    fake_read shared_secret^36;
    drop v@37;
    v@41 := copy ciphertext^29;
    v@40 := move core::convert::{T#3}<@Array<u8, CIPHERTEXT_SIZE>, libcrux_kyber::types::KyberCiphertext<CIPHERTEXT_SIZE>>[libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#2}<CIPHERTEXT_SIZE>]::into(move v@41);
    drop v@41;
    v@42 := copy shared_secret^36;
    v@0 := (move v@40, move v@42);
    drop v@42;
    drop v@40;
    drop shared_secret^36;
    drop ciphertext^29;
    drop pseudorandomness^25;
    drop shared_secret^24;
    drop hashed^20;
    drop to_hash^3;
    return
  }
Visiting call: @ArrayToSliceShared<'_, u8, 32: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 32>
Visiting call: libcrux_kyber::ind_cpa::into_padded_array<64: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::into_padded_array<64>
--> name: libcrux_kyber::ind_cpa::into_padded_array
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, 64: usize>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; 64], core::ops::range::RangeFrom<usize>>::index_mut
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice<C@2>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<@SIZE>}::as_slice<@>
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice
--> args: &'0_0 (libcrux_kyber::types::KyberPublicKey<C@0>), ret: &'0_0 (@Array<u8, C@0>)
Visiting call: @ArrayToSliceShared<'_, u8, C@2>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::hash_functions::H
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::hash_functions::H
--> name: libcrux_kyber::hash_functions::H
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, 32: usize>
Visiting call: @ArrayToSliceShared<'_, u8, 32: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 32>
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
Visiting call: @ArrayToSliceShared<'_, u8, 64: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 64>
Visiting call: libcrux_kyber::hash_functions::G
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::hash_functions::G
--> name: libcrux_kyber::hash_functions::G
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, 64: usize>
Visiting call: @ArrayToSliceShared<'_, u8, 64: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 64>
Visiting call: core::slice::{@Slice<T>}::split_at<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::split_at<u8>
--> name: core::slice::{@Slice<T>}::split_at
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: (&'0_0 (@Slice<T@0>), &'0_0 (@Slice<T@0>))
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice<C@2>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<@SIZE>}::as_slice<@>
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberPublicKey<SIZE>#18}::as_slice
--> args: &'0_0 (libcrux_kyber::types::KyberPublicKey<C@0>), ret: &'0_0 (@Array<u8, C@0>)
Visiting call: @ArrayToSliceShared<'_, u8, C@2>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::ind_cpa::encrypt<C@0, C@1, C@3, C@4, C@5, C@6, C@7, C@8, C@9, C@10, C@11, C@12>
is_array_map: false
--> 0 type_args, 12 const_generics
--> 0 type_args, 12 const_generics
--> pattern: libcrux_kyber::ind_cpa::encrypt<@, @, @, @, @, @, @, @, @, @, @, @>
--> name: libcrux_kyber::ind_cpa::encrypt
--> args: &'0_0 (@Slice<u8>) ++ @Array<u8, 32: usize> ++ &'0_1 (@Slice<u8>), ret: @Array<u8, C@1>
Visiting call: core::convert::{T#6}<&'_ (@Slice<u8>), @Array<u8, 32: usize>>[core::array::{@Array<T, N>#7}<'_, u8, 32: usize>[core::marker::{u8#38}]]::try_into
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::convert::TryInto<&'_ [u8], [u8; 32]>::try_into
Visiting call: core::convert::{T#3}<@Array<u8, C@1>, libcrux_kyber::types::KyberCiphertext<C@1>>[libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#2}<C@1>]::into
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 0 const_generics
--> pattern: core::convert::Into<[u8; @], libcrux_kyber::types::KyberCiphertext<@>>::into
--> name: core::convert::{T#3}::into
--> args: T@0, ret: T@1
405/465
Visiting function: libcrux_kyber::kyber1024::encapsulate_1024
  fn libcrux_kyber::kyber1024::encapsulate_1024<0>(public_key^1 : &0 (libcrux_kyber::types::KyberPublicKey<1568: usize>), randomness^2 : @Array<u8, 32: usize>) -> (libcrux_kyber::types::KyberCiphertext<1568: usize>, @Array<u8, 32: usize>)  
{
    v@0 : (libcrux_kyber::types::KyberCiphertext<1568: usize>, @Array<u8, 32: usize>);
    public_key^1 : &'_ (libcrux_kyber::types::KyberPublicKey<1568: usize>);
    randomness^2 : @Array<u8, 32: usize>;
    v@3 : &'_ (libcrux_kyber::types::KyberPublicKey<1568: usize>);
    v@4 : @Array<u8, 32: usize>;

    v@3 := &*(public_key^1);
    v@4 := copy randomness^2;
    v@0 := move libcrux_kyber::encapsulate<4: usize, 1568: usize, 1568: usize, 1536: usize, 1408: usize, 160: usize, 11: usize, 5: usize, 352: usize, 2: usize, 128: usize, 2: usize, 128: usize>(move v@3, move v@4);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: libcrux_kyber::encapsulate<4: usize, 1568: usize, 1568: usize, 1536: usize, 1408: usize, 160: usize, 11: usize, 5: usize, 352: usize, 2: usize, 128: usize, 2: usize, 128: usize>
is_array_map: false
--> 0 type_args, 13 const_generics
--> 0 type_args, 13 const_generics
--> pattern: libcrux_kyber::encapsulate<4, 1568, 1568, 1536, 1408, 160, 11, 5, 352, 2, 128, 2, 128>
--> name: libcrux_kyber::encapsulate
--> args: &'0_0 (libcrux_kyber::types::KyberPublicKey<C@2>) ++ @Array<u8, 32: usize>, ret: (libcrux_kyber::types::KyberCiphertext<C@1>, @Array<u8, 32: usize>)
406/465
Visiting opaque function: core::convert::AsRef::as_ref
  opaque fn core::convert::AsRef::as_ref<0, Self, T>(&0 (Self)) -> &0 (T)
407/465
Visiting function: libcrux_kyber::decapsulate
  fn libcrux_kyber::decapsulate<0, 1, K, SECRET_KEY_SIZE, CPA_SECRET_KEY_SIZE, PUBLIC_KEY_SIZE, CIPHERTEXT_SIZE, T_AS_NTT_ENCODED_SIZE, C1_SIZE, C2_SIZE, VECTOR_U_COMPRESSION_FACTOR, VECTOR_V_COMPRESSION_FACTOR, C1_BLOCK_SIZE, ETA1, ETA1_RANDOMNESS_SIZE, ETA2, ETA2_RANDOMNESS_SIZE, IMPLICIT_REJECTION_HASH_INPUT_SIZE>(secret_key^1 : &0 (libcrux_kyber::types::KyberPrivateKey<SECRET_KEY_SIZE>), ciphertext^2 : &1 (libcrux_kyber::types::KyberCiphertext<CIPHERTEXT_SIZE>)) -> @Array<u8, 32: usize>  
{
    v@0 : @Array<u8, 32: usize>;
    secret_key^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<SECRET_KEY_SIZE>);
    ciphertext^2 : &'_ (libcrux_kyber::types::KyberCiphertext<CIPHERTEXT_SIZE>);
    ind_cpa_secret_key^3 : &'_ (@Slice<u8>);
    secret_key^4 : &'_ (@Slice<u8>);
    v@5 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    v@6 : &'_ (libcrux_kyber::types::KyberPrivateKey<SECRET_KEY_SIZE>);
    ind_cpa_public_key^7 : &'_ (@Slice<u8>);
    secret_key^8 : &'_ (@Slice<u8>);
    v@9 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    v@10 : &'_ (@Slice<u8>);
    ind_cpa_public_key_hash^11 : &'_ (@Slice<u8>);
    implicit_rejection_value^12 : &'_ (@Slice<u8>);
    v@13 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    v@14 : &'_ (@Slice<u8>);
    decrypted^15 : @Array<u8, 32: usize>;
    v@16 : &'_ (@Slice<u8>);
    v@17 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    v@18 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    to_hash^19 : @Array<u8, 64: usize>;
    v@20 : &'_ (@Slice<u8>);
    v@21 : &'_ (@Array<u8, 32: usize>);
    v@22 : &'_ (@Array<u8, 32: usize>);
    v@23 : ();
    v@24 : &'_ mut (@Slice<u8>);
    v@25 : &'_ mut (@Slice<u8>);
    v@26 : &'_ mut (@Array<u8, 64: usize>);
    v@27 : core::ops::range::RangeFrom<usize>;
    v@28 : &'_ (@Slice<u8>);
    hashed^29 : @Array<u8, 64: usize>;
    v@30 : &'_ (@Slice<u8>);
    v@31 : &'_ (@Array<u8, 64: usize>);
    v@32 : &'_ (@Array<u8, 64: usize>);
    shared_secret^33 : &'_ (@Slice<u8>);
    pseudorandomness^34 : &'_ (@Slice<u8>);
    v@35 : (&'_ (@Slice<u8>), &'_ (@Slice<u8>));
    v@36 : &'_ (@Slice<u8>);
    v@37 : &'_ (@Array<u8, 64: usize>);
    to_hash^38 : @Array<u8, IMPLICIT_REJECTION_HASH_INPUT_SIZE>;
    v@39 : &'_ (@Slice<u8>);
    v@40 : &'_ (&'_ (@Slice<u8>));
    v@41 : ();
    v@42 : &'_ mut (@Slice<u8>);
    v@43 : &'_ mut (@Slice<u8>);
    v@44 : &'_ mut (@Array<u8, IMPLICIT_REJECTION_HASH_INPUT_SIZE>);
    v@45 : core::ops::range::RangeFrom<usize>;
    v@46 : &'_ (@Slice<u8>);
    v@47 : &'_ (@Slice<u8>);
    v@48 : &'_ (libcrux_kyber::types::KyberCiphertext<CIPHERTEXT_SIZE>);
    implicit_rejection_shared_secret^49 : @Array<u8, 32: usize>;
    v@50 : &'_ (@Slice<u8>);
    v@51 : &'_ (@Array<u8, IMPLICIT_REJECTION_HASH_INPUT_SIZE>);
    v@52 : &'_ (@Array<u8, IMPLICIT_REJECTION_HASH_INPUT_SIZE>);
    expected_ciphertext^53 : @Array<u8, CIPHERTEXT_SIZE>;
    v@54 : &'_ (@Slice<u8>);
    v@55 : @Array<u8, 32: usize>;
    v@56 : &'_ (@Slice<u8>);
    selector^57 : u8;
    v@58 : &'_ (@Slice<u8>);
    v@59 : &'_ (@Slice<u8>);
    v@60 : &'_ (libcrux_kyber::types::KyberCiphertext<CIPHERTEXT_SIZE>);
    v@61 : &'_ (@Slice<u8>);
    v@62 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    v@63 : &'_ (@Array<u8, CIPHERTEXT_SIZE>);
    v@64 : &'_ (@Slice<u8>);
    v@65 : &'_ (@Slice<u8>);
    v@66 : &'_ (@Array<u8, 32: usize>);
    v@67 : &'_ (@Array<u8, 32: usize>);
    v@68 : u8;
    v@69 : usize;
    v@70 : usize;
    v@71 : usize;
    v@72 : usize;

    v@6 := &*(secret_key^1);
    v@5 := move libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::split_at<SECRET_KEY_SIZE>(move v@6, CPA_SECRET_KEY_SIZE);
    drop v@6;
    fake_read v@5;
    ind_cpa_secret_key^3 := copy (v@5).0;
    secret_key^4 := copy (v@5).1;
    drop v@5;
    v@10 := &*(secret_key^4);
    v@9 := move core::slice::{@Slice<T>}::split_at<u8>(move v@10, PUBLIC_KEY_SIZE);
    drop v@10;
    fake_read v@9;
    ind_cpa_public_key^7 := copy (v@9).0;
    secret_key^8 := copy (v@9).1;
    drop v@9;
    v@14 := &*(secret_key^8);
    v@69 := global libcrux_kyber::constants::H_DIGEST_SIZE;
    v@13 := move core::slice::{@Slice<T>}::split_at<u8>(move v@14, move v@69);
    drop v@14;
    fake_read v@13;
    ind_cpa_public_key_hash^11 := copy (v@13).0;
    implicit_rejection_value^12 := copy (v@13).1;
    drop v@13;
    v@16 := &*(ind_cpa_secret_key^3);
    v@18 := &(*(ciphertext^2)).value;
    v@17 := &*(v@18);
    decrypted^15 := move libcrux_kyber::ind_cpa::decrypt<K, CIPHERTEXT_SIZE, C1_SIZE, VECTOR_U_COMPRESSION_FACTOR, VECTOR_V_COMPRESSION_FACTOR>(move v@16, move v@17);
    drop v@17;
    drop v@16;
    fake_read decrypted^15;
    drop v@18;
    v@22 := &decrypted^15;
    v@21 := &*(v@22);
    v@20 := move @ArrayToSliceShared<'_, u8, 32: usize>(move v@21);
    drop v@21;
    to_hash^19 := move libcrux_kyber::ind_cpa::into_padded_array<64: usize>(move v@20);
    drop v@20;
    fake_read to_hash^19;
    drop v@22;
    v@26 := &mut to_hash^19;
    v@70 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@27 := core::ops::range::RangeFrom { start = move v@70; };
    v@25 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, 64: usize>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut(move v@26, move v@27);
    v@24 := &two-phase *(v@25);
    drop v@27;
    drop v@26;
    v@28 := &*(ind_cpa_public_key_hash^11);
    v@23 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@24, move v@28);
    drop v@28;
    drop v@24;
    drop v@25;
    drop v@23;
    v@32 := &to_hash^19;
    v@31 := &*(v@32);
    v@30 := move @ArrayToSliceShared<'_, u8, 64: usize>(move v@31);
    drop v@31;
    hashed^29 := move libcrux_kyber::hash_functions::G(move v@30);
    drop v@30;
    fake_read hashed^29;
    drop v@32;
    v@37 := &hashed^29;
    v@36 := move @ArrayToSliceShared<'_, u8, 64: usize>(move v@37);
    drop v@37;
    v@71 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@35 := move core::slice::{@Slice<T>}::split_at<u8>(move v@36, move v@71);
    drop v@36;
    fake_read v@35;
    shared_secret^33 := copy (v@35).0;
    pseudorandomness^34 := copy (v@35).1;
    drop v@35;
    v@40 := &implicit_rejection_value^12;
    v@39 := &*(*(v@40));
    to_hash^38 := move libcrux_kyber::ind_cpa::into_padded_array<IMPLICIT_REJECTION_HASH_INPUT_SIZE>(move v@39);
    drop v@39;
    fake_read to_hash^38;
    drop v@40;
    v@44 := &mut to_hash^38;
    v@72 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@45 := core::ops::range::RangeFrom { start = move v@72; };
    v@43 := move core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, IMPLICIT_REJECTION_HASH_INPUT_SIZE>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut(move v@44, move v@45);
    v@42 := &two-phase *(v@43);
    drop v@45;
    drop v@44;
    v@48 := &*(ciphertext^2);
    v@47 := move libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}<CIPHERTEXT_SIZE>::as_ref(move v@48);
    v@46 := &*(v@47);
    drop v@48;
    v@41 := move core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}](move v@42, move v@46);
    drop v@46;
    drop v@42;
    drop v@47;
    drop v@43;
    drop v@41;
    v@52 := &to_hash^38;
    v@51 := &*(v@52);
    v@50 := move @ArrayToSliceShared<'_, u8, IMPLICIT_REJECTION_HASH_INPUT_SIZE>(move v@51);
    drop v@51;
    implicit_rejection_shared_secret^49 := move libcrux_kyber::hash_functions::PRF<32: usize>(move v@50);
    drop v@50;
    fake_read implicit_rejection_shared_secret^49;
    drop v@52;
    v@54 := &*(ind_cpa_public_key^7);
    v@55 := copy decrypted^15;
    v@56 := &*(pseudorandomness^34);
    expected_ciphertext^53 := move libcrux_kyber::ind_cpa::encrypt<K, CIPHERTEXT_SIZE, T_AS_NTT_ENCODED_SIZE, C1_SIZE, C2_SIZE, VECTOR_U_COMPRESSION_FACTOR, VECTOR_V_COMPRESSION_FACTOR, C1_BLOCK_SIZE, ETA1, ETA1_RANDOMNESS_SIZE, ETA2, ETA2_RANDOMNESS_SIZE>(move v@54, move v@55, move v@56);
    drop v@56;
    drop v@55;
    drop v@54;
    fake_read expected_ciphertext^53;
    v@60 := &*(ciphertext^2);
    v@59 := move libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}<CIPHERTEXT_SIZE>::as_ref(move v@60);
    v@58 := &*(v@59);
    drop v@60;
    v@63 := &expected_ciphertext^53;
    v@62 := &*(v@63);
    v@61 := move @ArrayToSliceShared<'_, u8, CIPHERTEXT_SIZE>(move v@62);
    drop v@62;
    selector^57 := move libcrux_kyber::constant_time_ops::compare_ciphertexts_in_constant_time<CIPHERTEXT_SIZE>(move v@58, move v@61);
    drop v@61;
    drop v@58;
    fake_read selector^57;
    drop v@63;
    drop v@59;
    v@64 := &*(shared_secret^33);
    v@67 := &implicit_rejection_shared_secret^49;
    v@66 := &*(v@67);
    v@65 := move @ArrayToSliceShared<'_, u8, 32: usize>(move v@66);
    drop v@66;
    v@68 := copy selector^57;
    v@0 := move libcrux_kyber::constant_time_ops::select_shared_secret_in_constant_time(move v@64, move v@65, move v@68);
    drop v@68;
    drop v@65;
    drop v@64;
    drop selector^57;
    drop expected_ciphertext^53;
    drop implicit_rejection_shared_secret^49;
    drop to_hash^38;
    drop pseudorandomness^34;
    drop shared_secret^33;
    drop hashed^29;
    drop to_hash^19;
    drop decrypted^15;
    drop implicit_rejection_value^12;
    drop ind_cpa_public_key_hash^11;
    drop secret_key^8;
    drop ind_cpa_public_key^7;
    drop secret_key^4;
    drop ind_cpa_secret_key^3;
    drop v@67;
    return
  }
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::split_at<C@1>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<@SIZE>}::split_at<@>
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}::split_at
--> args: &'0_0 (libcrux_kyber::types::KyberPrivateKey<C@0>) ++ usize, ret: (&'0_0 (@Slice<u8>), &'0_0 (@Slice<u8>))
Visiting call: core::slice::{@Slice<T>}::split_at<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::split_at<u8>
--> name: core::slice::{@Slice<T>}::split_at
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: (&'0_0 (@Slice<T@0>), &'0_0 (@Slice<T@0>))
Visiting call: core::slice::{@Slice<T>}::split_at<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::split_at<u8>
--> name: core::slice::{@Slice<T>}::split_at
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: (&'0_0 (@Slice<T@0>), &'0_0 (@Slice<T@0>))
Visiting call: libcrux_kyber::ind_cpa::decrypt<C@0, C@4, C@6, C@8, C@9>
is_array_map: false
--> 0 type_args, 5 const_generics
--> 0 type_args, 5 const_generics
--> pattern: libcrux_kyber::ind_cpa::decrypt<@, @, @, @, @>
--> name: libcrux_kyber::ind_cpa::decrypt
--> args: &'0_0 (@Slice<u8>) ++ &'0_1 (@Array<u8, C@1>), ret: @Array<u8, 32: usize>
Visiting call: @ArrayToSliceShared<'_, u8, 32: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 32>
Visiting call: libcrux_kyber::ind_cpa::into_padded_array<64: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::into_padded_array<64>
--> name: libcrux_kyber::ind_cpa::into_padded_array
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, 64: usize>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; 64], core::ops::range::RangeFrom<usize>>::index_mut
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
Visiting call: @ArrayToSliceShared<'_, u8, 64: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 64>
Visiting call: libcrux_kyber::hash_functions::G
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::hash_functions::G
--> name: libcrux_kyber::hash_functions::G
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, 64: usize>
Visiting call: @ArrayToSliceShared<'_, u8, 64: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 64>
Visiting call: core::slice::{@Slice<T>}::split_at<u8>
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::split_at<u8>
--> name: core::slice::{@Slice<T>}::split_at
--> args: &'0_0 (@Slice<T@0>) ++ usize, ret: (&'0_0 (@Slice<T@0>), &'0_0 (@Slice<T@0>))
Visiting call: libcrux_kyber::ind_cpa::into_padded_array<C@15>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::ind_cpa::into_padded_array<@>
--> name: libcrux_kyber::ind_cpa::into_padded_array
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: core::array::{@Array<T, N>#16}<u8, core::ops::range::RangeFrom<usize>, C@15>[core::slice::index::{@Slice<T>#1}<u8, core::ops::range::RangeFrom<usize>>[core::slice::index::{core::ops::range::RangeFrom<usize>#6}<u8>]]::index_mut
is_array_map: false
--> 0 type_args, 0 const_generics
--> 2 type_args, 1 const_generics
--> pattern: core::ops::index::IndexMut<[u8; @], core::ops::range::RangeFrom<usize>>::index_mut
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}<C@4>::as_ref
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 1 const_generics
--> pattern: core::convert::AsRef<libcrux_kyber::types::KyberCiphertext<@>, [u8]>::as_ref
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}::as_ref
--> args: &'0_0 (libcrux_kyber::types::KyberCiphertext<C@0>), ret: &'0_0 (@Slice<u8>)
Visiting call: core::slice::{@Slice<T>}::copy_from_slice<u8>[core::marker::{u8#38}]
is_array_map: false
--> 1 type_args, 0 const_generics
--> 1 type_args, 0 const_generics
--> pattern: core::slice::{[@T]}::copy_from_slice<u8>
--> name: core::slice::{@Slice<T>}::copy_from_slice
--> args: &'0_0 mut (@Slice<T@0>) ++ &'0_1 (@Slice<T@0>), ret: ()
Visiting call: @ArrayToSliceShared<'_, u8, C@15>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::hash_functions::PRF<32: usize>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::hash_functions::PRF<32>
--> name: libcrux_kyber::hash_functions::PRF
--> args: &'0_0 (@Slice<u8>), ret: @Array<u8, C@0>
Visiting call: libcrux_kyber::ind_cpa::encrypt<C@0, C@4, C@5, C@6, C@7, C@8, C@9, C@10, C@11, C@12, C@13, C@14>
is_array_map: false
--> 0 type_args, 12 const_generics
--> 0 type_args, 12 const_generics
--> pattern: libcrux_kyber::ind_cpa::encrypt<@, @, @, @, @, @, @, @, @, @, @, @>
--> name: libcrux_kyber::ind_cpa::encrypt
--> args: &'0_0 (@Slice<u8>) ++ @Array<u8, 32: usize> ++ &'0_1 (@Slice<u8>), ret: @Array<u8, C@1>
Visiting call: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}<C@4>::as_ref
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 1 const_generics
--> pattern: core::convert::AsRef<libcrux_kyber::types::KyberCiphertext<@>, [u8]>::as_ref
--> name: libcrux_kyber::types::{libcrux_kyber::types::KyberCiphertext<SIZE>#1}::as_ref
--> args: &'0_0 (libcrux_kyber::types::KyberCiphertext<C@0>), ret: &'0_0 (@Slice<u8>)
Visiting call: @ArrayToSliceShared<'_, u8, C@4>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, @>
Visiting call: libcrux_kyber::constant_time_ops::compare_ciphertexts_in_constant_time<C@4>
is_array_map: false
--> 0 type_args, 1 const_generics
--> 0 type_args, 1 const_generics
--> pattern: libcrux_kyber::constant_time_ops::compare_ciphertexts_in_constant_time<@>
--> name: libcrux_kyber::constant_time_ops::compare_ciphertexts_in_constant_time
--> args: &'0_0 (@Slice<u8>) ++ &'0_1 (@Slice<u8>), ret: u8
Visiting call: @ArrayToSliceShared<'_, u8, 32: usize>
is_array_map: false
--> 1 type_args, 1 const_generics
--> 1 type_args, 1 const_generics
--> pattern: ArrayToSliceShared<'_, u8, 32>
Visiting call: libcrux_kyber::constant_time_ops::select_shared_secret_in_constant_time
is_array_map: false
--> 0 type_args, 0 const_generics
--> 0 type_args, 0 const_generics
--> pattern: libcrux_kyber::constant_time_ops::select_shared_secret_in_constant_time
--> name: libcrux_kyber::constant_time_ops::select_shared_secret_in_constant_time
--> args: &'0_0 (@Slice<u8>) ++ &'0_1 (@Slice<u8>) ++ u8, ret: @Array<u8, 32: usize>
408/465
Visiting function: libcrux_kyber::kyber1024::decapsulate_1024
  fn libcrux_kyber::kyber1024::decapsulate_1024<0, 1>(secret_key^1 : &0 (libcrux_kyber::types::KyberPrivateKey<3168: usize>), ciphertext^2 : &1 (libcrux_kyber::types::KyberCiphertext<1568: usize>)) -> @Array<u8, 32: usize>  
{
    v@0 : @Array<u8, 32: usize>;
    secret_key^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<3168: usize>);
    ciphertext^2 : &'_ (libcrux_kyber::types::KyberCiphertext<1568: usize>);
    v@3 : &'_ (libcrux_kyber::types::KyberPrivateKey<3168: usize>);
    v@4 : &'_ (libcrux_kyber::types::KyberCiphertext<1568: usize>);

    v@3 := &*(secret_key^1);
    v@4 := &*(ciphertext^2);
    v@0 := move libcrux_kyber::decapsulate<4: usize, 3168: usize, 1536: usize, 1568: usize, 1568: usize, 1536: usize, 1408: usize, 160: usize, 11: usize, 5: usize, 352: usize, 2: usize, 128: usize, 2: usize, 128: usize, 1600: usize>(move v@3, move v@4);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: libcrux_kyber::decapsulate<4: usize, 3168: usize, 1536: usize, 1568: usize, 1568: usize, 1536: usize, 1408: usize, 160: usize, 11: usize, 5: usize, 352: usize, 2: usize, 128: usize, 2: usize, 128: usize, 1600: usize>
is_array_map: false
--> 0 type_args, 16 const_generics
--> 0 type_args, 16 const_generics
--> pattern: libcrux_kyber::decapsulate<4, 3168, 1536, 1568, 1568, 1536, 1408, 160, 11, 5, 352, 2, 128, 2, 128, 1600>
--> name: libcrux_kyber::decapsulate
--> args: &'0_0 (libcrux_kyber::types::KyberPrivateKey<C@1>) ++ &'0_1 (libcrux_kyber::types::KyberCiphertext<C@4>), ret: @Array<u8, 32: usize>
409/465
Visiting global: libcrux_kyber::kyber512::RANK_512
  global libcrux_kyber::kyber512::RANK_512 : usize = libcrux_kyber::kyber512::RANK_512
Corresponding body:  fn libcrux_kyber::kyber512::RANK_512() -> usize  
{
    v@0 : usize;

    v@0 := (2: usize : usize);
    return
  }
410/465
Visiting global: libcrux_kyber::kyber512::RANKED_BYTES_PER_RING_ELEMENT_512
  global libcrux_kyber::kyber512::RANKED_BYTES_PER_RING_ELEMENT_512 : usize = libcrux_kyber::kyber512::RANKED_BYTES_PER_RING_ELEMENT_512
Corresponding body:  fn libcrux_kyber::kyber512::RANKED_BYTES_PER_RING_ELEMENT_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::kyber512::RANK_512;
    v@3 := global libcrux_kyber::constants::BITS_PER_RING_ELEMENT;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
411/465
Visiting global: libcrux_kyber::kyber512::T_AS_NTT_ENCODED_SIZE_512
  global libcrux_kyber::kyber512::T_AS_NTT_ENCODED_SIZE_512 : usize = libcrux_kyber::kyber512::T_AS_NTT_ENCODED_SIZE_512
Corresponding body:  fn libcrux_kyber::kyber512::T_AS_NTT_ENCODED_SIZE_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;

    v@3 := global libcrux_kyber::kyber512::RANK_512;
    v@4 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@2 := move v@3 * move v@4;
    v@5 := global libcrux_kyber::constants::BITS_PER_COEFFICIENT;
    v@1 := copy v@2 * move v@5;
    drop v@2;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
412/465
Visiting global: libcrux_kyber::kyber512::VECTOR_U_COMPRESSION_FACTOR_512
  global libcrux_kyber::kyber512::VECTOR_U_COMPRESSION_FACTOR_512 : usize = libcrux_kyber::kyber512::VECTOR_U_COMPRESSION_FACTOR_512
Corresponding body:  fn libcrux_kyber::kyber512::VECTOR_U_COMPRESSION_FACTOR_512() -> usize  
{
    v@0 : usize;

    v@0 := (10: usize : usize);
    return
  }
413/465
Visiting global: libcrux_kyber::kyber512::C1_BLOCK_SIZE_512
  global libcrux_kyber::kyber512::C1_BLOCK_SIZE_512 : usize = libcrux_kyber::kyber512::C1_BLOCK_SIZE_512
Corresponding body:  fn libcrux_kyber::kyber512::C1_BLOCK_SIZE_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@3 := global libcrux_kyber::kyber512::VECTOR_U_COMPRESSION_FACTOR_512;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
414/465
Visiting global: libcrux_kyber::kyber512::C1_SIZE_512
  global libcrux_kyber::kyber512::C1_SIZE_512 : usize = libcrux_kyber::kyber512::C1_SIZE_512
Corresponding body:  fn libcrux_kyber::kyber512::C1_SIZE_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::kyber512::C1_BLOCK_SIZE_512;
    v@2 := global libcrux_kyber::kyber512::RANK_512;
    v@0 := move v@1 * move v@2;
    return
  }
415/465
Visiting global: libcrux_kyber::kyber512::VECTOR_V_COMPRESSION_FACTOR_512
  global libcrux_kyber::kyber512::VECTOR_V_COMPRESSION_FACTOR_512 : usize = libcrux_kyber::kyber512::VECTOR_V_COMPRESSION_FACTOR_512
Corresponding body:  fn libcrux_kyber::kyber512::VECTOR_V_COMPRESSION_FACTOR_512() -> usize  
{
    v@0 : usize;

    v@0 := (4: usize : usize);
    return
  }
416/465
Visiting global: libcrux_kyber::kyber512::C2_SIZE_512
  global libcrux_kyber::kyber512::C2_SIZE_512 : usize = libcrux_kyber::kyber512::C2_SIZE_512
Corresponding body:  fn libcrux_kyber::kyber512::C2_SIZE_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@3 := global libcrux_kyber::kyber512::VECTOR_V_COMPRESSION_FACTOR_512;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
417/465
Visiting global: libcrux_kyber::kyber512::CPA_PKE_SECRET_KEY_SIZE_512
  global libcrux_kyber::kyber512::CPA_PKE_SECRET_KEY_SIZE_512 : usize = libcrux_kyber::kyber512::CPA_PKE_SECRET_KEY_SIZE_512
Corresponding body:  fn libcrux_kyber::kyber512::CPA_PKE_SECRET_KEY_SIZE_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;

    v@3 := global libcrux_kyber::kyber512::RANK_512;
    v@4 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@2 := move v@3 * move v@4;
    v@5 := global libcrux_kyber::constants::BITS_PER_COEFFICIENT;
    v@1 := copy v@2 * move v@5;
    drop v@2;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
418/465
Visiting global: libcrux_kyber::kyber512::CPA_PKE_PUBLIC_KEY_SIZE_512
  global libcrux_kyber::kyber512::CPA_PKE_PUBLIC_KEY_SIZE_512 : usize = libcrux_kyber::kyber512::CPA_PKE_PUBLIC_KEY_SIZE_512
Corresponding body:  fn libcrux_kyber::kyber512::CPA_PKE_PUBLIC_KEY_SIZE_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber512::T_AS_NTT_ENCODED_SIZE_512;
    v@0 := move v@1 + (32: usize : usize);
    return
  }
419/465
Visiting global: libcrux_kyber::kyber512::CPA_PKE_CIPHERTEXT_SIZE_512
  global libcrux_kyber::kyber512::CPA_PKE_CIPHERTEXT_SIZE_512 : usize = libcrux_kyber::kyber512::CPA_PKE_CIPHERTEXT_SIZE_512
Corresponding body:  fn libcrux_kyber::kyber512::CPA_PKE_CIPHERTEXT_SIZE_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::kyber512::C1_SIZE_512;
    v@2 := global libcrux_kyber::kyber512::C2_SIZE_512;
    v@0 := move v@1 + move v@2;
    return
  }
420/465
Visiting global: libcrux_kyber::kyber512::SECRET_KEY_SIZE_512
  global libcrux_kyber::kyber512::SECRET_KEY_SIZE_512 : usize = libcrux_kyber::kyber512::SECRET_KEY_SIZE_512
Corresponding body:  fn libcrux_kyber::kyber512::SECRET_KEY_SIZE_512() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;
    v@6 : usize;

    v@3 := global libcrux_kyber::kyber512::CPA_PKE_SECRET_KEY_SIZE_512;
    v@4 := global libcrux_kyber::kyber512::CPA_PKE_PUBLIC_KEY_SIZE_512;
    v@2 := move v@3 + move v@4;
    v@5 := global libcrux_kyber::constants::H_DIGEST_SIZE;
    v@1 := copy v@2 + move v@5;
    drop v@2;
    v@6 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@0 := copy v@1 + move v@6;
    drop v@1;
    return
  }
421/465
Visiting global: libcrux_kyber::kyber512::ETA1
  global libcrux_kyber::kyber512::ETA1 : usize = libcrux_kyber::kyber512::ETA1
Corresponding body:  fn libcrux_kyber::kyber512::ETA1() -> usize  
{
    v@0 : usize;

    v@0 := (3: usize : usize);
    return
  }
422/465
Visiting global: libcrux_kyber::kyber512::ETA1_RANDOMNESS_SIZE
  global libcrux_kyber::kyber512::ETA1_RANDOMNESS_SIZE : usize = libcrux_kyber::kyber512::ETA1_RANDOMNESS_SIZE
Corresponding body:  fn libcrux_kyber::kyber512::ETA1_RANDOMNESS_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber512::ETA1;
    v@0 := move v@1 * (64: usize : usize);
    return
  }
423/465
Visiting global: libcrux_kyber::kyber512::ETA2
  global libcrux_kyber::kyber512::ETA2 : usize = libcrux_kyber::kyber512::ETA2
Corresponding body:  fn libcrux_kyber::kyber512::ETA2() -> usize  
{
    v@0 : usize;

    v@0 := (2: usize : usize);
    return
  }
424/465
Visiting global: libcrux_kyber::kyber512::ETA2_RANDOMNESS_SIZE
  global libcrux_kyber::kyber512::ETA2_RANDOMNESS_SIZE : usize = libcrux_kyber::kyber512::ETA2_RANDOMNESS_SIZE
Corresponding body:  fn libcrux_kyber::kyber512::ETA2_RANDOMNESS_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber512::ETA2;
    v@0 := move v@1 * (64: usize : usize);
    return
  }
425/465
Visiting global: libcrux_kyber::kyber512::IMPLICIT_REJECTION_HASH_INPUT_SIZE
  global libcrux_kyber::kyber512::IMPLICIT_REJECTION_HASH_INPUT_SIZE : usize = libcrux_kyber::kyber512::IMPLICIT_REJECTION_HASH_INPUT_SIZE
Corresponding body:  fn libcrux_kyber::kyber512::IMPLICIT_REJECTION_HASH_INPUT_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@2 := global libcrux_kyber::kyber512::CPA_PKE_CIPHERTEXT_SIZE_512;
    v@0 := move v@1 + move v@2;
    return
  }
426/465
Visiting function: libcrux_kyber::kyber512::generate_key_pair_512
  fn libcrux_kyber::kyber512::generate_key_pair_512(randomness^1 : @Array<u8, 64: usize>) -> libcrux_kyber::types::KyberKeyPair<1632: usize, 800: usize>  
{
    v@0 : libcrux_kyber::types::KyberKeyPair<1632: usize, 800: usize>;
    randomness^1 : @Array<u8, 64: usize>;
    v@2 : @Array<u8, 64: usize>;

    v@2 := copy randomness^1;
    v@0 := move libcrux_kyber::generate_keypair<2: usize, 768: usize, 1632: usize, 800: usize, 768: usize, 3: usize, 192: usize>(move v@2);
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::generate_keypair<2: usize, 768: usize, 1632: usize, 800: usize, 768: usize, 3: usize, 192: usize>
is_array_map: false
--> 0 type_args, 7 const_generics
--> 0 type_args, 7 const_generics
--> pattern: libcrux_kyber::generate_keypair<2, 768, 1632, 800, 768, 3, 192>
--> name: libcrux_kyber::generate_keypair
--> args: @Array<u8, 64: usize>, ret: libcrux_kyber::types::KyberKeyPair<C@2, C@3>
427/465
Visiting function: libcrux_kyber::kyber512::encapsulate_512
  fn libcrux_kyber::kyber512::encapsulate_512<0>(public_key^1 : &0 (libcrux_kyber::types::KyberPublicKey<800: usize>), randomness^2 : @Array<u8, 32: usize>) -> (libcrux_kyber::types::KyberCiphertext<768: usize>, @Array<u8, 32: usize>)  
{
    v@0 : (libcrux_kyber::types::KyberCiphertext<768: usize>, @Array<u8, 32: usize>);
    public_key^1 : &'_ (libcrux_kyber::types::KyberPublicKey<800: usize>);
    randomness^2 : @Array<u8, 32: usize>;
    v@3 : &'_ (libcrux_kyber::types::KyberPublicKey<800: usize>);
    v@4 : @Array<u8, 32: usize>;

    v@3 := &*(public_key^1);
    v@4 := copy randomness^2;
    v@0 := move libcrux_kyber::encapsulate<2: usize, 768: usize, 800: usize, 768: usize, 640: usize, 128: usize, 10: usize, 4: usize, 320: usize, 3: usize, 192: usize, 2: usize, 128: usize>(move v@3, move v@4);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: libcrux_kyber::encapsulate<2: usize, 768: usize, 800: usize, 768: usize, 640: usize, 128: usize, 10: usize, 4: usize, 320: usize, 3: usize, 192: usize, 2: usize, 128: usize>
is_array_map: false
--> 0 type_args, 13 const_generics
--> 0 type_args, 13 const_generics
--> pattern: libcrux_kyber::encapsulate<2, 768, 800, 768, 640, 128, 10, 4, 320, 3, 192, 2, 128>
--> name: libcrux_kyber::encapsulate
--> args: &'0_0 (libcrux_kyber::types::KyberPublicKey<C@2>) ++ @Array<u8, 32: usize>, ret: (libcrux_kyber::types::KyberCiphertext<C@1>, @Array<u8, 32: usize>)
428/465
Visiting function: libcrux_kyber::kyber512::decapsulate_512
  fn libcrux_kyber::kyber512::decapsulate_512<0, 1>(secret_key^1 : &0 (libcrux_kyber::types::KyberPrivateKey<1632: usize>), ciphertext^2 : &1 (libcrux_kyber::types::KyberCiphertext<768: usize>)) -> @Array<u8, 32: usize>  
{
    v@0 : @Array<u8, 32: usize>;
    secret_key^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<1632: usize>);
    ciphertext^2 : &'_ (libcrux_kyber::types::KyberCiphertext<768: usize>);
    v@3 : &'_ (libcrux_kyber::types::KyberPrivateKey<1632: usize>);
    v@4 : &'_ (libcrux_kyber::types::KyberCiphertext<768: usize>);

    v@3 := &*(secret_key^1);
    v@4 := &*(ciphertext^2);
    v@0 := move libcrux_kyber::decapsulate<2: usize, 1632: usize, 768: usize, 800: usize, 768: usize, 768: usize, 640: usize, 128: usize, 10: usize, 4: usize, 320: usize, 3: usize, 192: usize, 2: usize, 128: usize, 800: usize>(move v@3, move v@4);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: libcrux_kyber::decapsulate<2: usize, 1632: usize, 768: usize, 800: usize, 768: usize, 768: usize, 640: usize, 128: usize, 10: usize, 4: usize, 320: usize, 3: usize, 192: usize, 2: usize, 128: usize, 800: usize>
is_array_map: false
--> 0 type_args, 16 const_generics
--> 0 type_args, 16 const_generics
--> pattern: libcrux_kyber::decapsulate<2, 1632, 768, 800, 768, 768, 640, 128, 10, 4, 320, 3, 192, 2, 128, 800>
--> name: libcrux_kyber::decapsulate
--> args: &'0_0 (libcrux_kyber::types::KyberPrivateKey<C@1>) ++ &'0_1 (libcrux_kyber::types::KyberCiphertext<C@4>), ret: @Array<u8, 32: usize>
429/465
Visiting global: libcrux_kyber::kyber768::RANK_768
  global libcrux_kyber::kyber768::RANK_768 : usize = libcrux_kyber::kyber768::RANK_768
Corresponding body:  fn libcrux_kyber::kyber768::RANK_768() -> usize  
{
    v@0 : usize;

    v@0 := (3: usize : usize);
    return
  }
430/465
Visiting global: libcrux_kyber::kyber768::RANKED_BYTES_PER_RING_ELEMENT_768
  global libcrux_kyber::kyber768::RANKED_BYTES_PER_RING_ELEMENT_768 : usize = libcrux_kyber::kyber768::RANKED_BYTES_PER_RING_ELEMENT_768
Corresponding body:  fn libcrux_kyber::kyber768::RANKED_BYTES_PER_RING_ELEMENT_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::kyber768::RANK_768;
    v@3 := global libcrux_kyber::constants::BITS_PER_RING_ELEMENT;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
431/465
Visiting global: libcrux_kyber::kyber768::T_AS_NTT_ENCODED_SIZE_768
  global libcrux_kyber::kyber768::T_AS_NTT_ENCODED_SIZE_768 : usize = libcrux_kyber::kyber768::T_AS_NTT_ENCODED_SIZE_768
Corresponding body:  fn libcrux_kyber::kyber768::T_AS_NTT_ENCODED_SIZE_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;

    v@3 := global libcrux_kyber::kyber768::RANK_768;
    v@4 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@2 := move v@3 * move v@4;
    v@5 := global libcrux_kyber::constants::BITS_PER_COEFFICIENT;
    v@1 := copy v@2 * move v@5;
    drop v@2;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
432/465
Visiting global: libcrux_kyber::kyber768::VECTOR_U_COMPRESSION_FACTOR_768
  global libcrux_kyber::kyber768::VECTOR_U_COMPRESSION_FACTOR_768 : usize = libcrux_kyber::kyber768::VECTOR_U_COMPRESSION_FACTOR_768
Corresponding body:  fn libcrux_kyber::kyber768::VECTOR_U_COMPRESSION_FACTOR_768() -> usize  
{
    v@0 : usize;

    v@0 := (10: usize : usize);
    return
  }
433/465
Visiting global: libcrux_kyber::kyber768::C1_BLOCK_SIZE_768
  global libcrux_kyber::kyber768::C1_BLOCK_SIZE_768 : usize = libcrux_kyber::kyber768::C1_BLOCK_SIZE_768
Corresponding body:  fn libcrux_kyber::kyber768::C1_BLOCK_SIZE_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@3 := global libcrux_kyber::kyber768::VECTOR_U_COMPRESSION_FACTOR_768;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
434/465
Visiting global: libcrux_kyber::kyber768::C1_SIZE_768
  global libcrux_kyber::kyber768::C1_SIZE_768 : usize = libcrux_kyber::kyber768::C1_SIZE_768
Corresponding body:  fn libcrux_kyber::kyber768::C1_SIZE_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::kyber768::C1_BLOCK_SIZE_768;
    v@2 := global libcrux_kyber::kyber768::RANK_768;
    v@0 := move v@1 * move v@2;
    return
  }
435/465
Visiting global: libcrux_kyber::kyber768::VECTOR_V_COMPRESSION_FACTOR_768
  global libcrux_kyber::kyber768::VECTOR_V_COMPRESSION_FACTOR_768 : usize = libcrux_kyber::kyber768::VECTOR_V_COMPRESSION_FACTOR_768
Corresponding body:  fn libcrux_kyber::kyber768::VECTOR_V_COMPRESSION_FACTOR_768() -> usize  
{
    v@0 : usize;

    v@0 := (4: usize : usize);
    return
  }
436/465
Visiting global: libcrux_kyber::kyber768::C2_SIZE_768
  global libcrux_kyber::kyber768::C2_SIZE_768 : usize = libcrux_kyber::kyber768::C2_SIZE_768
Corresponding body:  fn libcrux_kyber::kyber768::C2_SIZE_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;

    v@2 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@3 := global libcrux_kyber::kyber768::VECTOR_V_COMPRESSION_FACTOR_768;
    v@1 := move v@2 * move v@3;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
437/465
Visiting global: libcrux_kyber::kyber768::CPA_PKE_SECRET_KEY_SIZE_768
  global libcrux_kyber::kyber768::CPA_PKE_SECRET_KEY_SIZE_768 : usize = libcrux_kyber::kyber768::CPA_PKE_SECRET_KEY_SIZE_768
Corresponding body:  fn libcrux_kyber::kyber768::CPA_PKE_SECRET_KEY_SIZE_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;

    v@3 := global libcrux_kyber::kyber768::RANK_768;
    v@4 := global libcrux_kyber::constants::COEFFICIENTS_IN_RING_ELEMENT;
    v@2 := move v@3 * move v@4;
    v@5 := global libcrux_kyber::constants::BITS_PER_COEFFICIENT;
    v@1 := copy v@2 * move v@5;
    drop v@2;
    v@0 := move v@1 / (8: usize : usize);
    drop v@1;
    return
  }
438/465
Visiting global: libcrux_kyber::kyber768::CPA_PKE_PUBLIC_KEY_SIZE_768
  global libcrux_kyber::kyber768::CPA_PKE_PUBLIC_KEY_SIZE_768 : usize = libcrux_kyber::kyber768::CPA_PKE_PUBLIC_KEY_SIZE_768
Corresponding body:  fn libcrux_kyber::kyber768::CPA_PKE_PUBLIC_KEY_SIZE_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber768::T_AS_NTT_ENCODED_SIZE_768;
    v@0 := move v@1 + (32: usize : usize);
    return
  }
439/465
Visiting global: libcrux_kyber::kyber768::CPA_PKE_CIPHERTEXT_SIZE_768
  global libcrux_kyber::kyber768::CPA_PKE_CIPHERTEXT_SIZE_768 : usize = libcrux_kyber::kyber768::CPA_PKE_CIPHERTEXT_SIZE_768
Corresponding body:  fn libcrux_kyber::kyber768::CPA_PKE_CIPHERTEXT_SIZE_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::kyber768::C1_SIZE_768;
    v@2 := global libcrux_kyber::kyber768::C2_SIZE_768;
    v@0 := move v@1 + move v@2;
    return
  }
440/465
Visiting global: libcrux_kyber::kyber768::SECRET_KEY_SIZE_768
  global libcrux_kyber::kyber768::SECRET_KEY_SIZE_768 : usize = libcrux_kyber::kyber768::SECRET_KEY_SIZE_768
Corresponding body:  fn libcrux_kyber::kyber768::SECRET_KEY_SIZE_768() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;
    v@3 : usize;
    v@4 : usize;
    v@5 : usize;
    v@6 : usize;

    v@3 := global libcrux_kyber::kyber768::CPA_PKE_SECRET_KEY_SIZE_768;
    v@4 := global libcrux_kyber::kyber768::CPA_PKE_PUBLIC_KEY_SIZE_768;
    v@2 := move v@3 + move v@4;
    v@5 := global libcrux_kyber::constants::H_DIGEST_SIZE;
    v@1 := copy v@2 + move v@5;
    drop v@2;
    v@6 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@0 := copy v@1 + move v@6;
    drop v@1;
    return
  }
441/465
Visiting global: libcrux_kyber::kyber768::ETA1
  global libcrux_kyber::kyber768::ETA1 : usize = libcrux_kyber::kyber768::ETA1
Corresponding body:  fn libcrux_kyber::kyber768::ETA1() -> usize  
{
    v@0 : usize;

    v@0 := (2: usize : usize);
    return
  }
442/465
Visiting global: libcrux_kyber::kyber768::ETA1_RANDOMNESS_SIZE
  global libcrux_kyber::kyber768::ETA1_RANDOMNESS_SIZE : usize = libcrux_kyber::kyber768::ETA1_RANDOMNESS_SIZE
Corresponding body:  fn libcrux_kyber::kyber768::ETA1_RANDOMNESS_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber768::ETA1;
    v@0 := move v@1 * (64: usize : usize);
    return
  }
443/465
Visiting global: libcrux_kyber::kyber768::ETA2
  global libcrux_kyber::kyber768::ETA2 : usize = libcrux_kyber::kyber768::ETA2
Corresponding body:  fn libcrux_kyber::kyber768::ETA2() -> usize  
{
    v@0 : usize;

    v@0 := (2: usize : usize);
    return
  }
444/465
Visiting global: libcrux_kyber::kyber768::ETA2_RANDOMNESS_SIZE
  global libcrux_kyber::kyber768::ETA2_RANDOMNESS_SIZE : usize = libcrux_kyber::kyber768::ETA2_RANDOMNESS_SIZE
Corresponding body:  fn libcrux_kyber::kyber768::ETA2_RANDOMNESS_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;

    v@1 := global libcrux_kyber::kyber768::ETA2;
    v@0 := move v@1 * (64: usize : usize);
    return
  }
445/465
Visiting global: libcrux_kyber::kyber768::IMPLICIT_REJECTION_HASH_INPUT_SIZE
  global libcrux_kyber::kyber768::IMPLICIT_REJECTION_HASH_INPUT_SIZE : usize = libcrux_kyber::kyber768::IMPLICIT_REJECTION_HASH_INPUT_SIZE
Corresponding body:  fn libcrux_kyber::kyber768::IMPLICIT_REJECTION_HASH_INPUT_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@2 := global libcrux_kyber::kyber768::CPA_PKE_CIPHERTEXT_SIZE_768;
    v@0 := move v@1 + move v@2;
    return
  }
446/465
Visiting function: libcrux_kyber::kyber768::generate_key_pair_768
  fn libcrux_kyber::kyber768::generate_key_pair_768(randomness^1 : @Array<u8, 64: usize>) -> libcrux_kyber::types::KyberKeyPair<2400: usize, 1184: usize>  
{
    v@0 : libcrux_kyber::types::KyberKeyPair<2400: usize, 1184: usize>;
    randomness^1 : @Array<u8, 64: usize>;
    v@2 : @Array<u8, 64: usize>;

    v@2 := copy randomness^1;
    v@0 := move libcrux_kyber::generate_keypair<3: usize, 1152: usize, 2400: usize, 1184: usize, 1152: usize, 2: usize, 128: usize>(move v@2);
    drop v@2;
    return
  }
Visiting call: libcrux_kyber::generate_keypair<3: usize, 1152: usize, 2400: usize, 1184: usize, 1152: usize, 2: usize, 128: usize>
is_array_map: false
--> 0 type_args, 7 const_generics
--> 0 type_args, 7 const_generics
--> pattern: libcrux_kyber::generate_keypair<3, 1152, 2400, 1184, 1152, 2, 128>
--> name: libcrux_kyber::generate_keypair
--> args: @Array<u8, 64: usize>, ret: libcrux_kyber::types::KyberKeyPair<C@2, C@3>
447/465
Visiting function: libcrux_kyber::kyber768::encapsulate_768
  fn libcrux_kyber::kyber768::encapsulate_768<0>(public_key^1 : &0 (libcrux_kyber::types::KyberPublicKey<1184: usize>), randomness^2 : @Array<u8, 32: usize>) -> (libcrux_kyber::types::KyberCiphertext<1088: usize>, @Array<u8, 32: usize>)  
{
    v@0 : (libcrux_kyber::types::KyberCiphertext<1088: usize>, @Array<u8, 32: usize>);
    public_key^1 : &'_ (libcrux_kyber::types::KyberPublicKey<1184: usize>);
    randomness^2 : @Array<u8, 32: usize>;
    v@3 : &'_ (libcrux_kyber::types::KyberPublicKey<1184: usize>);
    v@4 : @Array<u8, 32: usize>;

    v@3 := &*(public_key^1);
    v@4 := copy randomness^2;
    v@0 := move libcrux_kyber::encapsulate<3: usize, 1088: usize, 1184: usize, 1152: usize, 960: usize, 128: usize, 10: usize, 4: usize, 320: usize, 2: usize, 128: usize, 2: usize, 128: usize>(move v@3, move v@4);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: libcrux_kyber::encapsulate<3: usize, 1088: usize, 1184: usize, 1152: usize, 960: usize, 128: usize, 10: usize, 4: usize, 320: usize, 2: usize, 128: usize, 2: usize, 128: usize>
is_array_map: false
--> 0 type_args, 13 const_generics
--> 0 type_args, 13 const_generics
--> pattern: libcrux_kyber::encapsulate<3, 1088, 1184, 1152, 960, 128, 10, 4, 320, 2, 128, 2, 128>
--> name: libcrux_kyber::encapsulate
--> args: &'0_0 (libcrux_kyber::types::KyberPublicKey<C@2>) ++ @Array<u8, 32: usize>, ret: (libcrux_kyber::types::KyberCiphertext<C@1>, @Array<u8, 32: usize>)
448/465
Visiting function: libcrux_kyber::kyber768::decapsulate_768
  fn libcrux_kyber::kyber768::decapsulate_768<0, 1>(secret_key^1 : &0 (libcrux_kyber::types::KyberPrivateKey<2400: usize>), ciphertext^2 : &1 (libcrux_kyber::types::KyberCiphertext<1088: usize>)) -> @Array<u8, 32: usize>  
{
    v@0 : @Array<u8, 32: usize>;
    secret_key^1 : &'_ (libcrux_kyber::types::KyberPrivateKey<2400: usize>);
    ciphertext^2 : &'_ (libcrux_kyber::types::KyberCiphertext<1088: usize>);
    v@3 : &'_ (libcrux_kyber::types::KyberPrivateKey<2400: usize>);
    v@4 : &'_ (libcrux_kyber::types::KyberCiphertext<1088: usize>);

    v@3 := &*(secret_key^1);
    v@4 := &*(ciphertext^2);
    v@0 := move libcrux_kyber::decapsulate<3: usize, 2400: usize, 1152: usize, 1184: usize, 1088: usize, 1152: usize, 960: usize, 128: usize, 10: usize, 4: usize, 320: usize, 2: usize, 128: usize, 2: usize, 128: usize, 1120: usize>(move v@3, move v@4);
    drop v@4;
    drop v@3;
    return
  }
Visiting call: libcrux_kyber::decapsulate<3: usize, 2400: usize, 1152: usize, 1184: usize, 1088: usize, 1152: usize, 960: usize, 128: usize, 10: usize, 4: usize, 320: usize, 2: usize, 128: usize, 2: usize, 128: usize, 1120: usize>
is_array_map: false
--> 0 type_args, 16 const_generics
--> 0 type_args, 16 const_generics
--> pattern: libcrux_kyber::decapsulate<3, 2400, 1152, 1184, 1088, 1152, 960, 128, 10, 4, 320, 2, 128, 2, 128, 1120>
--> name: libcrux_kyber::decapsulate
--> args: &'0_0 (libcrux_kyber::types::KyberPrivateKey<C@1>) ++ &'0_1 (libcrux_kyber::types::KyberCiphertext<C@4>), ret: @Array<u8, 32: usize>
449/465
Visiting global: libcrux_kyber::KEY_GENERATION_SEED_SIZE
  global libcrux_kyber::KEY_GENERATION_SEED_SIZE : usize = libcrux_kyber::KEY_GENERATION_SEED_SIZE
Corresponding body:  fn libcrux_kyber::KEY_GENERATION_SEED_SIZE() -> usize  
{
    v@0 : usize;
    v@1 : usize;
    v@2 : usize;

    v@1 := global libcrux_kyber::constants::CPA_PKE_KEY_GENERATION_SEED_SIZE;
    v@2 := global libcrux_kyber::constants::SHARED_SECRET_SIZE;
    v@0 := move v@1 + move v@2;
    return
  }
450/465
Visiting opaque function: core::convert::TryFrom::try_from
  opaque fn core::convert::TryFrom::try_from<Self, T>(T) -> core::result::Result<Self, Self::Error>
ERROR translating core::convert::TryFrom::try_from: Failure("TODO: TraitTypes Self::Error")

451/465
Visiting opaque function: core::iter::range::Step::steps_between
  opaque fn core::iter::range::Step::steps_between<0, 1, Self>(&0 (Self), &1 (Self)) -> core::option::Option<usize>
452/465
Visiting opaque function: core::iter::range::Step::forward_checked
  opaque fn core::iter::range::Step::forward_checked<Self>(Self, usize) -> core::option::Option<Self>
453/465
Visiting opaque function: core::iter::range::Step::backward_checked
  opaque fn core::iter::range::Step::backward_checked<Self>(Self, usize) -> core::option::Option<Self>
454/465
Visiting opaque function: core::cmp::PartialEq::eq
  opaque fn core::cmp::PartialEq::eq<0, 1, Self, Rhs>(&0 (Self), &1 (Rhs)) -> bool
455/465
Visiting opaque function: core::cmp::PartialOrd::partial_cmp
  opaque fn core::cmp::PartialOrd::partial_cmp<0, 1, Self, Rhs>(&0 (Self), &1 (Rhs)) -> core::option::Option<core::cmp::Ordering>
456/465
Visiting opaque function: core::slice::index::SliceIndex::get
  opaque fn core::slice::index::SliceIndex::get<0, Self, T>(Self, &0 (T)) -> core::option::Option<&0 (Self::Output)>
ERROR translating core::slice::index::SliceIndex::get: Failure("TODO: TraitTypes Self::Output")

457/465
Visiting opaque function: core::slice::index::SliceIndex::get_mut
  opaque fn core::slice::index::SliceIndex::get_mut<0, Self, T>(Self, &0 mut (T)) -> core::option::Option<&0 mut (Self::Output)>
ERROR translating core::slice::index::SliceIndex::get_mut: Failure("TODO: TraitTypes Self::Output")

458/465
Visiting opaque function: core::slice::index::SliceIndex::get_unchecked
  opaque unsafe fn core::slice::index::SliceIndex::get_unchecked<Self, T>(Self, *const T) -> *const Self::Output
ERROR translating core::slice::index::SliceIndex::get_unchecked: Failure("TODO: TRawPtr")

459/465
Visiting opaque function: core::slice::index::SliceIndex::get_unchecked_mut
  opaque unsafe fn core::slice::index::SliceIndex::get_unchecked_mut<Self, T>(Self, *mut T) -> *mut Self::Output
ERROR translating core::slice::index::SliceIndex::get_unchecked_mut: Failure("TODO: TRawPtr")

460/465
Visiting opaque function: core::slice::index::SliceIndex::index
  opaque fn core::slice::index::SliceIndex::index<0, Self, T>(Self, &0 (T)) -> &0 (Self::Output)
ERROR translating core::slice::index::SliceIndex::index: Failure("TODO: TraitTypes Self::Output")

461/465
Visiting opaque function: core::slice::index::SliceIndex::index_mut
  opaque fn core::slice::index::SliceIndex::index_mut<0, Self, T>(Self, &0 mut (T)) -> &0 mut (Self::Output)
ERROR translating core::slice::index::SliceIndex::index_mut: Failure("TODO: TraitTypes Self::Output")

462/465
Visiting opaque function: core::cmp::Ord::cmp
  opaque fn core::cmp::Ord::cmp<0, 1, Self>(&0 (Self), &1 (Self)) -> core::cmp::Ordering
463/465
Visiting opaque function: core::ops::function::FnMut::call_mut
  opaque fn core::ops::function::FnMut::call_mut<0, Self, Args>(&0 mut (Self), Args) -> parent(Self)::TraitClause@0::Output
ERROR translating core::ops::function::FnMut::call_mut: Failure("TODO: TraitTypes parent(Self)::TraitClause@0::Output")

464/465
Visiting function: libcrux_kyber::constants::FIELD_MODULUS
  fn libcrux_kyber::constants::FIELD_MODULUS() -> i32  
{
    v@0 : i32;

    v@0 := (3329: i32 : i32);
    return
  }
465/465
Visiting function: libcrux_kyber::constants::BITS_PER_COEFFICIENT
  fn libcrux_kyber::constants::BITS_PER_COEFFICIENT() -> usize  
{
    v@0 : usize;

    v@0 := (12: usize : usize);
    return
  }
1️⃣ LLBC ➡️  AST
LOWSTAR_IGNORE:  external LowStar_Ignore_ignore <1>:<cg: 0> 0 -> ()
EURYDICE:

  external Eurydice_array_to_slice <1>:<cg: 1>
    size_t ->

      0* ->
      Eurydice_slice
        0


  external Eurydice_array_to_subslice <2>:<cg: 1>
    size_t ->

      1* ->
      core_ops_range_Range
        size_t ->
        Eurydice_slice
          1


  external Eurydice_array_to_subslice_to <2>:<cg: 1>
    size_t ->

      1* ->
      core_ops_range_RangeTo
        size_t ->
        Eurydice_slice
          1


  external Eurydice_array_to_subslice_from <2>:<cg: 1>
    size_t ->

      1* ->
      core_ops_range_RangeFrom
        size_t ->
        Eurydice_slice
          1


  external Eurydice_array_repeat <1>:<cg: 1> size_t -> 0 -> 0[0]


  external Eurydice_array_into_iter <1>:<cg: 1>
    size_t ->
    0[0] ->
      core_iter_traits_iterator_Iterator
        0[0]


  external Eurydice_slice_index <1>:<cg: 0> Eurydice_slice 0 -> size_t -> 0


  external Eurydice_slice_subslice <2>:<cg: 0>
    Eurydice_slice
    1 ->
    core_ops_range_Range
      size_t ->
      Eurydice_slice
        1


  external Eurydice_slice_subslice_to <2>:<cg: 0>
    Eurydice_slice
    1 ->
    core_ops_range_RangeTo
      size_t ->
      Eurydice_slice
        1


  external Eurydice_slice_subslice_from <2>:<cg: 0>
    Eurydice_slice
    1 ->
    core_ops_range_RangeFrom
      size_t ->
      Eurydice_slice
        1


  external Eurydice_slice_to_array <2>:<cg: 0>
    1 ->
    core_result_Result
      0 core_array_TryFromSliceError


  external Eurydice_slice_to_array2 <2>:<cg: 0>

    core_result_Result
    0 core_array_TryFromSliceError* ->
    1 ->
      ()


  external Eurydice_range_iterator_step_by <1>:<cg: 0>
    core_ops_range_Range
    0 ->
    size_t ->
      core_iter_adapters_step_by_StepBy
        core_ops_range_Range
        0


  external Eurydice_range_step_by_iterator_next <1>:<cg: 0>

    core_iter_traits_iterator_Iterator
    core_iter_adapters_step_by_StepBy
    0* ->
    core_option_Option
      0


  external Eurydice_vec_push <1>:<cg: 0> Eurydice_vec 0 -> 0 -> ()


  external Eurydice_vec_new <1>:<cg: 0> () -> Eurydice_vec 0


  external Eurydice_vec_len <1>:<cg: 0> Eurydice_vec 0 -> size_t


  external Eurydice_vec_drop <1>:<cg: 0> Eurydice_vec 0 -> ()


  external Eurydice_vec_index <1>:<cg: 0> Eurydice_vec 0 -> size_t ->  0*


  external Eurydice_box_new <1>:<cg: 0> 0 ->  0*


  external Eurydice_replace <1>:<cg: 0>  0* -> 0 -> 0


  external Eurydice_bitand_pv_u8 <0>:<cg: 0>  uint8_t* -> uint8_t -> uint8_t


  external Eurydice_shr_pv_u8 <0>:<cg: 0>  uint8_t* -> int32_t -> uint8_t
LIBCRUX_KYBER:
  const <0>int32_t libcrux_kyber_constants_FIELD_MODULUS =
  let
    mutable
    uu____0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @0 := 3329int32_t;
    return @0

  const <0>size_t libcrux_kyber_constants_BITS_PER_COEFFICIENT =
  let
    mutable
    uu____1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 12size_t;
    return @0

  const <0>size_t libcrux_kyber_constants_COEFFICIENTS_IN_RING_ELEMENT =
  let
    mutable
    uu____2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 256size_t;
    return @0

  const <0>size_t libcrux_kyber_constants_BITS_PER_RING_ELEMENT =
  let
    mutable
    uu____3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @1 := (*,size_t) @0 12size_t;
    return @1

  const <0>size_t libcrux_kyber_constants_BYTES_PER_RING_ELEMENT =
  let
    mutable
    uu____5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.constants.BITS_PER_RING_ELEMENT;
    @1 := (/,size_t) @0 8size_t;
    return @1

  const <0>size_t libcrux_kyber_constants_REJECTION_SAMPLING_SEED_SIZE =
  let
    mutable
    uu____7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := (*,size_t) 168size_t 5size_t;
    return @0

  const <0>size_t libcrux_kyber_constants_SHARED_SECRET_SIZE =
  let
    mutable
    uu____8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 32size_t;
    return @0

  const <0>size_t libcrux_kyber_constants_CPA_PKE_KEY_GENERATION_SEED_SIZE =
  let
    mutable
    uu____9(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 32size_t;
    return @0

  const <0>size_t libcrux_kyber_constants_H_DIGEST_SIZE =
  let
    mutable
    uu____10(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 32size_t;
    return @0

  const <0>uint8_t libcrux_kyber_arithmetic_MONTGOMERY_SHIFT =
  let
    mutable
    uu____11(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    @0 := 16uint8_t;
    return @0

  const <0>int32_t libcrux_kyber_arithmetic_MONTGOMERY_R =
  let
    mutable
    uu____12(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____13(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    @0 := libcrux_kyber.arithmetic.MONTGOMERY_SHIFT;
    @1 := (<<,int32_t) 1int32_t (@0<: uint32_t);
    return @1

  function
  libcrux_kyber_arithmetic_get_n_least_significant_bits
  <cg: 0><0>(
    mutable
    n(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
  ):
  uint32_t
  {
    let
    mutable
    uu____14(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____15(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____16(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____17(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____18(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    @3 := @5;
    @0 := @6;
    @1 := (<<,uint32_t) 1uint32_t (@0<: uint32_t);
    @2 := (-,uint32_t) @1 1uint32_t;
    @4 := (&,uint32_t) @3 @2;
    return @4
  }

  const <0>int64_t libcrux_kyber_arithmetic_BARRETT_SHIFT =
  let
    mutable
    uu____19(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    @0 := 26int64_t;
    return @0

  const <0>int64_t libcrux_kyber_arithmetic_BARRETT_R =
  let
    mutable
    uu____20(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____21(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____22(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    @1 := libcrux_kyber.arithmetic.BARRETT_SHIFT;
    @0 := libcrux_kyber.arithmetic.BARRETT_SHIFT;
    @2 := (<<,int64_t) 1int64_t (@0<: uint32_t);
    return @2

  const <0>int64_t libcrux_kyber_arithmetic_BARRETT_MULTIPLIER =
  let
    mutable
    uu____23(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    @0 := 20159int64_t;
    return @0


  external core_convert_num_{i64#59}_from <0>:<cg: 0> int32_t -> int64_t


  external core_convert_From_from <2>:<cg: 0> 0 -> 1

  function
  libcrux_kyber_arithmetic_barrett_reduce
  <cg: 0><0>(
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t
  {
    let
    mutable
    uu____24(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    t(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____26(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____27(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____28(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____29(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    quotient(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____31(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____32(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    result(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____34(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____35(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____36(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____37(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____38(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____39(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int64_t
    = $any
    in
    let
    mutable
    uu____40(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @12 := @17;
    @13 := core.convert.num.{i64#59}.from @12;
    @3 := libcrux_kyber.arithmetic.BARRETT_MULTIPLIER;
    @14 := (*,int64_t) @13 @3;
    @2 := libcrux_kyber.arithmetic.BARRETT_R;
    @11 := (>>,int64_t) @2 1uint32_t;
    @15 := (+,int64_t) @14 @11;
    @8 := @15;
    @1 := libcrux_kyber.arithmetic.BARRETT_SHIFT;
    @9 := (>>,int64_t) @8 (@1<: uint32_t);
    @10 := (@9<: int32_t);
    @6 := @17;
    @4 := @10;
    @0 := libcrux_kyber.constants.FIELD_MODULUS;
    @5 := (*,int32_t) @4 @0;
    @7 := (-,int32_t) @6 @5;
    @16 := @7;
    return @16
  }

  const <0>uint32_t libcrux_kyber_arithmetic_INVERSE_OF_MODULUS_MOD_R =
  let
    mutable
    uu____41(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    @0 := 62209uint32_t;
    return @0

  function
  libcrux_kyber_arithmetic_montgomery_reduce
  <cg: 0><0>(
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t
  {
    let
    mutable
    uu____42(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____43(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    t(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____45(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____46(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____47(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    k(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    uu____49(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____50(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    k_times_modulus(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t
    = $any
    in
    let
    mutable
    uu____52(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____53(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    c(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____55(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    value_high(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____57(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____58(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____59(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____60(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____61(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____62(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____63(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____64(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____65(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____66(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    @6 := libcrux_kyber.arithmetic.MONTGOMERY_R;
    @23 := @6;
    @19 := @25;
    @20 := (@19<: uint32_t);
    @5 := libcrux_kyber.arithmetic.MONTGOMERY_SHIFT;
    @21 := libcrux_kyber.arithmetic.get_n_least_significant_bits @5 @20;
    @4 := libcrux_kyber.arithmetic.INVERSE_OF_MODULUS_MOD_R;
    @22 := (*,uint32_t) @21 @4;
    @16 := @22;
    @3 := libcrux_kyber.arithmetic.MONTGOMERY_SHIFT;
    @17 := libcrux_kyber.arithmetic.get_n_least_significant_bits @3 @16;
    @18 := (@17<: int16_t);
    @13 := @18;
    @14 := (@13<: int32_t);
    @2 := libcrux_kyber.constants.FIELD_MODULUS;
    @15 := (*,int32_t) @14 @2;
    @11 := @15;
    @1 := libcrux_kyber.arithmetic.MONTGOMERY_SHIFT;
    @12 := (>>,int32_t) @11 (@1<: uint32_t);
    @9 := @25;
    @0 := libcrux_kyber.arithmetic.MONTGOMERY_SHIFT;
    @10 := (>>,int32_t) @9 (@0<: uint32_t);
    @8 := @10;
    @7 := @12;
    @24 := (-,int32_t) @8 @7;
    return @24
  }

  function
  libcrux_kyber_arithmetic_montgomery_multiply_sfe_by_fer
  <cg: 0><0>(
    mutable
    fe(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    fer(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t
  {
    let
    mutable
    uu____67(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____68(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____69(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____70(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @1 := @5;
    @0 := @4;
    @2 := (*,int32_t) @1 @0;
    @3 := libcrux_kyber.arithmetic.montgomery_reduce @2;
    return @3
  }

  const <0>int32_t libcrux_kyber_arithmetic_MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS =
  let
    mutable
    uu____71(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @0 := 1353int32_t;
    return @0

  function
  libcrux_kyber_arithmetic_to_standard_domain
  <cg: 0><0>(
    mutable
    mfe(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t
  {
    let
    mutable
    uu____72(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____73(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____74(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____75(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @1 := @4;
    @0 := libcrux_kyber.arithmetic.MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS;
    @2 := (*,int32_t) @1 @0;
    @3 := libcrux_kyber.arithmetic.montgomery_reduce @2;
    return @3
  }

  function
  libcrux_kyber_arithmetic_to_unsigned_representative
  <cg: 0><0>(
    mutable
    fe(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  uint16_t
  {
    let
    mutable
    uu____76(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____77(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____78(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____79(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____80(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____81(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____82(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @4 := @7;
    @1 := @7;
    @2 := (>>,int32_t) @1 31uint32_t;
    @0 := libcrux_kyber.constants.FIELD_MODULUS;
    @3 := (&,int32_t) @0 @2;
    @5 := (+,int32_t) @4 @3;
    @6 := (@5<: uint16_t);
    return @6
  }

  type  libcrux_kyber_arithmetic_PolynomialRingElement  =<cg: 0>
    flat
    { mutable coefficients: int32_t[256size_t] }

  function
  libcrux_kyber_arithmetic_{libcrux_kyber::arithmetic::PolynomialRingElement#1}_clone
  <cg: 0><0>(
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____83(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    @0 := (@1: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t];
    return @0
  }

  const <0>libcrux_kyber_arithmetic_PolynomialRingElement libcrux_kyber_arithmetic_{libcrux_kyber::arithmetic::PolynomialRingElement}_ZERO =
  let
    mutable
    uu____84(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____85(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[256size_t]
    = $any
    in
    @0 := Eurydice.array_repeat < int32_t > [[256size_t]] 0int32_t;
    @1 := { coefficients = @0; }: libcrux_kyber_arithmetic_PolynomialRingElement;
    return @1

  type  core_ops_range_Range t0 =<cg: 0>
    flat
    { mutable start: 0; mutable end: 0 }

  type  core_option_Option t0 =<cg: 0> data None {  } | Some { mutable f0: 0 }


  external core_slice_{@Slice<T>}_len <1>:<cg: 0> Eurydice_slice 0 -> size_t


  external core_iter_traits_collect_{I}_into_iter <1>:<cg: 0> 0 -> 0

  type  core_cmp_Ordering  =<cg: 0> data Less {  } | Equal {  } | Greater {  }


  external core_iter_range_{core::ops::range::Range<A>#3}_next <1>:<cg: 0>

    core_ops_range_Range
    0* ->
    core_option_Option
      0


  external core_iter_range_{core::ops::range::Range<A>#3}_size_hint <1>:<cg: 0>

    core_ops_range_Range
    0* ->
    size_t * core_option_Option
      size_t


  external core_iter_range_{core::ops::range::Range<A>#3}_nth <1>:<cg: 0>

    core_ops_range_Range
    0* ->
    size_t ->
      core_option_Option
        0


  external core_iter_range_{core::ops::range::Range<A>#3}_last <1>:<cg: 0>
    core_ops_range_Range
    0 ->
    core_option_Option
      0


  external core_iter_range_{core::ops::range::Range<A>#3}_min <1>:<cg: 0>
    core_ops_range_Range
    0 ->
    core_option_Option
      0


  external core_iter_range_{core::ops::range::Range<A>#3}_max <1>:<cg: 0>
    core_ops_range_Range
    0 ->
    core_option_Option
      0


  external core_iter_range_{core::ops::range::Range<A>#3}_is_sorted <1>:<cg: 0>
    core_ops_range_Range
    0 ->
    bool

  type  core_result_Result t0 t1 =<cg: 0>
    data Ok { mutable f0: 1 } | Err { mutable f0: 0 }


  external core_iter_range_{core::ops::range::Range<A>#3}_advance_by <1>:<cg: 0>

    core_ops_range_Range
    0* ->
    size_t ->
      core_result_Result
        () core_num_nonzero_NonZeroUsize


  external core_clone_impls_{usize#5}_clone <0>:<cg: 0>  size_t* -> size_t


  external core_cmp_impls_{usize#21}_eq <0>:<cg: 0>

    size_t* ->

      size_t* ->
      bool


  external core_cmp_impls_{usize#21}_ne <0>:<cg: 0>

    size_t* ->

      size_t* ->
      bool


  external core_cmp_impls_{usize#54}_partial_cmp <0>:<cg: 0>

    size_t* ->

      size_t* ->
      core_option_Option
        core_cmp_Ordering


  external core_cmp_impls_{usize#54}_lt <0>:<cg: 0>

    size_t* ->

      size_t* ->
      bool


  external core_cmp_impls_{usize#54}_le <0>:<cg: 0>

    size_t* ->

      size_t* ->
      bool


  external core_cmp_impls_{usize#54}_ge <0>:<cg: 0>

    size_t* ->

      size_t* ->
      bool


  external core_cmp_impls_{usize#54}_gt <0>:<cg: 0>

    size_t* ->

      size_t* ->
      bool


  external core_iter_range_{usize#37}_steps_between <0>:<cg: 0>

    size_t* ->

      size_t* ->
      core_option_Option
        size_t


  external core_iter_range_{usize#37}_forward_checked <0>:<cg: 0>
    size_t ->
    size_t ->
      core_option_Option
        size_t


  external core_iter_range_{usize#37}_backward_checked <0>:<cg: 0>
    size_t ->
    size_t ->
      core_option_Option
        size_t


  external core_iter_range_{usize#37}_forward_unchecked <0>:<cg: 0>
    size_t ->
    size_t ->
      size_t


  external core_iter_range_{usize#37}_backward_unchecked <0>:<cg: 0>
    size_t ->
    size_t ->
      size_t


  external core_iter_range_{usize#37}_forward <0>:<cg: 0>
    size_t ->
    size_t ->
      size_t


  external core_iter_range_{usize#37}_backward <0>:<cg: 0>
    size_t ->
    size_t ->
      size_t

  function
  libcrux_kyber_arithmetic_add_to_ring_element
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    lhs(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement,
    mutable
    rhs(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____86(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____87(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____88(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____89(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____90(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____91(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____92(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____94(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____95(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____96(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____97(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____98(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____100(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____101(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____102(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____103(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____104(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____105(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____106(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____107(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____108(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____109(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____110(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____111(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @19 := (@27).coefficients;
    @20 := Eurydice.array_to_slice < int32_t > [[256size_t]] @19;
    @21 := core.slice.{@Slice<T>}.len < int32_t > □ @20;
    @22 := { start = 0size_t; end = @21; }: core_ops_range_Range size_t;
    @23 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @22;
    @18 := @23;
    while<()>
    (true)
    {
      @13 := &(@18);
      @14 := &((@13: core_ops_range_Range size_t*)[0uint32_t]);
      @15 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @14;
      ();
      ();
      match @15 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @12 :=
            UNCHECKED match @15 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @10 := @12;
          @1 :=
            ((@26: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @0 := &((@1: int32_t*)[@10]);
          @11 := (@0: int32_t*)[0uint32_t];
          @9 := @12;
          @5 := (@27).coefficients;
          @4 := &((@5: int32_t*)[@9]);
          @3 := (@27).coefficients;
          @2 := &((@3: int32_t*)[@9]);
          (@4: int32_t*)[0uint32_t] := (+,int32_t) (@2: int32_t*)[0uint32_t] @11;
          ();
          ();
          ();
          @7 := ();
          @16 := @7;
          ();
          ();
          ();
          ();
          @6 := ();
          @17 := @6;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @8 := ();
    @24 := @8;
    @25 := @27;
    return @25
  }

  function
  libcrux_kyber_compress_compress_message_coefficient
  <cg: 0><0>(
    mutable
    fe(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
  ):
  uint8_t
  {
    let
    mutable
    uu____112(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    shifted(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    uu____114(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    uu____115(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    mask(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    uu____117(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    shifted_to_positive(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int16_t
    = $any
    in
    let
    mutable
    uu____119(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    uu____120(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    shifted_positive_in_range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int16_t
    = $any
    in
    let
    mutable
    uu____122(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    uu____123(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    uu____124(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    let
    mutable
    uu____125(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int16_t
    = $any
    in
    @10 := @14;
    @11 := (@10<: int16_t);
    @12 := (-,int16_t) 1664int16_t @11;
    @8 := @12;
    @9 := (>>,int16_t) @8 15uint32_t;
    @6 := @9;
    @5 := @12;
    @7 := (^,int16_t) @6 @5;
    @3 := @7;
    @4 := (-,int16_t) @3 832int16_t;
    @0 := @4;
    @1 := (>>,int16_t) @0 15uint32_t;
    @2 := (&,int16_t) @1 1int16_t;
    @13 := (@2<: uint8_t);
    return @13
  }

  function
  libcrux_kyber_compress_compress_ciphertext_coefficient
  <cg: 0><0>(
    mutable
    coefficient_bits(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t,
    mutable
    fe(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
  ):
  int32_t
  {
    let
    mutable
    uu____126(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    compressed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____128(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____129(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____130(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____131(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____132(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____133(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____134(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____135(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____136(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____137(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____138(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____139(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @10 := @14;
    @11 := (@10<: uint32_t);
    @8 := @15;
    @9 := (+,uint8_t) @8 1uint8_t;
    @12 := (<<,uint32_t) @11 (@9<: uint32_t);
    @1 := libcrux_kyber.constants.FIELD_MODULUS;
    @7 := (@1<: uint32_t);
    @12 := (+,uint32_t) @12 @7;
    @0 := libcrux_kyber.constants.FIELD_MODULUS;
    @5 := (<<,int32_t) @0 1uint32_t;
    @6 := (@5<: uint32_t);
    @12 := (/,uint32_t) @12 @6;
    @3 := @15;
    @2 := @12;
    @4 := libcrux_kyber.arithmetic.get_n_least_significant_bits @3 @2;
    @13 := (@4<: int32_t);
    return @13
  }

  function
  libcrux_kyber_compress_decompress_message_coefficient
  <cg: 0><0>(
    mutable
    fe(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t
  {
    let
    mutable
    uu____140(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____141(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____142(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____143(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____144(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____145(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @3 := @6;
    @4 := (-,int32_t) @3;
    @0 := libcrux_kyber.constants.FIELD_MODULUS;
    @1 := (+,int32_t) @0 1int32_t;
    @2 := (/,int32_t) @1 2int32_t;
    @5 := (&,int32_t) @4 @2;
    return @5
  }

  function
  libcrux_kyber_compress_decompress_ciphertext_coefficient
  <cg: 0><0>(
    mutable
    coefficient_bits(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t,
    mutable
    fe(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t
  {
    let
    mutable
    uu____146(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    decompressed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____148(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____149(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____150(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____151(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____152(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____153(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____154(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____155(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____156(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____157(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____158(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @9 := @13;
    @10 := (@9<: uint32_t);
    @0 := libcrux_kyber.constants.FIELD_MODULUS;
    @8 := (@0<: uint32_t);
    @11 := (*,uint32_t) @10 @8;
    @6 := @11;
    @7 := (<<,uint32_t) @6 1uint32_t;
    @4 := @14;
    @5 := (<<,uint32_t) 1uint32_t (@4<: uint32_t);
    @11 := (+,uint32_t) @7 @5;
    @2 := @14;
    @3 := (+,uint8_t) @2 1uint8_t;
    @11 := (>>,uint32_t) @11 (@3<: uint32_t);
    @1 := @11;
    @12 := (@1<: int32_t);
    return @12
  }


  external core_num_{u16#7}_wrapping_add <0>:<cg: 0>
    uint16_t ->
    uint16_t ->
      uint16_t

  function
  libcrux_kyber_constant_time_ops_is_non_zero
  <cg: 0><0>(
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
  ):
  uint8_t
  {
    let
    mutable
    uu____159(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____161(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    result(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____163(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____164(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____165(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____166(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____167(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____168(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____169(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    @8 := @11;
    @9 := (@8<: uint16_t);
    @4 := @9;
    @1 := @9;
    @2 := (~,uint16_t) @1;
    @3 := core.num.{u16#7}.wrapping_add @2 1uint16_t;
    @5 := (|,uint16_t) @4 @3;
    @6 := (>>,uint16_t) @5 8uint32_t;
    @7 := (&,uint16_t) @6 1uint16_t;
    @0 := @7;
    @10 := (@0<: uint8_t);
    return @10
  }

  function
  libcrux_kyber_constant_time_ops_compare_ciphertexts_in_constant_time
  <cg: 1><0>(
    mutable
    CIPHERTEXT_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    lhs(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t,
    mutable
    rhs(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t
  {
    let
    mutable
    uu____170(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    r(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____172(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____173(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____174(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____176(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____177(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____178(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____179(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____180(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____182(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____183(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____184(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____185(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____186(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____187(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____188(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____189(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____190(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____191(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____192(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____193(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____194(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @23 := 0uint8_t;
    @20 := { start = 0size_t; end = @27; }: core_ops_range_Range size_t;
    @21 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @20;
    @19 := @21;
    while<()>
    (true)
    {
      @14 := &(@19);
      @15 := &((@14: core_ops_range_Range size_t*)[0uint32_t]);
      @16 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @15;
      ();
      ();
      match @16 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @13 :=
            UNCHECKED match @16 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @10 := @13;
          @1 := @26;
          @0 := &(Eurydice.slice_index < uint8_t > □ @1 @10);
          @11 := (@0: uint8_t*)[0uint32_t];
          @8 := @13;
          @3 := @25;
          @2 := &(Eurydice.slice_index < uint8_t > □ @3 @8);
          @9 := (@2: uint8_t*)[0uint32_t];
          @12 := (^,uint8_t) @11 @9;
          ();
          ();
          @23 := (|,uint8_t) @23 @12;
          ();
          ();
          ();
          @5 := ();
          @17 := @5;
          ();
          ();
          ();
          ();
          @4 := ();
          @18 := @4;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @6 := ();
    @22 := @6;
    @7 := @23;
    @24 := libcrux_kyber.constant_time_ops.is_non_zero @7;
    return @24
  }


  external core_num_{u8#6}_wrapping_sub <0>:<cg: 0>
    uint8_t ->
    uint8_t ->
      uint8_t

  function
  libcrux_kyber_constant_time_ops_select_shared_secret_in_constant_time
  <cg: 0><0>(
    mutable
    lhs(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t,
    mutable
    rhs(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t,
    mutable
    selector(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
  ):
  uint8_t[32size_t]
  {
    let
    mutable
    uu____195(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    mask(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____197(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____198(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    out(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____200(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____201(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____202(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____204(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____205(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____206(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____207(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____208(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____210(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____211(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____212(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____213(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____214(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____215(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____216(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____217(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____218(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____219(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____220(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____221(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____222(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____223(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____224(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____225(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____226(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____227(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____228(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____229(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____230(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____231(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____232(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @34 := @38;
    @35 := libcrux_kyber.constant_time_ops.is_non_zero @34;
    @36 := core.num.{u8#6}.wrapping_sub @35 1uint8_t;
    @33 := Eurydice.array_repeat < uint8_t > [[32size_t]] 0uint8_t;
    @11 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @30 := { start = 0size_t; end = @11; }: core_ops_range_Range size_t;
    @31 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @30;
    @29 := @31;
    while<()>
    (true)
    {
      @24 := &(@29);
      @25 := &((@24: core_ops_range_Range size_t*)[0uint32_t]);
      @26 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @25;
      ();
      ();
      match @26 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @23 :=
            UNCHECKED match @26 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @19 := @23;
          @1 := @40;
          @0 := &(Eurydice.slice_index < uint8_t > □ @1 @19);
          @20 := (@0: uint8_t*)[0uint32_t];
          @18 := @36;
          @21 := (&,uint8_t) @20 @18;
          ();
          ();
          @15 := @23;
          @3 := @39;
          @2 := &(Eurydice.slice_index < uint8_t > □ @3 @15);
          @16 := (@2: uint8_t*)[0uint32_t];
          @13 := @36;
          @14 := (~,uint8_t) @13;
          ();
          @17 := (&,uint8_t) @16 @14;
          ();
          ();
          @22 := (|,uint8_t) @21 @17;
          ();
          ();
          @12 := @23;
          @7 := @33;
          @6 := &((@7: uint8_t*)[@12]);
          @5 := @33;
          @4 := &((@5: uint8_t*)[@12]);
          (@6: uint8_t*)[0uint32_t] := (|,uint8_t) (@4: uint8_t*)[0uint32_t] @22;
          ();
          ();
          ();
          ();
          @9 := ();
          @27 := @9;
          ();
          ();
          ();
          ();
          @8 := ();
          @28 := @8;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @10 := ();
    @32 := @10;
    blitbuf @33 0size_t @37 0size_t 32size_t;
    return @37
  }


  external libcrux_digest_sha3_512 <0>:<cg: 0>
    Eurydice_slice
    uint8_t ->
    uint8_t[64size_t]

  function
  libcrux_kyber_hash_functions_G
  <cg: 0><0>(
    mutable
    input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t[64size_t]
  {
    let
    mutable
    uu____233(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    let
    mutable
    uu____234(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    @0 := @2;
    @1 := libcrux.digest.sha3_512 @0;
    return @1
  }


  external libcrux_digest_sha3_256 <0>:<cg: 0>
    Eurydice_slice
    uint8_t ->
    uint8_t[32size_t]

  function
  libcrux_kyber_hash_functions_H
  <cg: 0><0>(
    mutable
    input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t[32size_t]
  {
    let
    mutable
    uu____235(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____236(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    @0 := @2;
    @1 := libcrux.digest.sha3_256 @0;
    return @1
  }


  external libcrux_digest_shake256 <0>:<cg: 1>
    size_t ->
    Eurydice_slice
      uint8_t ->
      uint8_t[0]

  function
  libcrux_kyber_hash_functions_PRF
  <cg: 1><0>(
    mutable
    LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____237(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____238(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    @0 := @2;
    @1 := libcrux.digest.shake256 😱 [[@3]] @0;
    return @1
  }


  external libcrux_platform_simd256_support <0>:<cg: 0> () -> bool


  external libcrux_digest_shake128 <0>:<cg: 1>
    size_t ->
    Eurydice_slice
      uint8_t ->
      uint8_t[0]


  external libcrux_digest_shake128x4 <0>:<cg: 1>
    size_t ->
    Eurydice_slice
      uint8_t ->
      Eurydice_slice
        uint8_t ->
        Eurydice_slice
          uint8_t ->
          Eurydice_slice
            uint8_t ->
            uint8_t[0] * uint8_t[0] * uint8_t[0] * uint8_t[0]

  function
  libcrux_kyber_hash_functions_XOFx4
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[34size_t][0]
  ):
  uint8_t[840size_t][0]
  {
    let
    mutable
    uu____239(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t][0]
    = $any
    in
    let
    mutable
    out(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t][0]
    = $any
    in
    let
    mutable
    uu____241(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____242(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____243(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____244(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____245(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____246(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____247(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____248(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____250(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____251(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____252(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____253(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____254(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____256(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____257(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____258(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____259(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____260(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____261(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____262(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____263(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    d0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    d1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____266(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t] * uint8_t[840size_t] * uint8_t[840size_t] * uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____267(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____268(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____269(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____270(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____271(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____272(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____273(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____274(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____275(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____276(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____277(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____278(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____279(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____280(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____281(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____282(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____283(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____284(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____285(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____286(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    d0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    d1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    d2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____290(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t] * uint8_t[840size_t] * uint8_t[840size_t] * uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____291(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____292(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____293(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____294(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____295(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____296(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____297(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____298(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____299(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____300(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____301(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____302(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____303(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____304(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____305(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____306(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____307(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____308(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____309(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____310(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____311(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____312(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    d0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    d1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    d2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    d3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____317(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t] * uint8_t[840size_t] * uint8_t[840size_t] * uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____318(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____319(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____320(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____321(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____322(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____323(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____324(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____325(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____326(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____327(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____328(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____329(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____330(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____331(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____332(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____333(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____334(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____335(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____336(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____337(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____338(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____339(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____340(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____341(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____342(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____343(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____344(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____345(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____346(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____347(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____348(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____349(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____350(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____351(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____352(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____353(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____354(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____355(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____356(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____357(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____358(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____359(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____360(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____361(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____362(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____363(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____364(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____365(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____366(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____367(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____368(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____369(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____370(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____371(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____372(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____373(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____374(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____375(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____376(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____377(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____378(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____379(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____380(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____381(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____382(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____383(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____384(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____385(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____386(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____387(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____388(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____389(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____390(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____391(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____392(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____393(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____394(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @153 := Eurydice.array_repeat < uint8_t > [[840size_t]] 0uint8_t;
    @154 := Eurydice.array_repeat < uint8_t[840size_t] > [[@157]] @153;
    @149 := libcrux_platform.simd256_support ();
    @150 := (!,bool_t) @149;
    if
    @150
    then @151 := true
    else
      @148 := (!,bool_t) false;
      @151 := @148;
    if
    @151
    then
      @146 := { start = 0size_t; end = @157; }: core_ops_range_Range size_t;
      @147 :=
        core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
          @146;
      ();
      ();
      @145 := @147;
      while<()>
      (true)
      {
        @140 := &(@145);
        @141 := &((@140: core_ops_range_Range size_t*)[0uint32_t]);
        @142 :=
          core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @141;
        ();
        ();
        match @142 with
        | λ .  None () ->  break
        | λ .  Some (_) ->

            @139 :=
              UNCHECKED match @142 with
              | λ
              f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
              Some (@0) ->
               @0;
            @134 := @139;
            @43 := @156;
            @42 := (@43: uint8_t[34size_t]*)[@134];
            @135 := @42;
            @136 := @135;
            @137 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @136;
            ();
            @138 := libcrux.digest.shake128 😱 [[840size_t]] @137;
            ();
            @133 := @139;
            @45 := @154;
            @44 := (@45: uint8_t[840size_t]*)[@133];
            @44 := @138;
            ();
            ();
            ();
            ();
            @51 := ();
            @143 := @51;
            ();
            ();
            ();
            ();
            @50 := ();
            @144 := @50;
            continue
        | λ .  _ ->  $abort<??> (panic!)
      };
      @52 := ();
      @152 := @52;
      ();
      ();
      ();
      ();
      ()
    else
      @131 := (@157<: uint8_t);
      ();
      switch @131
      {
        case 2uint8_t:
          @124 := 0size_t;
          @31 := @156;
          @30 := (@31: uint8_t[34size_t]*)[@124];
          @125 := @30;
          @126 := @125;
          @127 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @126;
          ();
          @120 := 1size_t;
          @33 := @156;
          @32 := (@33: uint8_t[34size_t]*)[@120];
          @121 := @32;
          @122 := @121;
          @123 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @122;
          ();
          @116 := 0size_t;
          @35 := @156;
          @34 := (@35: uint8_t[34size_t]*)[@116];
          @117 := @34;
          @118 := @117;
          @119 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @118;
          ();
          @112 := 1size_t;
          @37 := @156;
          @36 := (@37: uint8_t[34size_t]*)[@112];
          @113 := @36;
          @114 := @113;
          @115 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @114;
          ();
          @128 := libcrux.digest.shake128x4 😱 [[840size_t]] @127 @123 @119 @115;
          ();
          ();
          ();
          ();
          ();
          blitbuf
            match @128 with
            | λ
            uu____395(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (@0, _, _, _) ->
             @0
            0size_t
            @130
            0size_t
            840size_t;
          blitbuf
            match @128 with
            | λ
            uu____396(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (_, @0, _, _) ->
             @0
            0size_t
            @129
            0size_t
            840size_t;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          blitbuf @130 0size_t @111 0size_t 840size_t;
          @110 := 0size_t;
          @39 := @154;
          @38 := (@39: uint8_t[840size_t]*)[@110];
          @38 := @111;
          ();
          ();
          blitbuf @129 0size_t @109 0size_t 840size_t;
          @108 := 1size_t;
          @41 := @154;
          @40 := (@41: uint8_t[840size_t]*)[@108];
          @40 := @109;
          ();
          ();
          @49 := ();
          @132 := @49;
          ();
          ();
          ();
          ();
          @48 := ();
          @152 := @48
        case 3uint8_t:
          @100 := 0size_t;
          @17 := @156;
          @16 := (@17: uint8_t[34size_t]*)[@100];
          @101 := @16;
          @102 := @101;
          @103 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @102;
          ();
          @96 := 1size_t;
          @19 := @156;
          @18 := (@19: uint8_t[34size_t]*)[@96];
          @97 := @18;
          @98 := @97;
          @99 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @98;
          ();
          @92 := 2size_t;
          @21 := @156;
          @20 := (@21: uint8_t[34size_t]*)[@92];
          @93 := @20;
          @94 := @93;
          @95 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @94;
          ();
          @88 := 0size_t;
          @23 := @156;
          @22 := (@23: uint8_t[34size_t]*)[@88];
          @89 := @22;
          @90 := @89;
          @91 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @90;
          ();
          @104 := libcrux.digest.shake128x4 😱 [[840size_t]] @103 @99 @95 @91;
          ();
          ();
          ();
          ();
          ();
          blitbuf
            match @104 with
            | λ
            uu____397(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (@0, _, _, _) ->
             @0
            0size_t
            @107
            0size_t
            840size_t;
          blitbuf
            match @104 with
            | λ
            uu____398(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (_, @0, _, _) ->
             @0
            0size_t
            @106
            0size_t
            840size_t;
          blitbuf
            match @104 with
            | λ
            uu____399(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (_, _, @0, _) ->
             @0
            0size_t
            @105
            0size_t
            840size_t;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          blitbuf @107 0size_t @87 0size_t 840size_t;
          @86 := 0size_t;
          @25 := @154;
          @24 := (@25: uint8_t[840size_t]*)[@86];
          @24 := @87;
          ();
          ();
          blitbuf @106 0size_t @85 0size_t 840size_t;
          @84 := 1size_t;
          @27 := @154;
          @26 := (@27: uint8_t[840size_t]*)[@84];
          @26 := @85;
          ();
          ();
          blitbuf @105 0size_t @83 0size_t 840size_t;
          @82 := 2size_t;
          @29 := @154;
          @28 := (@29: uint8_t[840size_t]*)[@82];
          @28 := @83;
          ();
          ();
          @47 := ();
          @132 := @47;
          ();
          ();
          ();
          ();
          ();
          @48 := ();
          @152 := @48
        case 4uint8_t:
          @73 := 0size_t;
          @1 := @156;
          @0 := (@1: uint8_t[34size_t]*)[@73];
          @74 := @0;
          @75 := @74;
          @76 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @75;
          ();
          @69 := 1size_t;
          @3 := @156;
          @2 := (@3: uint8_t[34size_t]*)[@69];
          @70 := @2;
          @71 := @70;
          @72 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @71;
          ();
          @65 := 2size_t;
          @5 := @156;
          @4 := (@5: uint8_t[34size_t]*)[@65];
          @66 := @4;
          @67 := @66;
          @68 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @67;
          ();
          @61 := 3size_t;
          @7 := @156;
          @6 := (@7: uint8_t[34size_t]*)[@61];
          @62 := @6;
          @63 := @62;
          @64 := Eurydice.array_to_slice < uint8_t > [[34size_t]] @63;
          ();
          @77 := libcrux.digest.shake128x4 😱 [[840size_t]] @76 @72 @68 @64;
          ();
          ();
          ();
          ();
          ();
          blitbuf
            match @77 with
            | λ
            uu____400(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (@0, _, _, _) ->
             @0
            0size_t
            @81
            0size_t
            840size_t;
          blitbuf
            match @77 with
            | λ
            uu____401(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (_, @0, _, _) ->
             @0
            0size_t
            @80
            0size_t
            840size_t;
          blitbuf
            match @77 with
            | λ
            uu____402(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (_, _, @0, _) ->
             @0
            0size_t
            @79
            0size_t
            840size_t;
          blitbuf
            match @77 with
            | λ
            uu____403(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t[840size_t].
            (_, _, _, @0) ->
             @0
            0size_t
            @78
            0size_t
            840size_t;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          blitbuf @81 0size_t @60 0size_t 840size_t;
          @59 := 0size_t;
          @9 := @154;
          @8 := (@9: uint8_t[840size_t]*)[@59];
          @8 := @60;
          ();
          ();
          blitbuf @80 0size_t @58 0size_t 840size_t;
          @57 := 1size_t;
          @11 := @154;
          @10 := (@11: uint8_t[840size_t]*)[@57];
          @10 := @58;
          ();
          ();
          blitbuf @79 0size_t @56 0size_t 840size_t;
          @55 := 2size_t;
          @13 := @154;
          @12 := (@13: uint8_t[840size_t]*)[@55];
          @12 := @56;
          ();
          ();
          blitbuf @78 0size_t @54 0size_t 840size_t;
          @53 := 3size_t;
          @15 := @154;
          @14 := (@15: uint8_t[840size_t]*)[@53];
          @14 := @54;
          ();
          ();
          @46 := ();
          @132 := @46;
          ();
          ();
          ();
          ();
          ();
          ();
          @48 := ();
          @152 := @48
        case _:
          $abort<??> (panic!)
      };
    blitbuf @154 0size_t @155 0size_t @157;
    return @155
  }


  external core_slice_index_{core::ops::range::Range<usize>#4}_get <1>:<cg: 0>
    core_ops_range_Range
    size_t ->
    Eurydice_slice
      0 ->
      core_option_Option
        Eurydice_slice
        0


  external core_slice_index_{core::ops::range::Range<usize>#4}_get_mut <1>:<cg: 0>
    core_ops_range_Range
    size_t ->
    Eurydice_slice
      0 ->
      core_option_Option
        Eurydice_slice
        0


  external core_slice_index_{core::ops::range::Range<usize>#4}_index <1>:<cg: 0>
    core_ops_range_Range
    size_t ->
    Eurydice_slice
      0 ->
      Eurydice_slice
        0


  external core_slice_index_{core::ops::range::Range<usize>#4}_index_mut <1>:<cg: 0>
    core_ops_range_Range
    size_t ->
    Eurydice_slice
      0 ->
      Eurydice_slice
        0


  external core_slice_{@Slice<T>}_copy_from_slice <1>:<cg: 0>
    Eurydice_slice
    0 ->
    Eurydice_slice
      0 ->
      ()


  external core_clone_impls_{u8#6}_clone <0>:<cg: 0>  uint8_t* -> uint8_t

  function
  libcrux_kyber_ind_cpa_into_padded_array
  <cg: 1><0>(
    mutable
    LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    slice(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____404(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____405(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____406(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____407(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____408(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____409(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____410(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____411(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    out(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____413(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____414(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____415(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____416(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____417(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____418(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____419(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____420(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____421(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____422(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____423(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    @17 := false;
    if
    @17
    then
      @12 := @20;
      @13 := core.slice.{@Slice<T>}.len < uint8_t > □ @12;
      ();
      @14 := (<=,size_t) @13 @21;
      ();
      @15 := (!,bool_t) @14;
      ();
      if @15 then $abort<??> (assert failure) else ();
      @1 := ();
      @16 := @1;
      ();
      ();
      @0 := ();
      @18 := @0
    else
      @2 := ();
      @18 := @2;
    @11 := Eurydice.array_repeat < uint8_t > [[@21]] 0uint8_t;
    @7 := @11;
    @4 := @20;
    @5 := core.slice.{@Slice<T>}.len < uint8_t > □ @4;
    @6 := { start = 0size_t; end = @5; }: core_ops_range_Range size_t;
    @8 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@21]] @7 @6;
    @9 := @8;
    @3 := @20;
    @10 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @9 @3;
    blitbuf @11 0size_t @19 0size_t @21;
    return @19
  }

  type  core_ops_range_RangeFrom t0 =<cg: 0> flat { mutable start: 0 }


  external core_slice_{@Slice<T>}_iter <1>:<cg: 0>
    Eurydice_slice
    0 ->
    core_slice_iter_Iter
      0


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_next <1>:<cg: 0>

    core_slice_iter_Iter
    0* ->
    core_option_Option

      0*


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_size_hint <1>:<cg: 0>

    core_slice_iter_Iter
    0* ->
    size_t * core_option_Option
      size_t


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_count <1>:<cg: 0>
    core_slice_iter_Iter
    0 ->
    size_t


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_nth <1>:<cg: 0>

    core_slice_iter_Iter
    0* ->
    size_t ->
      core_option_Option

        0*


  external
  core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_advance_by
  <1>:<cg: 0>

    core_slice_iter_Iter
    0* ->
    size_t ->
      core_result_Result
        () core_num_nonzero_NonZeroUsize


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_last <1>:<cg: 0>
    core_slice_iter_Iter
    0 ->
    core_option_Option

      0*


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_for_each <2>:<cg: 0>
    core_slice_iter_Iter
    1 ->
    0 ->
      ()


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_all <2>:<cg: 0>

    core_slice_iter_Iter
    1* ->
    0 ->
      bool


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_any <2>:<cg: 0>

    core_slice_iter_Iter
    1* ->
    0 ->
      bool


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_find_map <3>:<cg: 0>

    core_slice_iter_Iter
    2* ->
    0 ->
      core_option_Option
        1


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_position <2>:<cg: 0>

    core_slice_iter_Iter
    1* ->
    0 ->
      core_option_Option
        size_t


  external core_slice_iter_{core::slice::iter::Iter<'a, T>#181}_rposition <2>:<cg: 0>

    core_slice_iter_Iter
    1* ->
    0 ->
      core_option_Option
        size_t


  external core_slice_{@Slice<T>}_chunks_exact <1>:<cg: 0>
    Eurydice_slice
    0 ->
    size_t ->
      core_slice_iter_ChunksExact
        0


  external
  core_slice_iter_{core::slice::iter::ChunksExact<'a, T>#89}_next
  <1>:<cg: 0>

    core_slice_iter_ChunksExact
    0* ->
    core_option_Option
      Eurydice_slice
      0


  external
  core_slice_iter_{core::slice::iter::ChunksExact<'a, T>#89}_size_hint
  <1>:<cg: 0>

    core_slice_iter_ChunksExact
    0* ->
    size_t * core_option_Option
      size_t


  external
  core_slice_iter_{core::slice::iter::ChunksExact<'a, T>#89}_count
  <1>:<cg: 0> core_slice_iter_ChunksExact 0 -> size_t

  function
  libcrux_kyber_serialize_compress_coefficients_3
  <cg: 0><0>(
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t,
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
  ):
  uint8_t * uint8_t * uint8_t
  {
    let
    mutable
    uu____424(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t * uint8_t * uint8_t
    = $any
    in
    let
    mutable
    coef1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____426(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____427(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    coef2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____429(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____430(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____431(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____432(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____433(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____434(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    coef3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____436(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____437(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____438(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____439(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____440(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____441(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    @14 := @19;
    @15 := (&,uint16_t) @14 255uint16_t;
    @16 := (@15<: uint8_t);
    @10 := @19;
    @11 := (>>,uint16_t) @10 8uint32_t;
    @7 := @18;
    @8 := (&,uint16_t) @7 15uint16_t;
    @9 := (<<,uint16_t) @8 4uint32_t;
    @12 := (|,uint16_t) @11 @9;
    @13 := (@12<: uint8_t);
    @3 := @18;
    @4 := (>>,uint16_t) @3 4uint32_t;
    @5 := (&,uint16_t) @4 255uint16_t;
    @6 := (@5<: uint8_t);
    @2 := @16;
    @1 := @13;
    @0 := @6;
    @17 := (@2, @1, @0);
    return @17
  }

  function
  libcrux_kyber_serialize_serialize_uncompressed_ring_element
  <cg: 0><0>(
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  uint8_t[384size_t]
  {
    let
    mutable
    uu____442(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[384size_t]
    = $any
    in
    let
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[384size_t]
    = $any
    in
    let
    mutable
    uu____444(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____446(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____447(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____448(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____449(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____451(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____452(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____453(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____454(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    uu____455(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    coefficients(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____457(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____459(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____460(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____462(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____463(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coef1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____467(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t * uint8_t * uint8_t
    = $any
    in
    let
    mutable
    uu____468(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____469(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____470(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____471(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____472(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____473(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____474(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____475(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____476(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____477(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____478(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____479(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____480(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____481(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____482(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____483(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____484(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____485(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____486(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____487(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____488(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____489(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____490(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____491(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____492(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____493(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____494(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @51 := Eurydice.array_repeat < uint8_t > [[384size_t]] 0uint8_t;
    @49 := 0size_t;
    @45 := (@53).coefficients;
    @46 := Eurydice.array_to_slice < int32_t > [[256size_t]] @45;
    @47 := core.slice.{@Slice<T>}.chunks_exact < int32_t > □ @46 2size_t;
    @48 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact int32_t > □ @47;
    @44 := @48;
    while<()>
    (true)
    {
      @39 := &(@44);
      @40 := &((@39: core_slice_iter_ChunksExact int32_t*)[0uint32_t]);
      @41 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < int32_t > □ @40;
      ();
      ();
      match @41 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @38 :=
            UNCHECKED match @41 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              int32_t.
            Some (@0) ->
             @0;
          @34 := 0size_t;
          @1 := @38;
          @0 := &(Eurydice.slice_index < int32_t > □ @1 @34);
          @35 := (@0: int32_t*)[0uint32_t];
          @36 := libcrux_kyber.arithmetic.to_unsigned_representative @35;
          ();
          ();
          ();
          @31 := 1size_t;
          @3 := @38;
          @2 := &(Eurydice.slice_index < int32_t > □ @3 @31);
          @32 := (@2: int32_t*)[0uint32_t];
          @33 := libcrux_kyber.arithmetic.to_unsigned_representative @32;
          ();
          ();
          ();
          @26 := @36;
          @25 := @33;
          @27 := libcrux_kyber.serialize.compress_coefficients_3 @26 @25;
          ();
          ();
          ();
          @30 :=
            match @27 with
            | λ
            uu____495(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (@0, _, _) ->
             @0;
          @29 :=
            match @27 with
            | λ
            uu____496(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, @0, _) ->
             @0;
          @28 :=
            match @27 with
            | λ
            uu____497(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, @0) ->
             @0;
          ();
          @24 := @30;
          @22 := @49;
          @23 := (*,size_t) 3size_t @22;
          ();
          @5 := @51;
          @4 := &((@5: uint8_t*)[@23]);
          (@4: uint8_t*)[0uint32_t] := @24;
          ();
          ();
          @21 := @29;
          @18 := @49;
          @19 := (*,size_t) 3size_t @18;
          ();
          @20 := (+,size_t) @19 1size_t;
          ();
          @7 := @51;
          @6 := &((@7: uint8_t*)[@20]);
          (@6: uint8_t*)[0uint32_t] := @21;
          ();
          ();
          @17 := @28;
          @14 := @49;
          @15 := (*,size_t) 3size_t @14;
          ();
          @16 := (+,size_t) @15 2size_t;
          ();
          @9 := @51;
          @8 := &((@9: uint8_t*)[@16]);
          (@8: uint8_t*)[0uint32_t] := @17;
          ();
          ();
          @12 := ();
          @37 := @12;
          ();
          ();
          ();
          ();
          ();
          ();
          @49 := (+,size_t) @49 1size_t;
          @11 := ();
          @42 := @11;
          ();
          ();
          ();
          ();
          @10 := ();
          @43 := @10;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @13 := ();
    @50 := @13;
    blitbuf @51 0size_t @52 0size_t 384size_t;
    return @52
  }

  function
  libcrux_kyber_ind_cpa_serialize_secret_key
  <cg: 2><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    OUT_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[1]
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____498(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    out(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____500(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____502(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____503(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____504(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____505(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____507(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____508(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____509(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____510(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____511(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____513(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____514(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____515(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____516(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____517(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____518(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____519(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____520(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____521(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____522(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____523(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____524(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____525(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____526(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____527(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[384size_t]
    = $any
    in
    let
    mutable
    uu____528(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____529(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____530(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____531(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____532(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____533(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____534(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    @35 := Eurydice.array_repeat < uint8_t > [[@38]] 0uint8_t;
    @33 := 0size_t;
    @29 := @37;
    @30 :=
      Eurydice.array_to_slice < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@39]] @29;
    @31 :=
      core.slice.{@Slice<T>}.iter
        < libcrux_kyber_arithmetic_PolynomialRingElement > □ @30;
    @32 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_Iter libcrux_kyber_arithmetic_PolynomialRingElement >
        □ @31;
    @28 := @32;
    while<()>
    (true)
    {
      @23 := &(@28);
      @24 :=
        &(
          (@23:
          core_slice_iter_Iter
          libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
        );
      @25 :=
        core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next
          < libcrux_kyber_arithmetic_PolynomialRingElement > □ @24;
      ();
      ();
      match @25 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @22 :=
            UNCHECKED match @25 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

              libcrux_kyber_arithmetic_PolynomialRingElement*.
            Some (@0) ->
             @0;
          @17 := @35;
          @14 := @33;
          @5 := libcrux_kyber.constants.BYTES_PER_RING_ELEMENT;
          @15 := (*,size_t) @14 @5;
          ();
          @11 := @33;
          @12 := (+,size_t) @11 1size_t;
          ();
          @4 := libcrux_kyber.constants.BYTES_PER_RING_ELEMENT;
          @13 := (*,size_t) @12 @4;
          ();
          @16 := { start = @15; end = @13; }: core_ops_range_Range size_t;
          ();
          ();
          @18 :=
            Eurydice.array_to_subslice
              < uint8_t >
              < core_ops_range_Range size_t > [[@38]] @17 @16;
          @19 := @18;
          ();
          ();
          @6 :=
            (@22:
            libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t];
          @7 := libcrux_kyber.serialize.serialize_uncompressed_ring_element @6;
          ();
          @8 := @7;
          @9 := @8;
          @10 := Eurydice.array_to_slice < uint8_t > [[384size_t]] @9;
          ();
          @20 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @19 @10;
          ();
          ();
          ();
          ();
          ();
          ();
          @2 := ();
          @21 := @2;
          ();
          @33 := (+,size_t) @33 1size_t;
          @1 := ();
          @26 := @1;
          ();
          ();
          ();
          ();
          @0 := ();
          @27 := @0;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @3 := ();
    @34 := @3;
    blitbuf @35 0size_t @36 0size_t @38;
    return @36
  }


  external core_slice_index_{core::ops::range::RangeFrom<usize>#6}_get <1>:<cg: 0>
    core_ops_range_RangeFrom
    size_t ->
    Eurydice_slice
      0 ->
      core_option_Option
        Eurydice_slice
        0


  external
  core_slice_index_{core::ops::range::RangeFrom<usize>#6}_get_mut
  <1>:<cg: 0>
    core_ops_range_RangeFrom
    size_t ->
    Eurydice_slice
      0 ->
      core_option_Option
        Eurydice_slice
        0


  external core_slice_index_{core::ops::range::RangeFrom<usize>#6}_index <1>:<cg: 0>
    core_ops_range_RangeFrom
    size_t ->
    Eurydice_slice
      0 ->
      Eurydice_slice
        0


  external
  core_slice_index_{core::ops::range::RangeFrom<usize>#6}_index_mut
  <1>:<cg: 0>
    core_ops_range_RangeFrom
    size_t ->
    Eurydice_slice
      0 ->
      Eurydice_slice
        0

  function
  libcrux_kyber_ind_cpa_serialize_public_key
  <cg: 3><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    RANKED_BYTES_PER_RING_ELEMENT(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    t_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[2],
    mutable
    seed_for_a(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____535(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    public_key_serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[0]
    = $any
    in
    let
    mutable
    uu____537(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____538(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____539(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____540(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____541(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____542(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____543(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____544(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____545(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[1]
    = $any
    in
    let
    mutable
    uu____546(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[2]
    = $any
    in
    let
    mutable
    uu____547(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____548(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____549(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____550(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____551(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    let
    mutable
    uu____552(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    @16 := Eurydice.array_repeat < uint8_t > [[@20]] 0uint8_t;
    @12 := @16;
    @11 := { start = 0size_t; end = @21; }: core_ops_range_Range size_t;
    @13 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@20]] @12 @11;
    @14 := @13;
    blitbuf @19 0size_t @6 0size_t @22;
    @7 := libcrux_kyber.ind_cpa.serialize_secret_key 😱 [[@22]] [[@21]] @6;
    @8 := @7;
    @9 := @8;
    @10 := Eurydice.array_to_slice < uint8_t > [[@21]] @9;
    @15 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @14 @10;
    @2 := @16;
    @1 := { start = @21; }: core_ops_range_RangeFrom size_t;
    @3 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[@20]] @2 @1;
    @4 := @3;
    @0 := @18;
    @5 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @4 @0;
    blitbuf @16 0size_t @17 0size_t @20;
    return @17
  }

  function
  libcrux_kyber_serialize_deserialize_to_uncompressed_ring_element
  <cg: 0><0>(
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____553(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____555(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____557(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____558(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____559(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____561(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____562(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____563(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____564(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____565(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____567(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    byte1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____569(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____570(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____572(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____573(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____575(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____576(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____577(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____578(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____579(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____580(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____581(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____582(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____583(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____584(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____585(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____586(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____587(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____588(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____589(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____590(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____591(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____592(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____593(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____594(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____595(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____596(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____597(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____598(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____599(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____600(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____601(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____602(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____603(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____604(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____605(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____606(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @14 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @52 := @14;
    @50 := 0size_t;
    @47 := @54;
    @48 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @47 3size_t;
    @49 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @48;
    @46 := @49;
    while<()>
    (true)
    {
      @41 := &(@46);
      @42 := &((@41: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @43 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @42;
      ();
      ();
      match @43 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @40 :=
            UNCHECKED match @43 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @36 := 0size_t;
          @1 := @40;
          @0 := &(Eurydice.slice_index < uint8_t > □ @1 @36);
          @37 := (@0: uint8_t*)[0uint32_t];
          @38 := (@37<: int32_t);
          ();
          ();
          ();
          @33 := 1size_t;
          @3 := @40;
          @2 := &(Eurydice.slice_index < uint8_t > □ @3 @33);
          @34 := (@2: uint8_t*)[0uint32_t];
          @35 := (@34<: int32_t);
          ();
          ();
          ();
          @30 := 2size_t;
          @5 := @40;
          @4 := &(Eurydice.slice_index < uint8_t > □ @5 @30);
          @31 := (@4: uint8_t*)[0uint32_t];
          @32 := (@31<: int32_t);
          ();
          ();
          ();
          @27 := @35;
          @28 := (&,int32_t) @27 15int32_t;
          ();
          @29 := (<<,int32_t) @28 8uint32_t;
          ();
          @25 := @38;
          @26 := (&,int32_t) @25 255int32_t;
          ();
          @23 := @50;
          @24 := (*,size_t) 2size_t @23;
          ();
          @7 := (@52).coefficients;
          @6 := &((@7: int32_t*)[@24]);
          (@6: int32_t*)[0uint32_t] := (|,int32_t) @29 @26;
          ();
          ();
          ();
          @21 := @32;
          @22 := (<<,int32_t) @21 4uint32_t;
          ();
          @18 := @35;
          @19 := (>>,int32_t) @18 4uint32_t;
          ();
          @20 := (&,int32_t) @19 15int32_t;
          ();
          @15 := @50;
          @16 := (*,size_t) 2size_t @15;
          ();
          @17 := (+,size_t) @16 1size_t;
          ();
          @9 := (@52).coefficients;
          @8 := &((@9: int32_t*)[@17]);
          (@8: int32_t*)[0uint32_t] := (|,int32_t) @22 @20;
          ();
          ();
          ();
          @12 := ();
          @39 := @12;
          ();
          ();
          ();
          ();
          @50 := (+,size_t) @50 1size_t;
          @11 := ();
          @44 := @11;
          ();
          ();
          ();
          ();
          @10 := ();
          @45 := @10;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @13 := ();
    @51 := @13;
    @53 := @52;
    return @53
  }

  function
  libcrux_kyber_ind_cpa_deserialize_public_key
  <cg: 2><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    T_AS_NTT_ENCODED_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement[1]
  {
    let
    mutable
    uu____607(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[1]
    = $any
    in
    let
    mutable
    t_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[1]
    = $any
    in
    let
    mutable
    uu____609(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____611(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____612(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____613(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____615(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____616(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____617(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____618(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____619(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    t_as_ntt_bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____621(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____622(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____623(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____624(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____625(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____626(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____627(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____628(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____629(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____630(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____631(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____632(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    @7 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @24 :=
      Eurydice.array_repeat < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@28]] @7;
    @22 := 0size_t;
    @19 := @26;
    @6 := libcrux_kyber.constants.BYTES_PER_RING_ELEMENT;
    @20 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @19 @6;
    @21 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @20;
    @18 := @21;
    while<()>
    (true)
    {
      @13 := &(@18);
      @14 := &((@13: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @15 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @14;
      ();
      ();
      match @15 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @12 :=
            UNCHECKED match @15 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @9 := @12;
          @10 :=
            libcrux_kyber.serialize.deserialize_to_uncompressed_ring_element @9;
          ();
          @8 := @22;
          @1 := @24;
          @0 := &((@1: libcrux_kyber_arithmetic_PolynomialRingElement*)[@8]);
          (@0: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t] :=
            @10;
          ();
          ();
          @4 := ();
          @11 := @4;
          ();
          @22 := (+,size_t) @22 1size_t;
          @3 := ();
          @16 := @3;
          ();
          ();
          ();
          ();
          @2 := ();
          @17 := @2;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @5 := ();
    @23 := @5;
    blitbuf @24 0size_t @25 0size_t @28;
    return @25
  }


  external core_num_{u32#8}_BITS <0>:<cg: 0> uint32_t


  external core_clone_impls_{u32#8}_clone <0>:<cg: 0>  uint32_t* -> uint32_t


  external core_cmp_impls_{u32#24}_eq <0>:<cg: 0>

    uint32_t* ->

      uint32_t* ->
      bool


  external core_cmp_impls_{u32#24}_ne <0>:<cg: 0>

    uint32_t* ->

      uint32_t* ->
      bool


  external core_cmp_impls_{u32#60}_partial_cmp <0>:<cg: 0>

    uint32_t* ->

      uint32_t* ->
      core_option_Option
        core_cmp_Ordering


  external core_cmp_impls_{u32#60}_lt <0>:<cg: 0>

    uint32_t* ->

      uint32_t* ->
      bool


  external core_cmp_impls_{u32#60}_le <0>:<cg: 0>

    uint32_t* ->

      uint32_t* ->
      bool


  external core_cmp_impls_{u32#60}_ge <0>:<cg: 0>

    uint32_t* ->

      uint32_t* ->
      bool


  external core_cmp_impls_{u32#60}_gt <0>:<cg: 0>

    uint32_t* ->

      uint32_t* ->
      bool


  external core_iter_range_{u32#33}_steps_between <0>:<cg: 0>

    uint32_t* ->

      uint32_t* ->
      core_option_Option
        size_t


  external core_iter_range_{u32#33}_forward_checked <0>:<cg: 0>
    uint32_t ->
    size_t ->
      core_option_Option
        uint32_t


  external core_iter_range_{u32#33}_backward_checked <0>:<cg: 0>
    uint32_t ->
    size_t ->
      core_option_Option
        uint32_t


  external core_iter_range_{u32#33}_forward_unchecked <0>:<cg: 0>
    uint32_t ->
    size_t ->
      uint32_t


  external core_iter_range_{u32#33}_backward_unchecked <0>:<cg: 0>
    uint32_t ->
    size_t ->
      uint32_t


  external core_iter_range_{u32#33}_forward <0>:<cg: 0>
    uint32_t ->
    size_t ->
      uint32_t


  external core_iter_range_{u32#33}_backward <0>:<cg: 0>
    uint32_t ->
    size_t ->
      uint32_t

  function
  libcrux_kyber_sampling_sample_from_binomial_distribution_2
  <cg: 0><0>(
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____633(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    sampled(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____635(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    chunk_number(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____637(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____638(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____639(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____641(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____642(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____643(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____644(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____645(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    byte_chunk(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____647(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    random_bits_as_u32(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint32_t
    = $any
    in
    let
    mutable
    uu____649(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____650(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____651(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____652(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____653(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____654(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____655(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____656(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____657(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____658(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____659(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____660(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____661(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____662(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____663(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____664(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____665(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    even_bits(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____667(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    odd_bits(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____669(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____670(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    coin_toss_outcomes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint32_t
    = $any
    in
    let
    mutable
    uu____672(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____673(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____674(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      uint32_t
    = $any
    in
    let
    mutable
    uu____675(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      uint32_t
    = $any
    in
    let
    mutable
    uu____676(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      uint32_t
    = $any
    in
    let
    mutable
    uu____678(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____679(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      uint32_t
    = $any
    in
    let
    mutable
    uu____680(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      uint32_t*
    = $any
    in
    let
    mutable
    uu____681(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      uint32_t*
    = $any
    in
    let
    mutable
    outcome_set_(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    outcome_set(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____684(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    outcome_1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____686(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____687(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____688(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____689(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    outcome_2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____691(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____692(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____693(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____694(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____695(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    offset(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____697(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____698(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____699(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____700(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____701(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____702(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____703(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____704(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____705(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____706(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____707(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____708(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____709(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____710(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____711(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____712(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____713(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____714(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____715(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____716(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____717(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____718(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____719(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____720(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____721(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____722(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @17 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @88 := @17;
    @86 := 0size_t;
    @83 := @90;
    @84 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @83 4size_t;
    @85 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @84;
    @82 := @85;
    while<()>
    (true)
    {
      @77 := &(@82);
      @78 := &((@77: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @79 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @78;
      ();
      ();
      match @79 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @76 :=
            UNCHECKED match @79 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @69 := 0size_t;
          @1 := @76;
          @0 := &(Eurydice.slice_index < uint8_t > □ @1 @69);
          @70 := (@0: uint8_t*)[0uint32_t];
          @71 := (@70<: uint32_t);
          ();
          @65 := 1size_t;
          @3 := @76;
          @2 := &(Eurydice.slice_index < uint8_t > □ @3 @65);
          @66 := (@2: uint8_t*)[0uint32_t];
          @67 := (@66<: uint32_t);
          ();
          @68 := (<<,uint32_t) @67 8uint32_t;
          ();
          @72 := (|,uint32_t) @71 @68;
          ();
          ();
          @61 := 2size_t;
          @5 := @76;
          @4 := &(Eurydice.slice_index < uint8_t > □ @5 @61);
          @62 := (@4: uint8_t*)[0uint32_t];
          @63 := (@62<: uint32_t);
          ();
          @64 := (<<,uint32_t) @63 16uint32_t;
          ();
          @73 := (|,uint32_t) @72 @64;
          ();
          ();
          @57 := 3size_t;
          @7 := @76;
          @6 := &(Eurydice.slice_index < uint8_t > □ @7 @57);
          @58 := (@6: uint8_t*)[0uint32_t];
          @59 := (@58<: uint32_t);
          ();
          @60 := (<<,uint32_t) @59 24uint32_t;
          ();
          @74 := (|,uint32_t) @73 @60;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @55 := @74;
          @56 := (&,uint32_t) @55 1431655765uint32_t;
          ();
          ();
          @52 := @74;
          @53 := (>>,uint32_t) @52 1uint32_t;
          ();
          @54 := (&,uint32_t) @53 1431655765uint32_t;
          ();
          ();
          @50 := @56;
          @49 := @54;
          @51 := (+,uint32_t) @50 @49;
          ();
          ();
          ();
          @15 := core.num.{u32#8}.BITS;
          @46 := (/,uint32_t) @15 4uint32_t;
          @47 :=
            { start = 0uint32_t; end = @46; }:
            core_ops_range_Range uint32_t;
          ();
          @48 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range uint32_t > □ @47;
          ();
          ();
          @45 := @48;
          while<()>
          (true)
          {
            @41 := &(@45);
            @42 := &((@41: core_ops_range_Range uint32_t*)[0uint32_t]);
            @43 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < uint32_t > □
                @42;
            ();
            ();
            match @43 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @40 :=
                  UNCHECKED match @43 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  uint32_t.
                  Some (@0) ->
                   @0;
                @38 := @40;
                @39 := (*,uint32_t) @38 4uint32_t;
                ();
                ();
                @34 := @51;
                @33 := @39;
                @35 := (>>,uint32_t) @34 (@33<: uint32_t);
                ();
                ();
                @36 := (&,uint32_t) @35 3uint32_t;
                ();
                @37 := (@36<: int32_t);
                ();
                ();
                @29 := @51;
                @27 := @39;
                @28 := (+,uint32_t) @27 2uint32_t;
                ();
                @30 := (>>,uint32_t) @29 (@28<: uint32_t);
                ();
                ();
                @31 := (&,uint32_t) @30 3uint32_t;
                ();
                @32 := (@31<: int32_t);
                ();
                ();
                @24 := @39;
                @25 := (>>,uint32_t) @24 2uint32_t;
                ();
                @26 := (@25<: size_t);
                ();
                ();
                @23 := @37;
                @22 := @32;
                @19 := @86;
                @20 := (*,size_t) 8size_t @19;
                ();
                @18 := @26;
                @21 := (+,size_t) @20 @18;
                ();
                ();
                @9 := (@88).coefficients;
                @8 := &((@9: int32_t*)[@21]);
                (@8: int32_t*)[0uint32_t] := (-,int32_t) @23 @22;
                ();
                ();
                ();
                @13 := ();
                @44 := @13;
                ();
                ();
                ();
                ();
                ();
                ();
                ();
                ();
                @12 := ();
                @81 := @12;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @14 := ();
          @75 := @14;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @86 := (+,size_t) @86 1size_t;
          @11 := ();
          @80 := @11;
          ();
          ();
          ();
          ();
          @10 := ();
          @81 := @10;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @16 := ();
    @87 := @16;
    @89 := @88;
    return @89
  }


  external core_clone_impls_{i32#14}_clone <0>:<cg: 0>  int32_t* -> int32_t


  external core_cmp_impls_{i32#30}_eq <0>:<cg: 0>

    int32_t* ->

      int32_t* ->
      bool


  external core_cmp_impls_{i32#30}_ne <0>:<cg: 0>

    int32_t* ->

      int32_t* ->
      bool


  external core_cmp_impls_{i32#72}_partial_cmp <0>:<cg: 0>

    int32_t* ->

      int32_t* ->
      core_option_Option
        core_cmp_Ordering


  external core_cmp_impls_{i32#72}_lt <0>:<cg: 0>

    int32_t* ->

      int32_t* ->
      bool


  external core_cmp_impls_{i32#72}_le <0>:<cg: 0>

    int32_t* ->

      int32_t* ->
      bool


  external core_cmp_impls_{i32#72}_ge <0>:<cg: 0>

    int32_t* ->

      int32_t* ->
      bool


  external core_cmp_impls_{i32#72}_gt <0>:<cg: 0>

    int32_t* ->

      int32_t* ->
      bool


  external core_iter_range_{i32#34}_steps_between <0>:<cg: 0>

    int32_t* ->

      int32_t* ->
      core_option_Option
        size_t


  external core_iter_range_{i32#34}_forward_checked <0>:<cg: 0>
    int32_t ->
    size_t ->
      core_option_Option
        int32_t


  external core_iter_range_{i32#34}_backward_checked <0>:<cg: 0>
    int32_t ->
    size_t ->
      core_option_Option
        int32_t


  external core_iter_range_{i32#34}_forward_unchecked <0>:<cg: 0>
    int32_t ->
    size_t ->
      int32_t


  external core_iter_range_{i32#34}_backward_unchecked <0>:<cg: 0>
    int32_t ->
    size_t ->
      int32_t


  external core_iter_range_{i32#34}_forward <0>:<cg: 0>
    int32_t ->
    size_t ->
      int32_t


  external core_iter_range_{i32#34}_backward <0>:<cg: 0>
    int32_t ->
    size_t ->
      int32_t

  function
  libcrux_kyber_sampling_sample_from_binomial_distribution_3
  <cg: 0><0>(
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____723(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    sampled(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____725(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    chunk_number(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____727(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____728(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____729(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____731(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____732(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____733(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____734(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____735(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    byte_chunk(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____737(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    random_bits_as_u24(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint32_t
    = $any
    in
    let
    mutable
    uu____739(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____740(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____741(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____742(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____743(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____744(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____745(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____746(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____747(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____748(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____749(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____750(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    first_bits(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____752(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    second_bits(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____754(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____755(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    third_bits(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____757(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____758(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    coin_toss_outcomes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint32_t
    = $any
    in
    let
    mutable
    uu____760(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____761(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____762(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____763(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____764(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      int32_t
    = $any
    in
    let
    mutable
    uu____765(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      int32_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      int32_t
    = $any
    in
    let
    mutable
    uu____767(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____768(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      int32_t
    = $any
    in
    let
    mutable
    uu____769(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      int32_t*
    = $any
    in
    let
    mutable
    uu____770(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      int32_t*
    = $any
    in
    let
    mutable
    outcome_set_(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    outcome_set(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____773(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    outcome_1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____775(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____776(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____777(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____778(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    outcome_2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____780(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____781(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____782(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____783(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____784(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    offset(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____786(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____787(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____788(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____789(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____790(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____791(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____792(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____793(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____794(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____795(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____796(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____797(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____798(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____799(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____800(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____801(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____802(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____803(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____804(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____805(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____806(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____807(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____808(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @14 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @84 := @14;
    @82 := 0size_t;
    @79 := @86;
    @80 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @79 3size_t;
    @81 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @80;
    @78 := @81;
    while<()>
    (true)
    {
      @73 := &(@78);
      @74 := &((@73: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @75 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @74;
      ();
      ();
      match @75 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @72 :=
            UNCHECKED match @75 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @66 := 0size_t;
          @1 := @72;
          @0 := &(Eurydice.slice_index < uint8_t > □ @1 @66);
          @67 := (@0: uint8_t*)[0uint32_t];
          @68 := (@67<: uint32_t);
          ();
          @62 := 1size_t;
          @3 := @72;
          @2 := &(Eurydice.slice_index < uint8_t > □ @3 @62);
          @63 := (@2: uint8_t*)[0uint32_t];
          @64 := (@63<: uint32_t);
          ();
          @65 := (<<,uint32_t) @64 8uint32_t;
          ();
          @69 := (|,uint32_t) @68 @65;
          ();
          ();
          @58 := 2size_t;
          @5 := @72;
          @4 := &(Eurydice.slice_index < uint8_t > □ @5 @58);
          @59 := (@4: uint8_t*)[0uint32_t];
          @60 := (@59<: uint32_t);
          ();
          @61 := (<<,uint32_t) @60 16uint32_t;
          ();
          @70 := (|,uint32_t) @69 @61;
          ();
          ();
          ();
          ();
          ();
          ();
          @56 := @70;
          @57 := (&,uint32_t) @56 2396745uint32_t;
          ();
          ();
          @53 := @70;
          @54 := (>>,uint32_t) @53 1uint32_t;
          ();
          @55 := (&,uint32_t) @54 2396745uint32_t;
          ();
          ();
          @50 := @70;
          @51 := (>>,uint32_t) @50 2uint32_t;
          ();
          @52 := (&,uint32_t) @51 2396745uint32_t;
          ();
          ();
          @47 := @57;
          @46 := @55;
          @48 := (+,uint32_t) @47 @46;
          ();
          ();
          @45 := @52;
          @49 := (+,uint32_t) @48 @45;
          ();
          ();
          ();
          @43 :=
            { start = 0int32_t; end = 24int32_t; }:
            core_ops_range_Range int32_t;
          @44 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range int32_t > □ @43;
          ();
          ();
          @42 := @44;
          while<()>
          (true)
          {
            @38 := &(@42);
            @39 := &((@38: core_ops_range_Range int32_t*)[0uint32_t]);
            @40 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < int32_t > □
                @39;
            ();
            ();
            match @40 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @37 :=
                  UNCHECKED match @40 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  int32_t.
                  Some (@0) ->
                   @0;
                @35 := @37;
                @36 := (*,int32_t) @35 6int32_t;
                ();
                ();
                @31 := @49;
                @30 := @36;
                @32 := (>>,uint32_t) @31 (@30<: uint32_t);
                ();
                ();
                @33 := (&,uint32_t) @32 7uint32_t;
                ();
                @34 := (@33<: int32_t);
                ();
                ();
                @26 := @49;
                @24 := @36;
                @25 := (+,int32_t) @24 3int32_t;
                ();
                @27 := (>>,uint32_t) @26 (@25<: uint32_t);
                ();
                ();
                @28 := (&,uint32_t) @27 7uint32_t;
                ();
                @29 := (@28<: int32_t);
                ();
                ();
                @21 := @36;
                @22 := (/,int32_t) @21 6int32_t;
                ();
                @23 := (@22<: size_t);
                ();
                ();
                @20 := @34;
                @19 := @29;
                @16 := @82;
                @17 := (*,size_t) 4size_t @16;
                ();
                @15 := @23;
                @18 := (+,size_t) @17 @15;
                ();
                ();
                @7 := (@84).coefficients;
                @6 := &((@7: int32_t*)[@18]);
                (@6: int32_t*)[0uint32_t] := (-,int32_t) @20 @19;
                ();
                ();
                ();
                @10 := ();
                @41 := @10;
                ();
                ();
                ();
                ();
                ();
                ();
                ();
                ();
                @8 := ();
                @77 := @8;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @12 := ();
          @71 := @12;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @82 := (+,size_t) @82 1size_t;
          @11 := ();
          @76 := @11;
          ();
          ();
          ();
          ();
          @9 := ();
          @77 := @9;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @13 := ();
    @83 := @13;
    @85 := @84;
    return @85
  }

  function
  libcrux_kyber_sampling_sample_from_binomial_distribution
  <cg: 1><0>(
    mutable
    ETA(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____809(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____810(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____811(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____812(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    @2 := (@5<: uint32_t);
    switch @2
    {
      case 2uint32_t:
        @1 := @4;
        @3 := libcrux_kyber.sampling.sample_from_binomial_distribution_2 @1;
        ()
      case 3uint32_t:
        @0 := @4;
        @3 := libcrux_kyber.sampling.sample_from_binomial_distribution_3 @0;
        ()
      case _:
        $abort<??> (panic!)
    };
    return @3
  }

  const <0>int32_t[128size_t] libcrux_kyber_ntt_ZETAS_TIMES_MONTGOMERY_R =
  let
    mutable
    uu____813(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    @0 :=
      stack
      newbuf
      {
        -1044int32_t, -758int32_t, -359int32_t, -1517int32_t, 1493int32_t,
        1422int32_t, 287int32_t, 202int32_t, -171int32_t, 622int32_t,
        1577int32_t, 182int32_t, 962int32_t, -1202int32_t, -1474int32_t,
        1468int32_t, 573int32_t, -1325int32_t, 264int32_t, 383int32_t,
        -829int32_t, 1458int32_t, -1602int32_t, -130int32_t, -681int32_t,
        1017int32_t, 732int32_t, 608int32_t, -1542int32_t, 411int32_t,
        -205int32_t, -1571int32_t, 1223int32_t, 652int32_t, -552int32_t,
        1015int32_t, -1293int32_t, 1491int32_t, -282int32_t, -1544int32_t,
        516int32_t, -8int32_t, -320int32_t, -666int32_t, -1618int32_t,
        -1162int32_t, 126int32_t, 1469int32_t, -853int32_t, -90int32_t,
        -271int32_t, 830int32_t, 107int32_t, -1421int32_t, -247int32_t,
        -951int32_t, -398int32_t, 961int32_t, -1508int32_t, -725int32_t,
        448int32_t, -1065int32_t, 677int32_t, -1275int32_t, -1103int32_t,
        430int32_t, 555int32_t, 843int32_t, -1251int32_t, 871int32_t,
        1550int32_t, 105int32_t, 422int32_t, 587int32_t, 177int32_t, -235int32_t,
        -291int32_t, -460int32_t, 1574int32_t, 1653int32_t, -246int32_t,
        778int32_t, 1159int32_t, -147int32_t, -777int32_t, 1483int32_t,
        -602int32_t, 1119int32_t, -1590int32_t, 644int32_t, -872int32_t,
        349int32_t, 418int32_t, 329int32_t, -156int32_t, -75int32_t, 817int32_t,
        1097int32_t, 603int32_t, 610int32_t, 1322int32_t, -1285int32_t,
        -1465int32_t, 384int32_t, -1215int32_t, -136int32_t, 1218int32_t,
        -1335int32_t, -874int32_t, 220int32_t, -1187int32_t, -1659int32_t,
        -1185int32_t, -1530int32_t, -1278int32_t, 794int32_t, -1510int32_t,
        -854int32_t, -870int32_t, 478int32_t, -108int32_t, -308int32_t,
        996int32_t, 991int32_t, 958int32_t, -1460int32_t, 1522int32_t,
        1628int32_t
      };
    return @0

  function
  libcrux_kyber_ntt_ntt_at_layer
  <cg: 0><0>(
    mutable
    zeta_i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement,
    mutable
    layer(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    initial_coefficient_bound(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____814(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    step(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____816(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____817(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____818(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____819(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____820(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____821(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____823(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____824(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____825(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____826(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____827(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    round(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    offset(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____830(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____831(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____832(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____833(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____834(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____835(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____836(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____837(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____838(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____840(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____841(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____842(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____843(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    t(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____846(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____847(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____848(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____849(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____850(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____851(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    let
    mutable
    uu____852(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____853(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____854(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____855(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____856(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____857(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____858(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____859(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____860(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____861(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____862(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____863(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____864(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____865(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    let
    mutable
    uu____866(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____867(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____868(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____869(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____870(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____871(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____872(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____873(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____874(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____875(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____876(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____877(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____878(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____879(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____880(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @64 := @68;
    @65 := (<<,size_t) 1size_t (@64<: uint32_t);
    @59 := @65;
    @60 := (/,size_t) 128size_t @59;
    @61 := { start = 0size_t; end = @60; }: core_ops_range_Range size_t;
    @62 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @61;
    @58 := @62;
    while<()>
    (true)
    {
      @53 := &(@58);
      @54 := &((@53: core_ops_range_Range size_t*)[0uint32_t]);
      @55 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @54;
      ();
      ();
      match @55 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @52 :=
            UNCHECKED match @55 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          (@70: size_t*)[0uint32_t] :=
            (+,size_t) (@70: size_t*)[0uint32_t] 1size_t;
          @49 := @52;
          @48 := @65;
          @50 := (*,size_t) @49 @48;
          ();
          ();
          @51 := (*,size_t) @50 2size_t;
          ();
          ();
          @45 := @51;
          @43 := @51;
          @42 := @65;
          @44 := (+,size_t) @43 @42;
          ();
          ();
          @46 := { start = @45; end = @44; }: core_ops_range_Range size_t;
          ();
          ();
          @47 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range size_t > □ @46;
          ();
          ();
          @41 := @47;
          while<()>
          (true)
          {
            @37 := &(@41);
            @38 := &((@37: core_ops_range_Range size_t*)[0uint32_t]);
            @39 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □
                @38;
            ();
            ();
            match @39 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @36 :=
                  UNCHECKED match @39 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  size_t.
                  Some (@0) ->
                   @0;
                @32 := @36;
                @31 := @65;
                @33 := (+,size_t) @32 @31;
                ();
                ();
                @1 := (@69).coefficients;
                @0 := &((@1: int32_t*)[@33]);
                @34 := (@0: int32_t*)[0uint32_t];
                @15 := libcrux_kyber.ntt.ZETAS_TIMES_MONTGOMERY_R;
                @29 := @15;
                @28 := (@70: size_t*)[0uint32_t];
                @3 := @29;
                @2 := &((@3: int32_t*)[@28]);
                @30 := (@2: int32_t*)[0uint32_t];
                @35 :=
                  libcrux_kyber.arithmetic.montgomery_multiply_sfe_by_fer
                    @34
                    @30;
                ();
                ();
                ();
                ();
                ();
                ();
                @26 := @36;
                @5 := (@69).coefficients;
                @4 := &((@5: int32_t*)[@26]);
                @27 := (@4: int32_t*)[0uint32_t];
                @25 := @35;
                @23 := @36;
                @22 := @65;
                @24 := (+,size_t) @23 @22;
                ();
                ();
                @7 := (@69).coefficients;
                @6 := &((@7: int32_t*)[@24]);
                (@6: int32_t*)[0uint32_t] := (-,int32_t) @27 @25;
                ();
                ();
                ();
                ();
                @20 := @36;
                @9 := (@69).coefficients;
                @8 := &((@9: int32_t*)[@20]);
                @21 := (@8: int32_t*)[0uint32_t];
                @19 := @35;
                @18 := @36;
                @11 := (@69).coefficients;
                @10 := &((@11: int32_t*)[@18]);
                (@10: int32_t*)[0uint32_t] := (+,int32_t) @21 @19;
                ();
                ();
                ();
                ();
                @13 := ();
                @40 := @13;
                ();
                ();
                ();
                ();
                ();
                @12 := ();
                @57 := @12;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @16 := ();
          @56 := @16;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @14 := ();
          @57 := @14;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @17 := ();
    @63 := @17;
    @66 := @69;
    return @66
  }

  function
  libcrux_kyber_ntt_ntt_at_layer_3
  <cg: 0><0>(
    mutable
    zeta_i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement,
    mutable
    layer(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____881(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____882(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____883(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____884(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @2 := &((@6: size_t*)[0uint32_t]);
    @1 := @5;
    @0 := @4;
    @3 := libcrux_kyber.ntt.ntt_at_layer @2 @1 @0 3size_t;
    return @3
  }

  function
  libcrux_kyber_ntt_ntt_binomially_sampled_ring_element
  <cg: 0><0>(
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____885(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    zeta_i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____887(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____888(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____889(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____891(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____892(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____893(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____894(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____895(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    t(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____898(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____899(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____900(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____901(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____902(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____903(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____904(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____905(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____906(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____907(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____908(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____909(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____910(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____911(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____912(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____913(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____914(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____915(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____916(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____917(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____918(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____919(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____920(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____921(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____922(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____923(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____924(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____925(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____926(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____927(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____928(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____929(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____930(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____931(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____932(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____933(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____934(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____935(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____936(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____938(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____939(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____940(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____941(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____943(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____944(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____945(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____946(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____947(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____948(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____949(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____950(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____951(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____952(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____953(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____954(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____955(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____956(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____957(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____958(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____959(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____960(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____961(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____962(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____963(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____964(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____965(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____966(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____967(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @81 := 1size_t;
    @78 := { start = 0size_t; end = 128size_t; }: core_ops_range_Range size_t;
    @79 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @78;
    @77 := @79;
    while<()>
    (true)
    {
      @72 := &(@77);
      @73 := &((@72: core_ops_range_Range size_t*)[0uint32_t]);
      @74 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @73;
      ();
      ();
      match @74 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @71 :=
            UNCHECKED match @74 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @67 := @71;
          @68 := (+,size_t) @67 128size_t;
          ();
          @1 := (@83).coefficients;
          @0 := &((@1: int32_t*)[@68]);
          @69 := (@0: int32_t*)[0uint32_t];
          @70 := (*,int32_t) @69 -1600int32_t;
          ();
          ();
          ();
          @65 := @71;
          @3 := (@83).coefficients;
          @2 := &((@3: int32_t*)[@65]);
          @66 := (@2: int32_t*)[0uint32_t];
          @64 := @70;
          @62 := @71;
          @63 := (+,size_t) @62 128size_t;
          ();
          @5 := (@83).coefficients;
          @4 := &((@5: int32_t*)[@63]);
          (@4: int32_t*)[0uint32_t] := (-,int32_t) @66 @64;
          ();
          ();
          ();
          ();
          @60 := @71;
          @7 := (@83).coefficients;
          @6 := &((@7: int32_t*)[@60]);
          @61 := (@6: int32_t*)[0uint32_t];
          @59 := @70;
          @58 := @71;
          @9 := (@83).coefficients;
          @8 := &((@9: int32_t*)[@58]);
          (@8: int32_t*)[0uint32_t] := (+,int32_t) @61 @59;
          ();
          ();
          ();
          ();
          @19 := ();
          @75 := @19;
          ();
          ();
          ();
          ();
          ();
          @18 := ();
          @76 := @18;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @20 := ();
    @80 := @20;
    @55 := &(@81);
    @56 := &((@55: size_t*)[0uint32_t]);
    @54 := @83;
    @57 := libcrux_kyber.ntt.ntt_at_layer_3 @56 @54 6size_t;
    @83 := @57;
    @51 := &(@81);
    @52 := &((@51: size_t*)[0uint32_t]);
    @50 := @83;
    @53 := libcrux_kyber.ntt.ntt_at_layer_3 @52 @50 5size_t;
    @83 := @53;
    @47 := &(@81);
    @48 := &((@47: size_t*)[0uint32_t]);
    @46 := @83;
    @49 := libcrux_kyber.ntt.ntt_at_layer_3 @48 @46 4size_t;
    @83 := @49;
    @43 := &(@81);
    @44 := &((@43: size_t*)[0uint32_t]);
    @42 := @83;
    @45 := libcrux_kyber.ntt.ntt_at_layer_3 @44 @42 3size_t;
    @83 := @45;
    @39 := &(@81);
    @40 := &((@39: size_t*)[0uint32_t]);
    @38 := @83;
    @41 := libcrux_kyber.ntt.ntt_at_layer_3 @40 @38 2size_t;
    @83 := @41;
    @35 := &(@81);
    @36 := &((@35: size_t*)[0uint32_t]);
    @34 := @83;
    @37 := libcrux_kyber.ntt.ntt_at_layer_3 @36 @34 1size_t;
    @83 := @37;
    @17 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @31 := { start = 0size_t; end = @17; }: core_ops_range_Range size_t;
    @32 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @31;
    @30 := @32;
    while<()>
    (true)
    {
      @26 := &(@30);
      @27 := &((@26: core_ops_range_Range size_t*)[0uint32_t]);
      @28 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @27;
      ();
      ();
      match @28 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @25 :=
            UNCHECKED match @28 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @22 := @25;
          @11 := (@83).coefficients;
          @10 := &((@11: int32_t*)[@22]);
          @23 := (@10: int32_t*)[0uint32_t];
          @24 := libcrux_kyber.arithmetic.barrett_reduce @23;
          ();
          @21 := @25;
          @13 := (@83).coefficients;
          @12 := &((@13: int32_t*)[@21]);
          (@12: int32_t*)[0uint32_t] := @24;
          ();
          ();
          ();
          @15 := ();
          @29 := @15;
          ();
          ();
          ();
          ();
          @14 := ();
          @76 := @14;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @16 := ();
    @33 := @16;
    @82 := @83;
    return @82
  }

  function
  libcrux_kyber_ind_cpa_sample_vector_cbd_then_ntt
  <cg: 3><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    prf_input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[33size_t],
    mutable
    domain_separator(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement[2] * uint8_t
  {
    let
    mutable
    uu____968(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[2] * uint8_t
    = $any
    in
    let
    mutable
    re_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[2]
    = $any
    in
    let
    mutable
    uu____970(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____971(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____972(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____974(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____975(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____976(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____977(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____978(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____980(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____981(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    prf_output(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____983(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____984(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____985(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    r(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____987(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____988(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____989(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____990(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____991(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____992(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____993(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[2]
    = $any
    in
    let
    mutable
    uu____994(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____995(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____996(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____997(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____998(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____999(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1000(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1001(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1002(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @7 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @33 :=
      Eurydice.array_repeat < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@39]] @7;
    @30 := { start = 0size_t; end = @39; }: core_ops_range_Range size_t;
    @31 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @30;
    @29 := @31;
    while<()>
    (true)
    {
      @24 := &(@29);
      @25 := &((@24: core_ops_range_Range size_t*)[0uint32_t]);
      @26 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @25;
      ();
      ();
      match @26 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @23 :=
            UNCHECKED match @26 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @22 := @35;
          @21 := 32size_t;
          @1 := @36;
          @0 := &((@1: uint8_t*)[@21]);
          (@0: uint8_t*)[0uint32_t] := @22;
          ();
          ();
          @35 := (+,uint8_t) @35 1uint8_t;
          @17 := @36;
          @18 := @17;
          @19 := Eurydice.array_to_slice < uint8_t > [[33size_t]] @18;
          ();
          @20 := libcrux_kyber.hash_functions.PRF 😱 [[@37]] @19;
          ();
          ();
          ();
          @13 := @20;
          @14 := @13;
          @15 := Eurydice.array_to_slice < uint8_t > [[@37]] @14;
          ();
          @16 :=
            libcrux_kyber.sampling.sample_from_binomial_distribution 😱 [[@38]]
              @15;
          ();
          ();
          ();
          @11 := @16;
          @12 := libcrux_kyber.ntt.ntt_binomially_sampled_ring_element @11;
          ();
          @10 := @23;
          @3 := @33;
          @2 := &((@3: libcrux_kyber_arithmetic_PolynomialRingElement*)[@10]);
          (@2: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t] :=
            @12;
          ();
          ();
          @5 := ();
          @27 := @5;
          ();
          ();
          ();
          ();
          ();
          ();
          @4 := ();
          @28 := @4;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @6 := ();
    @32 := @6;
    blitbuf @33 0size_t @9 0size_t @39;
    @8 := @35;
    @34 := (@9, @8);
    return @34
  }

  function
  libcrux_kyber_ind_cpa_sample_ring_element_cbd
  <cg: 3><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA2_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    ETA2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    prf_input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*,
    mutable
    domain_separator(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement[2]
  {
    let
    mutable
    uu____1003(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[2]
    = $any
    in
    let
    mutable
    error_1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[2]
    = $any
    in
    let
    mutable
    uu____1005(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1006(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1007(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1009(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1010(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1011(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____1012(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____1013(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1015(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1016(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    prf_output(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[1]
    = $any
    in
    let
    mutable
    uu____1018(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1019(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1020(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1021(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1022(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1023(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1024(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1025(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1026(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1027(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1028(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1029(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1030(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1031(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1032(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @7 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @28 :=
      Eurydice.array_repeat < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@34]] @7;
    @25 := { start = 0size_t; end = @34; }: core_ops_range_Range size_t;
    @26 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @25;
    @24 := @26;
    while<()>
    (true)
    {
      @19 := &(@24);
      @20 := &((@19: core_ops_range_Range size_t*)[0uint32_t]);
      @21 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @20;
      ();
      ();
      match @21 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @18 :=
            UNCHECKED match @21 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @17 := (@30: uint8_t*)[0uint32_t];
          @16 := 32size_t;
          @1 := @31;
          @0 := &((@1: uint8_t*)[@16]);
          (@0: uint8_t*)[0uint32_t] := @17;
          ();
          ();
          (@30: uint8_t*)[0uint32_t] :=
            (+,uint8_t) (@30: uint8_t*)[0uint32_t] 1uint8_t;
          @13 := @31;
          @14 := Eurydice.array_to_slice < uint8_t > [[33size_t]] @13;
          ();
          @15 := libcrux_kyber.hash_functions.PRF 😱 [[@33]] @14;
          ();
          ();
          @9 := @15;
          @10 := @9;
          @11 := Eurydice.array_to_slice < uint8_t > [[@33]] @10;
          ();
          @12 :=
            libcrux_kyber.sampling.sample_from_binomial_distribution 😱 [[@32]]
              @11;
          ();
          @8 := @18;
          @3 := @28;
          @2 := &((@3: libcrux_kyber_arithmetic_PolynomialRingElement*)[@8]);
          (@2: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t] :=
            @12;
          ();
          ();
          ();
          @5 := ();
          @22 := @5;
          ();
          ();
          ();
          ();
          ();
          @4 := ();
          @23 := @4;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @6 := ();
    @27 := @6;
    blitbuf @28 0size_t @29 0size_t @34;
    return @29
  }


  external core_slice_{@Slice<T>}_split_at <1>:<cg: 0>
    Eurydice_slice
    0 ->
    size_t ->
      Eurydice_slice
        0 * Eurydice_slice
        0


  external core_slice_{@Slice<T>}_chunks <1>:<cg: 0>
    Eurydice_slice
    0 ->
    size_t ->
      core_slice_iter_Chunks
        0


  external core_slice_iter_{core::slice::iter::Chunks<'a, T>#70}_next <1>:<cg: 0>

    core_slice_iter_Chunks
    0* ->
    core_option_Option
      Eurydice_slice
      0


  external
  core_slice_iter_{core::slice::iter::Chunks<'a, T>#70}_size_hint
  <1>:<cg: 0>  core_slice_iter_Chunks 0* -> size_t * core_option_Option size_t


  external core_slice_iter_{core::slice::iter::Chunks<'a, T>#70}_count <1>:<cg: 0>
    core_slice_iter_Chunks
    0 ->
    size_t

  function
  libcrux_kyber_sampling_rejection_sampling_panic_with_diagnostic
  <cg: 0><0>(dummy(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()):
  ()
  {
    let
    mutable
    uu____1033(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    $abort<??> (panic!)
  }

  function
  libcrux_kyber_sampling_sample_from_uniform_distribution
  <cg: 0><0>(
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____1034(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    sampled_coefficients(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t
    = $any
    in
    let
    mutable
    out(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    done(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1038(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1039(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Chunks
      uint8_t
    = $any
    in
    let
    mutable
    uu____1040(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Chunks
      uint8_t
    = $any
    in
    let
    mutable
    uu____1041(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1042(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Chunks
      uint8_t
    = $any
    in
    let
    mutable
    uu____1044(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1045(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1046(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1047(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Chunks
      uint8_t*
    = $any
    in
    let
    mutable
    uu____1048(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Chunks
      uint8_t*
    = $any
    in
    let
    mutable
    bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1050(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1051(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    b1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1053(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1054(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    b2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1056(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1057(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    b3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1059(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1060(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    d1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1062(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1063(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1064(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1065(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    d2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1067(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1068(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1069(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1070(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1071(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1072(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1073(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1074(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1075(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1076(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1077(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1078(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1079(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1080(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1081(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1082(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1083(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1084(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1085(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1086(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1087(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1088(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1089(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1090(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1091(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1092(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1093(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1094(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1095(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1096(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1097(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1098(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1099(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1100(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1101(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1102(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1103(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1104(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1105(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1106(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1107(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1108(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1109(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1110(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1111(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1112(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1113(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1114(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1115(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1116(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1117(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1118(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1119(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1120(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1121(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1122(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1123(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1124(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1125(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1126(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1127(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1128(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1129(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1130(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1131(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1132(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1133(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1134(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1135(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @100 := 0size_t;
    @42 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @99 := @42;
    @98 := false;
    @93 := @102;
    @94 := Eurydice.array_to_slice < uint8_t > [[840size_t]] @93;
    @95 := core.slice.{@Slice<T>}.chunks < uint8_t > □ @94 3size_t;
    @96 :=
      core.iter.traits.collect.{I}.into_iter < core_slice_iter_Chunks uint8_t >
        □ @95;
    @92 := @96;
    while<()>
    (true)
    {
      @87 := &(@92);
      @88 := &((@87: core_slice_iter_Chunks uint8_t*)[0uint32_t]);
      @89 :=
        core.slice.iter.{core::slice::iter::Chunks<'a,␣T>#70}.next < uint8_t >
          □ @88;
      ();
      ();
      match @89 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @86 :=
            UNCHECKED match @89 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @84 := @98;
          @85 := (!,bool_t) @84;
          ();
          if
          @85
          then
            @81 := 0size_t;
            @1 := @86;
            @0 := &(Eurydice.slice_index < uint8_t > □ @1 @81);
            @82 := (@0: uint8_t*)[0uint32_t];
            @83 := (@82<: int32_t);
            ();
            ();
            ();
            @78 := 1size_t;
            @3 := @86;
            @2 := &(Eurydice.slice_index < uint8_t > □ @3 @78);
            @79 := (@2: uint8_t*)[0uint32_t];
            @80 := (@79<: int32_t);
            ();
            ();
            ();
            @75 := 2size_t;
            @5 := @86;
            @4 := &(Eurydice.slice_index < uint8_t > □ @5 @75);
            @76 := (@4: uint8_t*)[0uint32_t];
            @77 := (@76<: int32_t);
            ();
            ();
            ();
            @71 := @80;
            @72 := (&,int32_t) @71 15int32_t;
            ();
            @73 := (<<,int32_t) @72 8uint32_t;
            ();
            @70 := @83;
            @74 := (|,int32_t) @73 @70;
            ();
            ();
            ();
            @67 := @77;
            @68 := (<<,int32_t) @67 4uint32_t;
            ();
            @65 := @80;
            @66 := (>>,int32_t) @65 4uint32_t;
            ();
            @69 := (|,int32_t) @68 @66;
            ();
            ();
            ();
            @61 := @74;
            @39 := libcrux_kyber.constants.FIELD_MODULUS;
            @62 := (<,int32_t) @61 @39;
            ();
            if
            @62
            then
              @59 := @100;
              @35 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
              @60 := (<,size_t) @59 @35;
              ();
              @63 := @60;
              ();
              ();
              if
              @63
              then
                @58 := @74;
                @57 := @100;
                @21 := (@99).coefficients;
                @20 := &((@21: int32_t*)[@57]);
                (@20: int32_t*)[0uint32_t] := @58;
                ();
                ();
                @100 := (+,size_t) @100 1size_t;
                @34 := ();
                @64 := @34;
                ();
                ();
                @53 := @69;
                @32 := libcrux_kyber.constants.FIELD_MODULUS;
                @54 := (<,int32_t) @53 @32;
                ();
                if
                @54
                then
                  @51 := @100;
                  @31 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                  @52 := (<,size_t) @51 @31;
                  ();
                  @55 := @52;
                  ();
                  ();
                  if
                  @55
                  then
                    @50 := @69;
                    @49 := @100;
                    @25 := (@99).coefficients;
                    @24 := &((@25: int32_t*)[@49]);
                    (@24: int32_t*)[0uint32_t] := @50;
                    ();
                    ();
                    @100 := (+,size_t) @100 1size_t;
                    @30 := ();
                    @56 := @30;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                  else
                    @29 := ();
                    @56 := @29;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                else
                  @55 := false;
                  ();
                  ();
                  if
                  @55
                  then
                    @50 := @69;
                    @49 := @100;
                    @23 := (@99).coefficients;
                    @22 := &((@23: int32_t*)[@49]);
                    (@22: int32_t*)[0uint32_t] := @50;
                    ();
                    ();
                    @100 := (+,size_t) @100 1size_t;
                    @30 := ();
                    @56 := @30;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                  else
                    @29 := ();
                    @56 := @29;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
              else
                @33 := ();
                @64 := @33;
                ();
                ();
                @53 := @69;
                @32 := libcrux_kyber.constants.FIELD_MODULUS;
                @54 := (<,int32_t) @53 @32;
                ();
                if
                @54
                then
                  @51 := @100;
                  @31 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                  @52 := (<,size_t) @51 @31;
                  ();
                  @55 := @52;
                  ();
                  ();
                  if
                  @55
                  then
                    @50 := @69;
                    @49 := @100;
                    @19 := (@99).coefficients;
                    @18 := &((@19: int32_t*)[@49]);
                    (@18: int32_t*)[0uint32_t] := @50;
                    ();
                    ();
                    @100 := (+,size_t) @100 1size_t;
                    @30 := ();
                    @56 := @30;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                  else
                    @29 := ();
                    @56 := @29;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                else
                  @55 := false;
                  ();
                  ();
                  if
                  @55
                  then
                    @50 := @69;
                    @49 := @100;
                    @17 := (@99).coefficients;
                    @16 := &((@17: int32_t*)[@49]);
                    (@16: int32_t*)[0uint32_t] := @50;
                    ();
                    ();
                    @100 := (+,size_t) @100 1size_t;
                    @30 := ();
                    @56 := @30;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                  else
                    @29 := ();
                    @56 := @29;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
            else
              @63 := false;
              ();
              ();
              if
              @63
              then
                @58 := @74;
                @57 := @100;
                @11 := (@99).coefficients;
                @10 := &((@11: int32_t*)[@57]);
                (@10: int32_t*)[0uint32_t] := @58;
                ();
                ();
                @100 := (+,size_t) @100 1size_t;
                @34 := ();
                @64 := @34;
                ();
                ();
                @53 := @69;
                @32 := libcrux_kyber.constants.FIELD_MODULUS;
                @54 := (<,int32_t) @53 @32;
                ();
                if
                @54
                then
                  @51 := @100;
                  @31 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                  @52 := (<,size_t) @51 @31;
                  ();
                  @55 := @52;
                  ();
                  ();
                  if
                  @55
                  then
                    @50 := @69;
                    @49 := @100;
                    @15 := (@99).coefficients;
                    @14 := &((@15: int32_t*)[@49]);
                    (@14: int32_t*)[0uint32_t] := @50;
                    ();
                    ();
                    @100 := (+,size_t) @100 1size_t;
                    @30 := ();
                    @56 := @30;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                  else
                    @29 := ();
                    @56 := @29;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                else
                  @55 := false;
                  ();
                  ();
                  if
                  @55
                  then
                    @50 := @69;
                    @49 := @100;
                    @13 := (@99).coefficients;
                    @12 := &((@13: int32_t*)[@49]);
                    (@12: int32_t*)[0uint32_t] := @50;
                    ();
                    ();
                    @100 := (+,size_t) @100 1size_t;
                    @30 := ();
                    @56 := @30;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                  else
                    @29 := ();
                    @56 := @29;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
              else
                @33 := ();
                @64 := @33;
                ();
                ();
                @53 := @69;
                @32 := libcrux_kyber.constants.FIELD_MODULUS;
                @54 := (<,int32_t) @53 @32;
                ();
                if
                @54
                then
                  @51 := @100;
                  @31 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                  @52 := (<,size_t) @51 @31;
                  ();
                  @55 := @52;
                  ();
                  ();
                  if
                  @55
                  then
                    @50 := @69;
                    @49 := @100;
                    @9 := (@99).coefficients;
                    @8 := &((@9: int32_t*)[@49]);
                    (@8: int32_t*)[0uint32_t] := @50;
                    ();
                    ();
                    @100 := (+,size_t) @100 1size_t;
                    @30 := ();
                    @56 := @30;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                  else
                    @29 := ();
                    @56 := @29;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                else
                  @55 := false;
                  ();
                  ();
                  if
                  @55
                  then
                    @50 := @69;
                    @49 := @100;
                    @7 := (@99).coefficients;
                    @6 := &((@7: int32_t*)[@49]);
                    (@6: int32_t*)[0uint32_t] := @50;
                    ();
                    ();
                    @100 := (+,size_t) @100 1size_t;
                    @30 := ();
                    @56 := @30;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                  else
                    @29 := ();
                    @56 := @29;
                    ();
                    ();
                    @47 := @100;
                    @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
                    @48 := (==,size_t) @47 @28;
                    ();
                    if
                    @48
                    then
                      @98 := true;
                      @27 := ();
                      @90 := @27;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
                    else
                      @26 := ();
                      @90 := @26;
                      ();
                      ();
                      ();
                      ();
                      ();
                      ()
          else
            @40 := ();
            @90 := @40;
          ();
          ();
          ();
          ();
          ();
          @38 := ();
          @91 := @38;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @41 := ();
    @97 := @41;
    @44 := @98;
    @45 := (!,bool_t) @44;
    if
    @45
    then
      @43 := libcrux_kyber.sampling.rejection_sampling_panic_with_diagnostic ();
      ();
      @37 := ();
      @46 := @37
    else
      @36 := ();
      @46 := @36;
    @101 := @99;
    return @101
  }

  function
  libcrux_kyber_matrix_sample_matrix_A
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    seed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[34size_t],
    mutable
    transpose(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement[0][0]
  {
    let
    mutable
    uu____1136(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0][0]
    = $any
    in
    let
    mutable
    A_transpose(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0][0]
    = $any
    in
    let
    mutable
    uu____1138(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____1139(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1140(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1141(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1143(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1144(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1145(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____1146(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____1147(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    seeds(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[34size_t][0]
    = $any
    in
    let
    mutable
    uu____1150(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[34size_t]
    = $any
    in
    let
    mutable
    uu____1151(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1152(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1153(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1155(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1156(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____1157(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____1158(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1160(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1161(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1162(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1163(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1164(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1165(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    xof_bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t][0]
    = $any
    in
    let
    mutable
    uu____1167(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[34size_t][0]
    = $any
    in
    let
    mutable
    uu____1168(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1169(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1171(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1172(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____1173(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____1174(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    sampled(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1177(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[840size_t]
    = $any
    in
    let
    mutable
    uu____1178(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1179(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): bool
    = $any
    in
    let
    mutable
    uu____1180(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1181(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1182(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1183(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1184(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1185(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1186(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1187(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1188(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1189(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1190(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1191(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1192(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1193(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1194(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1195(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1196(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[0]*
    = $any
    in
    let
    mutable
    uu____1197(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1198(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1199(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1200(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[0]*
    = $any
    in
    let
    mutable
    uu____1201(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1202(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1203(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1204(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[840size_t]*
    = $any
    in
    let
    mutable
    uu____1205(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1206(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____1207(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1208(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1209(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1210(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      uint8_t[34size_t]*
    = $any
    in
    let
    mutable
    uu____1211(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1212(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1213(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @27 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @75 :=
      Eurydice.array_repeat < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@80]] @27;
    @76 :=
      Eurydice.array_repeat
        < libcrux_kyber_arithmetic_PolynomialRingElement[0] > [[@80]] @75;
    @72 := { start = 0size_t; end = @80; }: core_ops_range_Range size_t;
    @73 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @72;
    @71 := @73;
    while<()>
    (true)
    {
      @66 := &(@71);
      @67 := &((@66: core_ops_range_Range size_t*)[0uint32_t]);
      @68 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @67;
      ();
      ();
      match @68 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @65 :=
            UNCHECKED match @68 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          blitbuf @79 0size_t @63 0size_t 34size_t;
          @64 := Eurydice.array_repeat < uint8_t[34size_t] > [[@80]] @63;
          ();
          ();
          @60 := { start = 0size_t; end = @80; }: core_ops_range_Range size_t;
          @61 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range size_t > □ @60;
          ();
          ();
          @59 := @61;
          while<()>
          (true)
          {
            @55 := &(@59);
            @56 := &((@55: core_ops_range_Range size_t*)[0uint32_t]);
            @57 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □
                @56;
            ();
            ();
            match @57 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @54 :=
                  UNCHECKED match @57 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  size_t.
                  Some (@0) ->
                   @0;
                @53 := @65;
                @52 := @54;
                @51 := 32size_t;
                @3 := @64;
                @2 := (@3: uint8_t[34size_t]*)[@52];
                @1 := @2;
                @0 := &((@1: uint8_t*)[@51]);
                (@0: uint8_t*)[0uint32_t] := (@53<: uint8_t);
                ();
                ();
                ();
                @50 := @54;
                @49 := @54;
                @48 := 33size_t;
                @7 := @64;
                @6 := (@7: uint8_t[34size_t]*)[@49];
                @5 := @6;
                @4 := &((@5: uint8_t*)[@48]);
                (@4: uint8_t*)[0uint32_t] := (@50<: uint8_t);
                ();
                ();
                ();
                @24 := ();
                @58 := @24;
                ();
                ();
                ();
                ();
                @23 := ();
                @70 := @23;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @25 := ();
          @62 := @25;
          ();
          ();
          ();
          ();
          ();
          ();
          blitbuf @64 0size_t @46 0size_t @80;
          @47 := libcrux_kyber.hash_functions.XOFx4 😱 [[@80]] @46;
          ();
          ();
          @44 := { start = 0size_t; end = @80; }: core_ops_range_Range size_t;
          @45 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range size_t > □ @44;
          ();
          ();
          @43 := @45;
          while<()>
          (true)
          {
            @39 := &(@43);
            @40 := &((@39: core_ops_range_Range size_t*)[0uint32_t]);
            @41 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □
                @40;
            ();
            ();
            match @41 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @38 :=
                  UNCHECKED match @41 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  size_t.
                  Some (@0) ->
                   @0;
                @35 := @38;
                @9 := @47;
                @8 := (@9: uint8_t[840size_t]*)[@35];
                blitbuf @8 0size_t @36 0size_t 840size_t;
                @37 :=
                  libcrux_kyber.sampling.sample_from_uniform_distribution @36;
                ();
                ();
                ();
                @34 := @78;
                if
                @34
                then
                  @33 := @37;
                  @32 := @38;
                  @31 := @65;
                  @17 := @76;
                  @16 :=
                    (@17:
                    libcrux_kyber_arithmetic_PolynomialRingElement[0]*)[@32];
                  @15 := @16;
                  @14 :=
                    &(
                      (@15:
                      libcrux_kyber_arithmetic_PolynomialRingElement*)[@31]
                    );
                  (@14:
                  libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  := @33;
                  ();
                  ();
                  ();
                  @20 := ();
                  @42 := @20
                else
                  @30 := @37;
                  @29 := @65;
                  @28 := @38;
                  @13 := @76;
                  @12 :=
                    (@13:
                    libcrux_kyber_arithmetic_PolynomialRingElement[0]*)[@29];
                  @11 := @12;
                  @10 :=
                    &(
                      (@11:
                      libcrux_kyber_arithmetic_PolynomialRingElement*)[@28]
                    );
                  (@10:
                  libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  := @30;
                  ();
                  ();
                  ();
                  @19 := ();
                  @42 := @19;
                ();
                ();
                ();
                ();
                ();
                ();
                @18 := ();
                @70 := @18;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @22 := ();
          @69 := @22;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @21 := ();
          @70 := @21;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @26 := ();
    @74 := @26;
    blitbuf @76 0size_t @77 0size_t @80;
    return @77
  }

  function
  libcrux_kyber_ntt_ntt_multiply_binomials
  <cg: 0><0>(
    mutable
    _(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t * int32_t,
    mutable
    _(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t * int32_t,
    mutable
    zeta(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t * int32_t
  {
    let
    mutable
    uu____1214(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    a0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    a1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    b0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    b1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1219(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1220(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1221(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1222(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1223(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1224(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1225(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1226(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1227(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1228(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1229(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1230(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1231(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1232(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1233(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1234(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1235(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1236(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1237(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @22 :=
      match @26 with
      | λ
      uu____1238(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t.
      (@0, _) ->
       @0;
    @21 :=
      match @26 with
      | λ
      uu____1239(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t.
      (_, @0) ->
       @0;
    @20 :=
      match @25 with
      | λ
      uu____1240(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t.
      (@0, _) ->
       @0;
    @19 :=
      match @25 with
      | λ
      uu____1241(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t.
      (_, @0) ->
       @0;
    @15 := @22;
    @14 := @20;
    @16 := (*,int32_t) @15 @14;
    @10 := @21;
    @9 := @19;
    @11 := (*,int32_t) @10 @9;
    @12 := libcrux_kyber.arithmetic.montgomery_reduce @11;
    @8 := @24;
    @13 := (*,int32_t) @12 @8;
    @17 := (+,int32_t) @16 @13;
    @18 := libcrux_kyber.arithmetic.montgomery_reduce @17;
    @4 := @22;
    @3 := @19;
    @5 := (*,int32_t) @4 @3;
    @1 := @21;
    @0 := @20;
    @2 := (*,int32_t) @1 @0;
    @6 := (+,int32_t) @5 @2;
    @7 := libcrux_kyber.arithmetic.montgomery_reduce @6;
    @23 := (@18, @7);
    return @23
  }

  function
  libcrux_kyber_ntt_ntt_multiply
  <cg: 0><0>(
    mutable
    lhs(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*,
    mutable
    rhs(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____1242(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    out(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1244(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1245(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1246(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1247(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1249(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1250(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1251(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____1252(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____1253(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    product(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____1256(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____1257(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1258(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1259(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1260(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1261(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1262(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1263(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1264(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____1265(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1266(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1267(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1268(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1269(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1270(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1271(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1272(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1273(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    let
    mutable
    uu____1274(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1275(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1276(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1277(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1278(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1279(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1280(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1281(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1282(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    product(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____1284(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____1285(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1286(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1287(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1288(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1289(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1290(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1291(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1292(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1293(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____1294(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1295(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1296(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1297(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1298(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1299(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1300(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1301(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1302(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1303(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1304(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    let
    mutable
    uu____1305(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1306(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1307(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1308(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1309(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1310(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1311(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1312(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1313(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1314(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1315(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1316(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1317(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1318(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    let
    mutable
    uu____1319(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    let
    mutable
    uu____1320(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1321(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1322(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1323(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1324(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1325(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1326(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1327(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1328(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1329(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1330(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1331(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1332(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1333(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1334(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1335(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1336(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1337(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1338(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1339(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1340(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1341(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1342(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1343(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1344(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1345(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1346(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1347(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1348(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1349(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @34 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @106 := @34;
    @33 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @102 := (/,size_t) @33 4size_t;
    @103 := { start = 0size_t; end = @102; }: core_ops_range_Range size_t;
    @104 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @103;
    @101 := @104;
    while<()>
    (true)
    {
      @96 := &(@101);
      @97 := &((@96: core_ops_range_Range size_t*)[0uint32_t]);
      @98 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @97;
      ();
      ();
      match @98 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @95 :=
            UNCHECKED match @98 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @90 := @95;
          @91 := (*,size_t) 4size_t @90;
          ();
          @1 :=
            ((@109: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @0 := &((@1: int32_t*)[@91]);
          @92 := (@0: int32_t*)[0uint32_t];
          @86 := @95;
          @87 := (*,size_t) 4size_t @86;
          ();
          @88 := (+,size_t) @87 1size_t;
          ();
          @3 :=
            ((@109: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @2 := &((@3: int32_t*)[@88]);
          @89 := (@2: int32_t*)[0uint32_t];
          @93 := (@92, @89);
          ();
          ();
          @82 := @95;
          @83 := (*,size_t) 4size_t @82;
          ();
          @5 :=
            ((@108: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @4 := &((@5: int32_t*)[@83]);
          @84 := (@4: int32_t*)[0uint32_t];
          @78 := @95;
          @79 := (*,size_t) 4size_t @78;
          ();
          @80 := (+,size_t) @79 1size_t;
          ();
          @7 :=
            ((@108: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @6 := &((@7: int32_t*)[@80]);
          @81 := (@6: int32_t*)[0uint32_t];
          @85 := (@84, @81);
          ();
          ();
          @31 := libcrux_kyber.ntt.ZETAS_TIMES_MONTGOMERY_R;
          @76 := @31;
          @74 := @95;
          @75 := (+,size_t) 64size_t @74;
          ();
          @9 := @76;
          @8 := &((@9: int32_t*)[@75]);
          @77 := (@8: int32_t*)[0uint32_t];
          @94 := libcrux_kyber.ntt.ntt_multiply_binomials @93 @85 @77;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @73 :=
            match @94 with
            | λ
            uu____1350(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (@0, _) ->
             @0;
          @71 := @95;
          @72 := (*,size_t) 4size_t @71;
          ();
          @11 := (@106).coefficients;
          @10 := &((@11: int32_t*)[@72]);
          (@10: int32_t*)[0uint32_t] := @73;
          ();
          ();
          @70 :=
            match @94 with
            | λ
            uu____1351(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, @0) ->
             @0;
          @67 := @95;
          @68 := (*,size_t) 4size_t @67;
          ();
          @69 := (+,size_t) @68 1size_t;
          ();
          @13 := (@106).coefficients;
          @12 := &((@13: int32_t*)[@69]);
          (@12: int32_t*)[0uint32_t] := @70;
          ();
          ();
          @61 := @95;
          @62 := (*,size_t) 4size_t @61;
          ();
          @63 := (+,size_t) @62 2size_t;
          ();
          @15 :=
            ((@109: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @14 := &((@15: int32_t*)[@63]);
          @64 := (@14: int32_t*)[0uint32_t];
          @57 := @95;
          @58 := (*,size_t) 4size_t @57;
          ();
          @59 := (+,size_t) @58 3size_t;
          ();
          @17 :=
            ((@109: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @16 := &((@17: int32_t*)[@59]);
          @60 := (@16: int32_t*)[0uint32_t];
          @65 := (@64, @60);
          ();
          ();
          @52 := @95;
          @53 := (*,size_t) 4size_t @52;
          ();
          @54 := (+,size_t) @53 2size_t;
          ();
          @19 :=
            ((@108: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @18 := &((@19: int32_t*)[@54]);
          @55 := (@18: int32_t*)[0uint32_t];
          @48 := @95;
          @49 := (*,size_t) 4size_t @48;
          ();
          @50 := (+,size_t) @49 3size_t;
          ();
          @21 :=
            ((@108: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @20 := &((@21: int32_t*)[@50]);
          @51 := (@20: int32_t*)[0uint32_t];
          @56 := (@55, @51);
          ();
          ();
          @30 := libcrux_kyber.ntt.ZETAS_TIMES_MONTGOMERY_R;
          @45 := @30;
          @43 := @95;
          @44 := (+,size_t) 64size_t @43;
          ();
          @23 := @45;
          @22 := &((@23: int32_t*)[@44]);
          @46 := (@22: int32_t*)[0uint32_t];
          @47 := (-,int32_t) @46;
          ();
          @66 := libcrux_kyber.ntt.ntt_multiply_binomials @65 @56 @47;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @42 :=
            match @66 with
            | λ
            uu____1352(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (@0, _) ->
             @0;
          @39 := @95;
          @40 := (*,size_t) 4size_t @39;
          ();
          @41 := (+,size_t) @40 2size_t;
          ();
          @25 := (@106).coefficients;
          @24 := &((@25: int32_t*)[@41]);
          (@24: int32_t*)[0uint32_t] := @42;
          ();
          ();
          @38 :=
            match @66 with
            | λ
            uu____1353(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, @0) ->
             @0;
          @35 := @95;
          @36 := (*,size_t) 4size_t @35;
          ();
          @37 := (+,size_t) @36 3size_t;
          ();
          @27 := (@106).coefficients;
          @26 := &((@27: int32_t*)[@37]);
          (@26: int32_t*)[0uint32_t] := @38;
          ();
          ();
          @29 := ();
          @99 := @29;
          ();
          ();
          ();
          ();
          ();
          ();
          @28 := ();
          @100 := @28;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @32 := ();
    @105 := @32;
    @107 := @106;
    return @107
  }

  function
  libcrux_kyber_matrix_compute_As_plus_e
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    matrix_A(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[0]*,
    mutable
    s_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*,
    mutable
    error_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement[0]
  {
    let
    mutable
    uu____1354(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    result(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____1356(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1358(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____1359(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____1360(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____1361(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[0]*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____1363(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1364(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1365(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1366(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]*
    = $any
    in
    let
    mutable
    uu____1367(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]*
    = $any
    in
    let
    mutable
    row(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1369(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1370(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1372(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1373(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1374(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1375(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1377(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1378(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1379(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1380(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    matrix_element(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1382(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    product(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1384(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1385(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1386(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1387(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1388(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1389(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1390(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1391(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1392(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1393(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1394(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1395(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1397(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1398(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____1399(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____1400(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient_normal_form(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t
    = $any
    in
    let
    mutable
    uu____1403(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1404(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1405(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1406(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1407(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1408(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1409(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1410(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1411(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1412(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1413(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1414(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1415(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1416(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1417(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1418(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1419(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1420(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1421(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1422(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1423(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1424(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1425(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1426(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1427(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1428(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1429(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1430(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1431(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1432(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1433(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1434(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1435(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1436(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1437(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1438(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1439(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1440(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1441(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1442(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1443(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    @29 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @88 :=
      Eurydice.array_repeat < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@93]] @29;
    @86 := 0size_t;
    @82 := @92;
    @83 :=
      Eurydice.array_to_slice
        < libcrux_kyber_arithmetic_PolynomialRingElement[0] > [[@93]] @82;
    @84 :=
      core.slice.{@Slice<T>}.iter
        < libcrux_kyber_arithmetic_PolynomialRingElement[0] > □ @83;
    @85 :=
      core.iter.traits.collect.{I}.into_iter
        <
        core_slice_iter_Iter
        libcrux_kyber_arithmetic_PolynomialRingElement[0]
        > □ @84;
    @81 := @85;
    while<()>
    (true)
    {
      @76 := &(@81);
      @77 :=
        &(
          (@76:
          core_slice_iter_Iter
          libcrux_kyber_arithmetic_PolynomialRingElement[0]*)[0uint32_t]
        );
      @78 :=
        core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next
          < libcrux_kyber_arithmetic_PolynomialRingElement[0] > □ @77;
      ();
      ();
      match @78 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @75 :=
            UNCHECKED match @78 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

              libcrux_kyber_arithmetic_PolynomialRingElement*.
            Some (@0) ->
             @0;
          @72 := 0size_t;
          ();
          @68 := @75;
          @69 :=
            Eurydice.array_to_slice
              < libcrux_kyber_arithmetic_PolynomialRingElement > [[@93]] @68;
          ();
          @70 :=
            core.slice.{@Slice<T>}.iter
              < libcrux_kyber_arithmetic_PolynomialRingElement > □ @69;
          ();
          @71 :=
            core.iter.traits.collect.{I}.into_iter
              <
              core_slice_iter_Iter
              libcrux_kyber_arithmetic_PolynomialRingElement
              > □ @70;
          ();
          ();
          @67 := @71;
          while<()>
          (true)
          {
            @63 := &(@67);
            @64 :=
              &(
                (@63:
                core_slice_iter_Iter
                libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
              );
            @65 :=
              core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next
                < libcrux_kyber_arithmetic_PolynomialRingElement > □ @64;
            ();
            ();
            match @65 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @62 :=
                  UNCHECKED match @65 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

                    libcrux_kyber_arithmetic_PolynomialRingElement*.
                  Some (@0) ->
                   @0;
                @59 :=
                  &(
                    (@62:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  );
                @56 := @72;
                @1 := @91;
                @0 :=
                  &((@1: libcrux_kyber_arithmetic_PolynomialRingElement*)[@56]);
                @57 :=
                  &(
                    (@0:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  );
                @58 :=
                  &(
                    (@57:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  );
                @60 := libcrux_kyber.ntt.ntt_multiply @59 @58;
                ();
                ();
                ();
                ();
                ();
                @53 := @86;
                @3 := @88;
                @2 :=
                  &((@3: libcrux_kyber_arithmetic_PolynomialRingElement*)[@53]);
                @54 :=
                  (@2:
                  libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t];
                @51 := &(@60);
                @52 :=
                  &(
                    (@51:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  );
                @55 :=
                  libcrux_kyber.arithmetic.add_to_ring_element 😱 [[@93]] @54 @52;
                ();
                ();
                @50 := @86;
                @5 := @88;
                @4 :=
                  &((@5: libcrux_kyber_arithmetic_PolynomialRingElement*)[@50]);
                (@4:
                libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                := @55;
                ();
                ();
                ();
                ();
                @25 := ();
                @61 := @25;
                ();
                ();
                @72 := (+,size_t) @72 1size_t;
                @24 := ();
                @66 := @24;
                ();
                ();
                ();
                ();
                @23 := ();
                @80 := @23;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @27 := ();
          @73 := @27;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @26 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
          @48 := { start = 0size_t; end = @26; }: core_ops_range_Range size_t;
          @49 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range size_t > □ @48;
          ();
          ();
          @47 := @49;
          while<()>
          (true)
          {
            @43 := &(@47);
            @44 := &((@43: core_ops_range_Range size_t*)[0uint32_t]);
            @45 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □
                @44;
            ();
            ();
            match @45 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @42 :=
                  UNCHECKED match @45 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  size_t.
                  Some (@0) ->
                   @0;
                @39 := @86;
                @38 := @42;
                @9 := @88;
                @8 :=
                  &((@9: libcrux_kyber_arithmetic_PolynomialRingElement*)[@39]);
                @7 :=
                  (
                    (@8:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  ).coefficients;
                @6 := &((@7: int32_t*)[@38]);
                @40 := (@6: int32_t*)[0uint32_t];
                @41 := libcrux_kyber.arithmetic.to_standard_domain @40;
                ();
                ();
                ();
                ();
                @35 := @41;
                @33 := @86;
                @32 := @42;
                @13 := @90;
                @12 :=
                  &((@13: libcrux_kyber_arithmetic_PolynomialRingElement*)[@33]);
                @11 :=
                  (
                    (@12:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  ).coefficients;
                @10 := &((@11: int32_t*)[@32]);
                @34 := (@10: int32_t*)[0uint32_t];
                @36 := (+,int32_t) @35 @34;
                ();
                ();
                @37 := libcrux_kyber.arithmetic.barrett_reduce @36;
                ();
                @31 := @86;
                @30 := @42;
                @17 := @88;
                @16 :=
                  &((@17: libcrux_kyber_arithmetic_PolynomialRingElement*)[@31]);
                @15 :=
                  (
                    (@16:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  ).coefficients;
                @14 := &((@15: int32_t*)[@30]);
                (@14: int32_t*)[0uint32_t] := @37;
                @19 := ();
                @46 := @19;
                ();
                ();
                ();
                ();
                ();
                ();
                ();
                ();
                ();
                ();
                @18 := ();
                @80 := @18;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @22 := ();
          @74 := @22;
          ();
          ();
          ();
          ();
          ();
          ();
          @86 := (+,size_t) @86 1size_t;
          @21 := ();
          @79 := @21;
          ();
          ();
          ();
          ();
          @20 := ();
          @80 := @20;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @28 := ();
    @87 := @28;
    blitbuf @88 0size_t @89 0size_t @93;
    return @89
  }

  function
  libcrux_kyber_ind_cpa_generate_keypair
  <cg: 6><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    RANKED_BYTES_PER_RING_ELEMENT(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    ETA1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA1_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    key_generation_seed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t[4] * uint8_t[3]
  {
    let
    mutable
    uu____1444(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[4] * uint8_t[3]
    = $any
    in
    let
    mutable
    hashed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    let
    mutable
    uu____1446(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    seed_for_A(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    seed_for_secret_and_error(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1449(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1450(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1451(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    A_transpose(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[5][5]
    = $any
    in
    let
    mutable
    uu____1453(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[34size_t]
    = $any
    in
    let
    mutable
    uu____1454(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    prf_input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[33size_t]
    = $any
    in
    let
    mutable
    uu____1456(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    secret_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[5]
    = $any
    in
    let
    mutable
    domain_separator(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t
    = $any
    in
    let
    mutable
    uu____1459(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[5] * uint8_t
    = $any
    in
    let
    mutable
    uu____1460(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[33size_t]
    = $any
    in
    let
    mutable
    error_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[5]
    = $any
    in
    let
    mutable
    uu____1462(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[5] * uint8_t
    = $any
    in
    let
    mutable
    uu____1463(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[33size_t]
    = $any
    in
    let
    mutable
    uu____1464(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    t_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[5]
    = $any
    in
    let
    mutable
    uu____1466(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[5]*
    = $any
    in
    let
    mutable
    uu____1467(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[5]*
    = $any
    in
    let
    mutable
    uu____1468(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1469(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1470(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1471(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    public_key_serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[3]
    = $any
    in
    let
    mutable
    uu____1473(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[5]
    = $any
    in
    let
    mutable
    uu____1474(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    secret_key_serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[4]
    = $any
    in
    let
    mutable
    uu____1476(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[5]
    = $any
    in
    let
    mutable
    uu____1477(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[4]
    = $any
    in
    let
    mutable
    uu____1478(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[3]
    = $any
    in
    @32 := @35;
    @33 := libcrux_kyber.hash_functions.G @32;
    @27 := @33;
    @28 := Eurydice.array_to_slice < uint8_t > [[64size_t]] @27;
    @29 := core.slice.{@Slice<T>}.split_at < uint8_t > □ @28 32size_t;
    @31 :=
      match @29 with
      | λ
      uu____1479(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (@0, _) ->
       @0;
    @30 :=
      match @29 with
      | λ
      uu____1480(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (_, @0) ->
       @0;
    @24 := @31;
    @25 := libcrux_kyber.ind_cpa.into_padded_array 😱 [[34size_t]] @24;
    @26 := libcrux_kyber.matrix.sample_matrix_A 😱 [[@41]] @25 true;
    @22 := @30;
    @23 := libcrux_kyber.ind_cpa.into_padded_array 😱 [[33size_t]] @22;
    blitbuf @23 0size_t @18 0size_t 33size_t;
    @19 :=
      libcrux_kyber.ind_cpa.sample_vector_cbd_then_ntt 😱 [[@41]] [[@37]] [[@36]]
        @18
        0uint8_t;
    blitbuf
      match @19 with
      | λ
      uu____1481(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      libcrux_kyber_arithmetic_PolynomialRingElement[5].
      (@0, _) ->
       @0
      0size_t
      @21
      0size_t
      @41;
    @20 :=
      match @19 with
      | λ
      uu____1482(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t.
      (_, @0) ->
       @0;
    blitbuf @23 0size_t @15 0size_t 33size_t;
    @14 := @20;
    @16 :=
      libcrux_kyber.ind_cpa.sample_vector_cbd_then_ntt 😱 [[@41]] [[@37]] [[@36]]
        @15
        @14;
    blitbuf
      match @16 with
      | λ
      uu____1483(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      libcrux_kyber_arithmetic_PolynomialRingElement[5].
      (@0, _) ->
       @0
      0size_t
      @17
      0size_t
      @41;
    @11 := @26;
    @12 := @11;
    @9 := @21;
    @10 := @9;
    @7 := @17;
    @8 := @7;
    @13 := libcrux_kyber.matrix.compute_As_plus_e 😱 [[@41]] @12 @10 @8;
    blitbuf @13 0size_t @5 0size_t @41;
    @4 := @31;
    @6 :=
      libcrux_kyber.ind_cpa.serialize_public_key 😱 [[@41]] [[@38]] [[@39]] @5 @4;
    blitbuf @21 0size_t @2 0size_t @41;
    @3 := libcrux_kyber.ind_cpa.serialize_secret_key 😱 [[@41]] [[@40]] @2;
    blitbuf @3 0size_t @1 0size_t @40;
    blitbuf @6 0size_t @0 0size_t @39;
    @34 := (@1, @0);
    return @34
  }

  function
  libcrux_kyber_serialize_compress_coefficients_10
  <cg: 0><0>(
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
  {
    let
    mutable
    uu____1484(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
    = $any
    in
    let
    mutable
    coef1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1486(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1487(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1489(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1490(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1491(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1492(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1493(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1494(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1495(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1496(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1498(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1499(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1500(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1501(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1502(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1503(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1504(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1505(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1507(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1508(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1509(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1510(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1511(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1512(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1513(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1514(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1516(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1517(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1518(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1519(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1520(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1521(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1522(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1523(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    @36 := @43;
    @37 := (&,int32_t) @36 255int32_t;
    @38 := (@37<: uint8_t);
    @31 := @42;
    @32 := (&,int32_t) @31 63int32_t;
    @33 := (@32<: uint8_t);
    @34 := (<<,uint8_t) @33 2uint32_t;
    @27 := @43;
    @28 := (>>,int32_t) @27 8uint32_t;
    @29 := (&,int32_t) @28 3int32_t;
    @30 := (@29<: uint8_t);
    @35 := (|,uint8_t) @34 @30;
    @22 := @41;
    @23 := (&,int32_t) @22 15int32_t;
    @24 := (@23<: uint8_t);
    @25 := (<<,uint8_t) @24 4uint32_t;
    @18 := @42;
    @19 := (>>,int32_t) @18 6uint32_t;
    @20 := (&,int32_t) @19 15int32_t;
    @21 := (@20<: uint8_t);
    @26 := (|,uint8_t) @25 @21;
    @13 := @40;
    @14 := (&,int32_t) @13 3int32_t;
    @15 := (@14<: uint8_t);
    @16 := (<<,uint8_t) @15 6uint32_t;
    @9 := @41;
    @10 := (>>,int32_t) @9 4uint32_t;
    @11 := (&,int32_t) @10 63int32_t;
    @12 := (@11<: uint8_t);
    @17 := (|,uint8_t) @16 @12;
    @5 := @40;
    @6 := (>>,int32_t) @5 2uint32_t;
    @7 := (&,int32_t) @6 255int32_t;
    @8 := (@7<: uint8_t);
    @4 := @38;
    @3 := @35;
    @2 := @26;
    @1 := @17;
    @0 := @8;
    @39 := (@4, @3, @2, @1, @0);
    return @39
  }

  function
  libcrux_kyber_serialize_compress_then_serialize_10
  <cg: 1><0>(
    mutable
    OUT_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____1524(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____1526(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1528(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____1529(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____1530(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1531(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____1533(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1534(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1535(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1536(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    uu____1537(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    coefficients(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1539(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1541(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1542(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1543(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1545(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1546(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1547(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1549(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1550(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1551(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1553(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1554(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1555(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coef1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1561(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
    = $any
    in
    let
    mutable
    uu____1562(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1563(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1564(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1565(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1566(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1567(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1568(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1569(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1570(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1571(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1572(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1573(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1574(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1575(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1576(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1577(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1578(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1579(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1580(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1581(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1582(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1583(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1584(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1585(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1586(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1587(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1588(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1589(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1590(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1591(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1592(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1593(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1594(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1595(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1596(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1597(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1598(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1599(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1600(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1601(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1602(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1603(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1604(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1605(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1606(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @81 := Eurydice.array_repeat < uint8_t > [[@84]] 0uint8_t;
    @79 := 0size_t;
    @75 := (@83).coefficients;
    @76 := Eurydice.array_to_slice < int32_t > [[256size_t]] @75;
    @77 := core.slice.{@Slice<T>}.chunks_exact < int32_t > □ @76 4size_t;
    @78 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact int32_t > □ @77;
    @74 := @78;
    while<()>
    (true)
    {
      @69 := &(@74);
      @70 := &((@69: core_slice_iter_ChunksExact int32_t*)[0uint32_t]);
      @71 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < int32_t > □ @70;
      ();
      ();
      match @71 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @68 :=
            UNCHECKED match @71 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              int32_t.
            Some (@0) ->
             @0;
          @63 := 0size_t;
          @1 := @68;
          @0 := &(Eurydice.slice_index < int32_t > □ @1 @63);
          @64 := (@0: int32_t*)[0uint32_t];
          @65 := libcrux_kyber.arithmetic.to_unsigned_representative @64;
          ();
          @66 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 10uint8_t @65;
          ();
          ();
          ();
          @59 := 1size_t;
          @3 := @68;
          @2 := &(Eurydice.slice_index < int32_t > □ @3 @59);
          @60 := (@2: int32_t*)[0uint32_t];
          @61 := libcrux_kyber.arithmetic.to_unsigned_representative @60;
          ();
          @62 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 10uint8_t @61;
          ();
          ();
          ();
          @55 := 2size_t;
          @5 := @68;
          @4 := &(Eurydice.slice_index < int32_t > □ @5 @55);
          @56 := (@4: int32_t*)[0uint32_t];
          @57 := libcrux_kyber.arithmetic.to_unsigned_representative @56;
          ();
          @58 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 10uint8_t @57;
          ();
          ();
          ();
          @51 := 3size_t;
          @7 := @68;
          @6 := &(Eurydice.slice_index < int32_t > □ @7 @51);
          @52 := (@6: int32_t*)[0uint32_t];
          @53 := libcrux_kyber.arithmetic.to_unsigned_representative @52;
          ();
          @54 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 10uint8_t @53;
          ();
          ();
          ();
          @44 := @66;
          @43 := @62;
          @42 := @58;
          @41 := @54;
          @45 :=
            libcrux_kyber.serialize.compress_coefficients_10 @44 @43 @42 @41;
          ();
          ();
          ();
          ();
          ();
          @50 :=
            match @45 with
            | λ
            uu____1607(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (@0, _, _, _, _) ->
             @0;
          @49 :=
            match @45 with
            | λ
            uu____1608(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, @0, _, _, _) ->
             @0;
          @48 :=
            match @45 with
            | λ
            uu____1609(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, @0, _, _) ->
             @0;
          @47 :=
            match @45 with
            | λ
            uu____1610(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, @0, _) ->
             @0;
          @46 :=
            match @45 with
            | λ
            uu____1611(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, @0) ->
             @0;
          ();
          @40 := @50;
          @38 := @79;
          @39 := (*,size_t) 5size_t @38;
          ();
          @9 := @81;
          @8 := &((@9: uint8_t*)[@39]);
          (@8: uint8_t*)[0uint32_t] := @40;
          ();
          ();
          @37 := @49;
          @34 := @79;
          @35 := (*,size_t) 5size_t @34;
          ();
          @36 := (+,size_t) @35 1size_t;
          ();
          @11 := @81;
          @10 := &((@11: uint8_t*)[@36]);
          (@10: uint8_t*)[0uint32_t] := @37;
          ();
          ();
          @33 := @48;
          @30 := @79;
          @31 := (*,size_t) 5size_t @30;
          ();
          @32 := (+,size_t) @31 2size_t;
          ();
          @13 := @81;
          @12 := &((@13: uint8_t*)[@32]);
          (@12: uint8_t*)[0uint32_t] := @33;
          ();
          ();
          @29 := @47;
          @26 := @79;
          @27 := (*,size_t) 5size_t @26;
          ();
          @28 := (+,size_t) @27 3size_t;
          ();
          @15 := @81;
          @14 := &((@15: uint8_t*)[@28]);
          (@14: uint8_t*)[0uint32_t] := @29;
          ();
          ();
          @25 := @46;
          @22 := @79;
          @23 := (*,size_t) 5size_t @22;
          ();
          @24 := (+,size_t) @23 4size_t;
          ();
          @17 := @81;
          @16 := &((@17: uint8_t*)[@24]);
          (@16: uint8_t*)[0uint32_t] := @25;
          ();
          ();
          @20 := ();
          @67 := @20;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @79 := (+,size_t) @79 1size_t;
          @19 := ();
          @72 := @19;
          ();
          ();
          ();
          ();
          @18 := ();
          @73 := @18;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @21 := ();
    @80 := @21;
    blitbuf @81 0size_t @82 0size_t @84;
    return @82
  }

  function
  libcrux_kyber_serialize_compress_coefficients_11
  <cg: 0><0>(
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    coefficient8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
  {
    let
    mutable
    uu____1612(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
    = $any
    in
    let
    mutable
    coef1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1614(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1616(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1617(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1618(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1619(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1620(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1621(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1622(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1624(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1625(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1626(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1627(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1628(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1629(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1630(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1632(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1633(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1634(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1636(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1637(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1638(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1639(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1640(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1641(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1642(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1644(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1645(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1646(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1647(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1648(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1649(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1650(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1652(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1653(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1654(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1655(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1656(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1657(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1658(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1660(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1661(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1662(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef9(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1664(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1665(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1666(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1667(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1668(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1669(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1670(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef10(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1672(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1673(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1674(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1675(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1676(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1677(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1678(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coef11(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1680(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1681(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1682(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1683(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1684(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1685(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1686(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1687(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1688(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1689(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1690(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1691(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1692(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    @78 := @88;
    @79 := (@78<: uint8_t);
    @73 := @87;
    @74 := (&,int32_t) @73 31int32_t;
    @75 := (@74<: uint8_t);
    @76 := (<<,uint8_t) @75 3uint32_t;
    @70 := @88;
    @71 := (>>,int32_t) @70 8uint32_t;
    @72 := (@71<: uint8_t);
    @77 := (|,uint8_t) @76 @72;
    @65 := @86;
    @66 := (&,int32_t) @65 3int32_t;
    @67 := (@66<: uint8_t);
    @68 := (<<,uint8_t) @67 6uint32_t;
    @62 := @87;
    @63 := (>>,int32_t) @62 5uint32_t;
    @64 := (@63<: uint8_t);
    @69 := (|,uint8_t) @68 @64;
    @58 := @86;
    @59 := (>>,int32_t) @58 2uint32_t;
    @60 := (&,int32_t) @59 255int32_t;
    @61 := (@60<: uint8_t);
    @53 := @85;
    @54 := (&,int32_t) @53 127int32_t;
    @55 := (@54<: uint8_t);
    @56 := (<<,uint8_t) @55 1uint32_t;
    @50 := @86;
    @51 := (>>,int32_t) @50 10uint32_t;
    @52 := (@51<: uint8_t);
    @57 := (|,uint8_t) @56 @52;
    @45 := @84;
    @46 := (&,int32_t) @45 15int32_t;
    @47 := (@46<: uint8_t);
    @48 := (<<,uint8_t) @47 4uint32_t;
    @42 := @85;
    @43 := (>>,int32_t) @42 7uint32_t;
    @44 := (@43<: uint8_t);
    @49 := (|,uint8_t) @48 @44;
    @37 := @83;
    @38 := (&,int32_t) @37 1int32_t;
    @39 := (@38<: uint8_t);
    @40 := (<<,uint8_t) @39 7uint32_t;
    @34 := @84;
    @35 := (>>,int32_t) @34 4uint32_t;
    @36 := (@35<: uint8_t);
    @41 := (|,uint8_t) @40 @36;
    @30 := @83;
    @31 := (>>,int32_t) @30 1uint32_t;
    @32 := (&,int32_t) @31 255int32_t;
    @33 := (@32<: uint8_t);
    @25 := @82;
    @26 := (&,int32_t) @25 63int32_t;
    @27 := (@26<: uint8_t);
    @28 := (<<,uint8_t) @27 2uint32_t;
    @22 := @83;
    @23 := (>>,int32_t) @22 9uint32_t;
    @24 := (@23<: uint8_t);
    @29 := (|,uint8_t) @28 @24;
    @17 := @81;
    @18 := (&,int32_t) @17 7int32_t;
    @19 := (@18<: uint8_t);
    @20 := (<<,uint8_t) @19 5uint32_t;
    @14 := @82;
    @15 := (>>,int32_t) @14 6uint32_t;
    @16 := (@15<: uint8_t);
    @21 := (|,uint8_t) @20 @16;
    @11 := @81;
    @12 := (>>,int32_t) @11 3uint32_t;
    @13 := (@12<: uint8_t);
    @10 := @79;
    @9 := @77;
    @8 := @69;
    @7 := @61;
    @6 := @57;
    @5 := @49;
    @4 := @41;
    @3 := @33;
    @2 := @29;
    @1 := @21;
    @0 := @13;
    @80 := (@10, @9, @8, @7, @6, @5, @4, @3, @2, @1, @0);
    return @80
  }

  function
  libcrux_kyber_serialize_compress_then_serialize_11
  <cg: 1><0>(
    mutable
    OUT_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____1693(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____1695(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1697(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____1698(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____1699(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1700(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____1702(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1703(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1704(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1705(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    uu____1706(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    coefficients(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1708(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1710(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1711(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1712(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1714(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1715(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1716(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1718(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1719(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1720(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1722(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1723(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1724(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1726(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1727(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1728(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1730(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1731(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1732(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1734(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1735(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1736(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1738(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____1739(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1740(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coef1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef9(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef10(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef11(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1752(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
    = $any
    in
    let
    mutable
    uu____1753(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1754(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1755(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1756(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1757(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1758(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1759(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1760(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1761(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1762(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1763(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1764(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1765(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1766(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1767(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1768(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1769(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1770(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1771(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1772(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1773(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1774(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1775(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1776(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1777(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1778(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1779(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1780(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1781(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1782(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1783(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1784(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1785(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1786(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1787(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1788(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1789(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1790(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1791(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1792(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1793(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1794(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1795(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1796(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1797(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1798(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1799(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1800(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____1801(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1802(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1803(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1804(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1805(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1806(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1807(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1808(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1809(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1810(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1811(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1812(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1813(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1814(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1815(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1816(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1817(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1818(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1819(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1820(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1821(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1822(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1823(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1824(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1825(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1826(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1827(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1828(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1829(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1830(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1831(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1832(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1833(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1834(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1835(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1836(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1837(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1838(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1839(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1840(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1841(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1842(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1843(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1844(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____1845(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @151 := Eurydice.array_repeat < uint8_t > [[@154]] 0uint8_t;
    @149 := 0size_t;
    @145 := (@153).coefficients;
    @146 := Eurydice.array_to_slice < int32_t > [[256size_t]] @145;
    @147 := core.slice.{@Slice<T>}.chunks_exact < int32_t > □ @146 8size_t;
    @148 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact int32_t > □ @147;
    @144 := @148;
    while<()>
    (true)
    {
      @139 := &(@144);
      @140 := &((@139: core_slice_iter_ChunksExact int32_t*)[0uint32_t]);
      @141 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < int32_t > □ @140;
      ();
      ();
      match @141 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @138 :=
            UNCHECKED match @141 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              int32_t.
            Some (@0) ->
             @0;
          @133 := 0size_t;
          @1 := @138;
          @0 := &(Eurydice.slice_index < int32_t > □ @1 @133);
          @134 := (@0: int32_t*)[0uint32_t];
          @135 := libcrux_kyber.arithmetic.to_unsigned_representative @134;
          ();
          @136 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient
              11uint8_t
              @135;
          ();
          ();
          ();
          @129 := 1size_t;
          @3 := @138;
          @2 := &(Eurydice.slice_index < int32_t > □ @3 @129);
          @130 := (@2: int32_t*)[0uint32_t];
          @131 := libcrux_kyber.arithmetic.to_unsigned_representative @130;
          ();
          @132 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient
              11uint8_t
              @131;
          ();
          ();
          ();
          @125 := 2size_t;
          @5 := @138;
          @4 := &(Eurydice.slice_index < int32_t > □ @5 @125);
          @126 := (@4: int32_t*)[0uint32_t];
          @127 := libcrux_kyber.arithmetic.to_unsigned_representative @126;
          ();
          @128 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient
              11uint8_t
              @127;
          ();
          ();
          ();
          @121 := 3size_t;
          @7 := @138;
          @6 := &(Eurydice.slice_index < int32_t > □ @7 @121);
          @122 := (@6: int32_t*)[0uint32_t];
          @123 := libcrux_kyber.arithmetic.to_unsigned_representative @122;
          ();
          @124 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient
              11uint8_t
              @123;
          ();
          ();
          ();
          @117 := 4size_t;
          @9 := @138;
          @8 := &(Eurydice.slice_index < int32_t > □ @9 @117);
          @118 := (@8: int32_t*)[0uint32_t];
          @119 := libcrux_kyber.arithmetic.to_unsigned_representative @118;
          ();
          @120 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient
              11uint8_t
              @119;
          ();
          ();
          ();
          @113 := 5size_t;
          @11 := @138;
          @10 := &(Eurydice.slice_index < int32_t > □ @11 @113);
          @114 := (@10: int32_t*)[0uint32_t];
          @115 := libcrux_kyber.arithmetic.to_unsigned_representative @114;
          ();
          @116 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient
              11uint8_t
              @115;
          ();
          ();
          ();
          @109 := 6size_t;
          @13 := @138;
          @12 := &(Eurydice.slice_index < int32_t > □ @13 @109);
          @110 := (@12: int32_t*)[0uint32_t];
          @111 := libcrux_kyber.arithmetic.to_unsigned_representative @110;
          ();
          @112 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient
              11uint8_t
              @111;
          ();
          ();
          ();
          @105 := 7size_t;
          @15 := @138;
          @14 := &(Eurydice.slice_index < int32_t > □ @15 @105);
          @106 := (@14: int32_t*)[0uint32_t];
          @107 := libcrux_kyber.arithmetic.to_unsigned_representative @106;
          ();
          @108 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient
              11uint8_t
              @107;
          ();
          ();
          ();
          @92 := @136;
          @91 := @132;
          @90 := @128;
          @89 := @124;
          @88 := @120;
          @87 := @116;
          @86 := @112;
          @85 := @108;
          @93 :=
            libcrux_kyber.serialize.compress_coefficients_11
              @92
              @91
              @90
              @89
              @88
              @87
              @86
              @85;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @104 :=
            match @93 with
            | λ
            uu____1846(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (@0, _, _, _, _, _, _, _, _, _, _) ->
             @0;
          @103 :=
            match @93 with
            | λ
            uu____1847(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, @0, _, _, _, _, _, _, _, _, _) ->
             @0;
          @102 :=
            match @93 with
            | λ
            uu____1848(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, @0, _, _, _, _, _, _, _, _) ->
             @0;
          @101 :=
            match @93 with
            | λ
            uu____1849(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, @0, _, _, _, _, _, _, _) ->
             @0;
          @100 :=
            match @93 with
            | λ
            uu____1850(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, @0, _, _, _, _, _, _) ->
             @0;
          @99 :=
            match @93 with
            | λ
            uu____1851(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, _, @0, _, _, _, _, _) ->
             @0;
          @98 :=
            match @93 with
            | λ
            uu____1852(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, _, _, @0, _, _, _, _) ->
             @0;
          @97 :=
            match @93 with
            | λ
            uu____1853(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, _, _, _, @0, _, _, _) ->
             @0;
          @96 :=
            match @93 with
            | λ
            uu____1854(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, _, _, _, _, @0, _, _) ->
             @0;
          @95 :=
            match @93 with
            | λ
            uu____1855(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, _, _, _, _, _, @0, _) ->
             @0;
          @94 :=
            match @93 with
            | λ
            uu____1856(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, _, _, _, _, _, _, @0) ->
             @0;
          ();
          @84 := @104;
          @82 := @149;
          @83 := (*,size_t) 11size_t @82;
          ();
          @17 := @151;
          @16 := &((@17: uint8_t*)[@83]);
          (@16: uint8_t*)[0uint32_t] := @84;
          ();
          ();
          @81 := @103;
          @78 := @149;
          @79 := (*,size_t) 11size_t @78;
          ();
          @80 := (+,size_t) @79 1size_t;
          ();
          @19 := @151;
          @18 := &((@19: uint8_t*)[@80]);
          (@18: uint8_t*)[0uint32_t] := @81;
          ();
          ();
          @77 := @102;
          @74 := @149;
          @75 := (*,size_t) 11size_t @74;
          ();
          @76 := (+,size_t) @75 2size_t;
          ();
          @21 := @151;
          @20 := &((@21: uint8_t*)[@76]);
          (@20: uint8_t*)[0uint32_t] := @77;
          ();
          ();
          @73 := @101;
          @70 := @149;
          @71 := (*,size_t) 11size_t @70;
          ();
          @72 := (+,size_t) @71 3size_t;
          ();
          @23 := @151;
          @22 := &((@23: uint8_t*)[@72]);
          (@22: uint8_t*)[0uint32_t] := @73;
          ();
          ();
          @69 := @100;
          @66 := @149;
          @67 := (*,size_t) 11size_t @66;
          ();
          @68 := (+,size_t) @67 4size_t;
          ();
          @25 := @151;
          @24 := &((@25: uint8_t*)[@68]);
          (@24: uint8_t*)[0uint32_t] := @69;
          ();
          ();
          @65 := @99;
          @62 := @149;
          @63 := (*,size_t) 11size_t @62;
          ();
          @64 := (+,size_t) @63 5size_t;
          ();
          @27 := @151;
          @26 := &((@27: uint8_t*)[@64]);
          (@26: uint8_t*)[0uint32_t] := @65;
          ();
          ();
          @61 := @98;
          @58 := @149;
          @59 := (*,size_t) 11size_t @58;
          ();
          @60 := (+,size_t) @59 6size_t;
          ();
          @29 := @151;
          @28 := &((@29: uint8_t*)[@60]);
          (@28: uint8_t*)[0uint32_t] := @61;
          ();
          ();
          @57 := @97;
          @54 := @149;
          @55 := (*,size_t) 11size_t @54;
          ();
          @56 := (+,size_t) @55 7size_t;
          ();
          @31 := @151;
          @30 := &((@31: uint8_t*)[@56]);
          (@30: uint8_t*)[0uint32_t] := @57;
          ();
          ();
          @53 := @96;
          @50 := @149;
          @51 := (*,size_t) 11size_t @50;
          ();
          @52 := (+,size_t) @51 8size_t;
          ();
          @33 := @151;
          @32 := &((@33: uint8_t*)[@52]);
          (@32: uint8_t*)[0uint32_t] := @53;
          ();
          ();
          @49 := @95;
          @46 := @149;
          @47 := (*,size_t) 11size_t @46;
          ();
          @48 := (+,size_t) @47 9size_t;
          ();
          @35 := @151;
          @34 := &((@35: uint8_t*)[@48]);
          (@34: uint8_t*)[0uint32_t] := @49;
          ();
          ();
          @45 := @94;
          @42 := @149;
          @43 := (*,size_t) 11size_t @42;
          ();
          @44 := (+,size_t) @43 10size_t;
          ();
          @37 := @151;
          @36 := &((@37: uint8_t*)[@44]);
          (@36: uint8_t*)[0uint32_t] := @45;
          ();
          ();
          @40 := ();
          @137 := @40;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @149 := (+,size_t) @149 1size_t;
          @39 := ();
          @142 := @39;
          ();
          ();
          ();
          ();
          @38 := ();
          @143 := @38;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @41 := ();
    @150 := @41;
    blitbuf @151 0size_t @152 0size_t @154;
    return @152
  }

  function
  libcrux_kyber_serialize_compress_then_serialize_ring_element_u
  <cg: 2><0>(
    mutable
    COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    OUT_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____1857(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____1858(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____1859(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1860(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    @2 := (@6<: uint32_t);
    switch @2
    {
      case 10uint32_t:
        @1 := @4;
        @3 := libcrux_kyber.serialize.compress_then_serialize_10 😱 [[@5]] @1;
        ()
      case 11uint32_t:
        @0 := @4;
        @3 := libcrux_kyber.serialize.compress_then_serialize_11 😱 [[@5]] @0;
        ()
      case _:
        $abort<??> (panic!)
    };
    return @3
  }

  function
  libcrux_kyber_ind_cpa_compress_then_serialize_u
  <cg: 4><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    OUT_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    BLOCK_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[3]
  ):
  uint8_t[2]
  {
    let
    mutable
    uu____1861(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[2]
    = $any
    in
    let
    mutable
    out(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[2]
    = $any
    in
    let
    mutable
    uu____1863(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1865(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1866(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1867(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1868(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1870(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1871(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1872(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1873(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1874(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____1876(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1877(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1878(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1879(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1880(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1881(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1882(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1883(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1884(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1885(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1886(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1887(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1888(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1889(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____1890(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1891(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____1892(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____1893(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1894(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1895(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1896(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1897(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    @35 := Eurydice.array_repeat < uint8_t > [[@40]] 0uint8_t;
    @33 := 0size_t;
    @29 := @37;
    @30 :=
      Eurydice.array_to_slice < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@41]] @29;
    @31 :=
      core.slice.{@Slice<T>}.iter
        < libcrux_kyber_arithmetic_PolynomialRingElement > □ @30;
    @32 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_Iter libcrux_kyber_arithmetic_PolynomialRingElement >
        □ @31;
    @28 := @32;
    while<()>
    (true)
    {
      @23 := &(@28);
      @24 :=
        &(
          (@23:
          core_slice_iter_Iter
          libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
        );
      @25 :=
        core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next
          < libcrux_kyber_arithmetic_PolynomialRingElement > □ @24;
      ();
      ();
      match @25 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @22 :=
            UNCHECKED match @25 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

              libcrux_kyber_arithmetic_PolynomialRingElement*.
            Some (@0) ->
             @0;
          @17 := @35;
          @14 := @33;
          @13 := (/,size_t) @40 @41;
          @15 := (*,size_t) @14 @13;
          ();
          ();
          @10 := @33;
          @11 := (+,size_t) @10 1size_t;
          ();
          @9 := (/,size_t) @40 @41;
          @12 := (*,size_t) @11 @9;
          ();
          ();
          @16 := { start = @15; end = @12; }: core_ops_range_Range size_t;
          ();
          ();
          @18 :=
            Eurydice.array_to_subslice
              < uint8_t >
              < core_ops_range_Range size_t > [[@40]] @17 @16;
          @19 := @18;
          ();
          ();
          @4 :=
            (@22:
            libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t];
          @5 :=
            libcrux_kyber.serialize.compress_then_serialize_ring_element_u 😱
              [[@39]]
              [[@38]] @4;
          ();
          @6 := @5;
          @7 := @6;
          @8 := Eurydice.array_to_slice < uint8_t > [[@38]] @7;
          ();
          @20 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @19 @8;
          ();
          ();
          ();
          ();
          ();
          ();
          @2 := ();
          @21 := @2;
          ();
          @33 := (+,size_t) @33 1size_t;
          @1 := ();
          @26 := @1;
          ();
          ();
          ();
          ();
          @0 := ();
          @27 := @0;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @3 := ();
    @34 := @3;
    blitbuf @35 0size_t @36 0size_t @40;
    return @36
  }

  function
  libcrux_kyber_ntt_invert_ntt_at_layer
  <cg: 0><0>(
    mutable
    zeta_i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement,
    mutable
    layer(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____1898(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    step(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1900(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1901(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1902(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1903(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1904(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1905(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1907(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1908(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1909(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____1910(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____1911(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    round(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    offset(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1914(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1915(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1916(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1917(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1918(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1919(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1920(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1921(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1922(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____1924(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1925(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____1926(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____1927(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    a_minus_b(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1930(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1931(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1932(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1933(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1934(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1935(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1936(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1937(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1938(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1939(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1940(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1941(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1942(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1943(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1944(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1945(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1946(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____1947(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    let
    mutable
    uu____1948(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1949(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1950(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1951(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1952(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1953(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1954(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1955(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t[128size_t]
    = $any
    in
    let
    mutable
    uu____1956(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1957(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____1958(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1959(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1960(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1961(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1962(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1963(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1964(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1965(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1966(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1967(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1968(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1969(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1970(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____1971(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @71 := @74;
    @72 := (<<,size_t) 1size_t (@71<: uint32_t);
    @66 := @72;
    @67 := (/,size_t) 128size_t @66;
    @68 := { start = 0size_t; end = @67; }: core_ops_range_Range size_t;
    @69 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @68;
    @65 := @69;
    while<()>
    (true)
    {
      @60 := &(@65);
      @61 := &((@60: core_ops_range_Range size_t*)[0uint32_t]);
      @62 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @61;
      ();
      ();
      match @62 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @59 :=
            UNCHECKED match @62 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          (@76: size_t*)[0uint32_t] :=
            (-,size_t) (@76: size_t*)[0uint32_t] 1size_t;
          @56 := @59;
          @55 := @72;
          @57 := (*,size_t) @56 @55;
          ();
          ();
          @58 := (*,size_t) @57 2size_t;
          ();
          ();
          @52 := @58;
          @50 := @58;
          @49 := @72;
          @51 := (+,size_t) @50 @49;
          ();
          ();
          @53 := { start = @52; end = @51; }: core_ops_range_Range size_t;
          ();
          ();
          @54 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range size_t > □ @53;
          ();
          ();
          @48 := @54;
          while<()>
          (true)
          {
            @44 := &(@48);
            @45 := &((@44: core_ops_range_Range size_t*)[0uint32_t]);
            @46 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □
                @45;
            ();
            ();
            match @46 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @43 :=
                  UNCHECKED match @46 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  size_t.
                  Some (@0) ->
                   @0;
                @39 := @43;
                @38 := @72;
                @40 := (+,size_t) @39 @38;
                ();
                ();
                @1 := (@75).coefficients;
                @0 := &((@1: int32_t*)[@40]);
                @41 := (@0: int32_t*)[0uint32_t];
                @36 := @43;
                @3 := (@75).coefficients;
                @2 := &((@3: int32_t*)[@36]);
                @37 := (@2: int32_t*)[0uint32_t];
                @42 := (-,int32_t) @41 @37;
                ();
                ();
                ();
                ();
                ();
                @34 := @43;
                @5 := (@75).coefficients;
                @4 := &((@5: int32_t*)[@34]);
                @35 := (@4: int32_t*)[0uint32_t];
                @31 := @43;
                @30 := @72;
                @32 := (+,size_t) @31 @30;
                ();
                ();
                @7 := (@75).coefficients;
                @6 := &((@7: int32_t*)[@32]);
                @33 := (@6: int32_t*)[0uint32_t];
                @29 := @43;
                @9 := (@75).coefficients;
                @8 := &((@9: int32_t*)[@29]);
                (@8: int32_t*)[0uint32_t] := (+,int32_t) @35 @33;
                ();
                ();
                ();
                ();
                ();
                @26 := @42;
                @16 := libcrux_kyber.ntt.ZETAS_TIMES_MONTGOMERY_R;
                @24 := @16;
                @23 := (@76: size_t*)[0uint32_t];
                @11 := @24;
                @10 := &((@11: int32_t*)[@23]);
                @25 := (@10: int32_t*)[0uint32_t];
                @27 := (*,int32_t) @26 @25;
                ();
                ();
                @28 := libcrux_kyber.arithmetic.montgomery_reduce @27;
                ();
                @21 := @43;
                @20 := @72;
                @22 := (+,size_t) @21 @20;
                ();
                ();
                @13 := (@75).coefficients;
                @12 := &((@13: int32_t*)[@22]);
                (@12: int32_t*)[0uint32_t] := @28;
                ();
                ();
                ();
                ();
                @15 := ();
                @47 := @15;
                ();
                ();
                ();
                ();
                ();
                @14 := ();
                @64 := @14;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @18 := ();
          @63 := @18;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @17 := ();
          @64 := @17;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @19 := ();
    @70 := @19;
    @73 := @75;
    return @73
  }

  function
  libcrux_kyber_ntt_invert_ntt_montgomery
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____1972(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    zeta_i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____1974(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1975(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1976(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1977(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1978(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1979(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1980(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1981(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1982(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1983(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1984(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1985(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1986(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1987(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1988(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1989(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1990(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1991(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1992(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1993(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1994(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1995(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1996(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____1997(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1998(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____1999(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2000(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2001(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2002(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2003(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2004(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2006(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2007(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2008(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____2009(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____2010(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2012(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2013(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2014(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2015(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2016(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2017(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2018(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2019(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2020(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2021(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2022(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2023(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @7 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @50 := (/,size_t) @7 2size_t;
    @47 := &(@50);
    @48 := &((@47: size_t*)[0uint32_t]);
    @46 := @52;
    @49 := libcrux_kyber.ntt.invert_ntt_at_layer @48 @46 1size_t;
    @52 := @49;
    @43 := &(@50);
    @44 := &((@43: size_t*)[0uint32_t]);
    @42 := @52;
    @45 := libcrux_kyber.ntt.invert_ntt_at_layer @44 @42 2size_t;
    @52 := @45;
    @39 := &(@50);
    @40 := &((@39: size_t*)[0uint32_t]);
    @38 := @52;
    @41 := libcrux_kyber.ntt.invert_ntt_at_layer @40 @38 3size_t;
    @52 := @41;
    @35 := &(@50);
    @36 := &((@35: size_t*)[0uint32_t]);
    @34 := @52;
    @37 := libcrux_kyber.ntt.invert_ntt_at_layer @36 @34 4size_t;
    @52 := @37;
    @31 := &(@50);
    @32 := &((@31: size_t*)[0uint32_t]);
    @30 := @52;
    @33 := libcrux_kyber.ntt.invert_ntt_at_layer @32 @30 5size_t;
    @52 := @33;
    @27 := &(@50);
    @28 := &((@27: size_t*)[0uint32_t]);
    @26 := @52;
    @29 := libcrux_kyber.ntt.invert_ntt_at_layer @28 @26 6size_t;
    @52 := @29;
    @23 := &(@50);
    @24 := &((@23: size_t*)[0uint32_t]);
    @22 := @52;
    @25 := libcrux_kyber.ntt.invert_ntt_at_layer @24 @22 7size_t;
    @52 := @25;
    @19 := { start = 0size_t; end = 8size_t; }: core_ops_range_Range size_t;
    @20 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @19;
    @18 := @20;
    while<()>
    (true)
    {
      @13 := &(@18);
      @14 := &((@13: core_ops_range_Range size_t*)[0uint32_t]);
      @15 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @14;
      ();
      ();
      match @15 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @12 :=
            UNCHECKED match @15 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @9 := @12;
          @1 := (@52).coefficients;
          @0 := &((@1: int32_t*)[@9]);
          @10 := (@0: int32_t*)[0uint32_t];
          @11 := libcrux_kyber.arithmetic.barrett_reduce @10;
          ();
          @8 := @12;
          @3 := (@52).coefficients;
          @2 := &((@3: int32_t*)[@8]);
          (@2: int32_t*)[0uint32_t] := @11;
          ();
          ();
          ();
          @5 := ();
          @16 := @5;
          ();
          ();
          ();
          ();
          @4 := ();
          @17 := @4;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @6 := ();
    @21 := @6;
    @51 := @52;
    return @51
  }

  function
  libcrux_kyber_matrix_compute_vector_u
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    a_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[0]*,
    mutable
    r_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*,
    mutable
    error_1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement[0]
  {
    let
    mutable
    uu____2024(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    result(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____2026(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2028(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____2029(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____2030(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____2031(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[0]*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____2033(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2034(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2035(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2036(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]*
    = $any
    in
    let
    mutable
    uu____2037(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement[0]*
    = $any
    in
    let
    mutable
    row(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2039(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2040(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2042(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2043(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2044(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2045(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2047(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2048(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2049(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2050(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    a_element(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2052(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    product(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2054(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2055(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2056(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2057(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2058(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2059(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2060(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2061(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2062(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2063(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2064(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2065(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2066(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2067(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2068(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2069(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2071(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2072(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____2073(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____2074(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient_normal_form(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t
    = $any
    in
    let
    mutable
    uu____2077(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2078(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2079(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2080(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2081(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2082(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2083(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2084(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2085(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2086(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2087(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2088(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2089(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2090(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2091(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2092(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2093(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2094(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2095(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2096(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2097(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2098(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2099(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2100(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2101(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2102(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2103(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2104(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2105(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2106(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2107(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2108(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2109(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2110(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2111(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2112(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2113(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2114(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2115(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2116(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2117(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2118(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2119(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2120(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2121(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2122(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    @33 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @97 :=
      Eurydice.array_repeat < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@102]] @33;
    @95 := 0size_t;
    @91 := @101;
    @92 :=
      Eurydice.array_to_slice
        < libcrux_kyber_arithmetic_PolynomialRingElement[0] > [[@102]] @91;
    @93 :=
      core.slice.{@Slice<T>}.iter
        < libcrux_kyber_arithmetic_PolynomialRingElement[0] > □ @92;
    @94 :=
      core.iter.traits.collect.{I}.into_iter
        <
        core_slice_iter_Iter
        libcrux_kyber_arithmetic_PolynomialRingElement[0]
        > □ @93;
    @90 := @94;
    while<()>
    (true)
    {
      @85 := &(@90);
      @86 :=
        &(
          (@85:
          core_slice_iter_Iter
          libcrux_kyber_arithmetic_PolynomialRingElement[0]*)[0uint32_t]
        );
      @87 :=
        core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next
          < libcrux_kyber_arithmetic_PolynomialRingElement[0] > □ @86;
      ();
      ();
      match @87 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @84 :=
            UNCHECKED match @87 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

              libcrux_kyber_arithmetic_PolynomialRingElement*.
            Some (@0) ->
             @0;
          @81 := 0size_t;
          ();
          @77 := @84;
          @78 :=
            Eurydice.array_to_slice
              < libcrux_kyber_arithmetic_PolynomialRingElement > [[@102]] @77;
          ();
          @79 :=
            core.slice.{@Slice<T>}.iter
              < libcrux_kyber_arithmetic_PolynomialRingElement > □ @78;
          ();
          @80 :=
            core.iter.traits.collect.{I}.into_iter
              <
              core_slice_iter_Iter
              libcrux_kyber_arithmetic_PolynomialRingElement
              > □ @79;
          ();
          ();
          @76 := @80;
          while<()>
          (true)
          {
            @72 := &(@76);
            @73 :=
              &(
                (@72:
                core_slice_iter_Iter
                libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
              );
            @74 :=
              core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next
                < libcrux_kyber_arithmetic_PolynomialRingElement > □ @73;
            ();
            ();
            match @74 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @71 :=
                  UNCHECKED match @74 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

                    libcrux_kyber_arithmetic_PolynomialRingElement*.
                  Some (@0) ->
                   @0;
                @68 :=
                  &(
                    (@71:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  );
                @65 := @81;
                @1 := @100;
                @0 :=
                  &((@1: libcrux_kyber_arithmetic_PolynomialRingElement*)[@65]);
                @66 :=
                  &(
                    (@0:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  );
                @67 :=
                  &(
                    (@66:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  );
                @69 := libcrux_kyber.ntt.ntt_multiply @68 @67;
                ();
                ();
                ();
                ();
                ();
                @62 := @95;
                @3 := @97;
                @2 :=
                  &((@3: libcrux_kyber_arithmetic_PolynomialRingElement*)[@62]);
                @63 :=
                  (@2:
                  libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t];
                @60 := &(@69);
                @61 :=
                  &(
                    (@60:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  );
                @64 :=
                  libcrux_kyber.arithmetic.add_to_ring_element 😱 [[@102]]
                    @63
                    @61;
                ();
                ();
                @59 := @95;
                @5 := @97;
                @4 :=
                  &((@5: libcrux_kyber_arithmetic_PolynomialRingElement*)[@59]);
                (@4:
                libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                := @64;
                ();
                ();
                ();
                ();
                @30 := ();
                @70 := @30;
                ();
                ();
                @81 := (+,size_t) @81 1size_t;
                @29 := ();
                @75 := @29;
                ();
                ();
                ();
                ();
                @27 := ();
                @89 := @27;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @31 := ();
          @82 := @31;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @56 := @95;
          @7 := @97;
          @6 := &((@7: libcrux_kyber_arithmetic_PolynomialRingElement*)[@56]);
          @57 :=
            (@6:
            libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t];
          @58 := libcrux_kyber.ntt.invert_ntt_montgomery 😱 [[@102]] @57;
          ();
          @55 := @95;
          @9 := @97;
          @8 := &((@9: libcrux_kyber_arithmetic_PolynomialRingElement*)[@55]);
          (@8: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t] :=
            @58;
          ();
          ();
          ();
          @28 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
          @53 := { start = 0size_t; end = @28; }: core_ops_range_Range size_t;
          @54 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range size_t > □ @53;
          ();
          ();
          @52 := @54;
          while<()>
          (true)
          {
            @48 := &(@52);
            @49 := &((@48: core_ops_range_Range size_t*)[0uint32_t]);
            @50 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □
                @49;
            ();
            ();
            match @50 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @47 :=
                  UNCHECKED match @50 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  size_t.
                  Some (@0) ->
                   @0;
                @43 := @95;
                @42 := @47;
                @13 := @97;
                @12 :=
                  &((@13: libcrux_kyber_arithmetic_PolynomialRingElement*)[@43]);
                @11 :=
                  (
                    (@12:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  ).coefficients;
                @10 := &((@11: int32_t*)[@42]);
                @44 := (@10: int32_t*)[0uint32_t];
                @45 := (*,int32_t) @44 1441int32_t;
                ();
                @46 := libcrux_kyber.arithmetic.montgomery_reduce @45;
                ();
                ();
                ();
                ();
                @39 := @46;
                @37 := @95;
                @36 := @47;
                @17 := @99;
                @16 :=
                  &((@17: libcrux_kyber_arithmetic_PolynomialRingElement*)[@37]);
                @15 :=
                  (
                    (@16:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  ).coefficients;
                @14 := &((@15: int32_t*)[@36]);
                @38 := (@14: int32_t*)[0uint32_t];
                @40 := (+,int32_t) @39 @38;
                ();
                ();
                @41 := libcrux_kyber.arithmetic.barrett_reduce @40;
                ();
                @35 := @95;
                @34 := @47;
                @21 := @97;
                @20 :=
                  &((@21: libcrux_kyber_arithmetic_PolynomialRingElement*)[@35]);
                @19 :=
                  (
                    (@20:
                    libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]
                  ).coefficients;
                @18 := &((@19: int32_t*)[@34]);
                (@18: int32_t*)[0uint32_t] := @41;
                ();
                ();
                ();
                ();
                ();
                @23 := ();
                @51 := @23;
                ();
                ();
                ();
                ();
                ();
                @22 := ();
                @89 := @22;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @26 := ();
          @83 := @26;
          ();
          ();
          ();
          ();
          ();
          ();
          @95 := (+,size_t) @95 1size_t;
          @25 := ();
          @88 := @25;
          ();
          ();
          ();
          ();
          @24 := ();
          @89 := @24;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @32 := ();
    @96 := @32;
    blitbuf @97 0size_t @98 0size_t @102;
    return @98
  }

  function
  libcrux_kyber_serialize_deserialize_then_decompress_message
  <cg: 0><0>(
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____2123(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2125(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2127(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      uint8_t
    = $any
    in
    let
    mutable
    uu____2128(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      uint8_t
    = $any
    in
    let
    mutable
    uu____2129(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2130(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      uint8_t
    = $any
    in
    let
    mutable
    uu____2132(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2133(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2134(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      uint8_t*
    = $any
    in
    let
    mutable
    uu____2135(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      uint8_t*
    = $any
    in
    let
    mutable
    uu____2136(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      uint8_t*
    = $any
    in
    let
    mutable
    byte(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2138(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2139(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2140(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2142(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2143(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____2144(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____2145(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient_compressed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t
    = $any
    in
    let
    mutable
    uu____2148(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2149(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2150(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2151(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2152(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2153(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2154(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2155(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2156(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2157(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2158(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2159(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2160(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2161(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2162(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2163(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2164(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2165(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2166(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @8 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @42 := @8;
    @40 := 0size_t;
    @36 := @44;
    @37 := Eurydice.array_to_slice < uint8_t > [[32size_t]] @36;
    @38 := core.slice.{@Slice<T>}.iter < uint8_t > □ @37;
    @39 :=
      core.iter.traits.collect.{I}.into_iter < core_slice_iter_Iter uint8_t > □
        @38;
    @35 := @39;
    while<()>
    (true)
    {
      @30 := &(@35);
      @31 := &((@30: core_slice_iter_Iter uint8_t*)[0uint32_t]);
      @32 :=
        core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next < uint8_t >
          □ @31;
      ();
      ();
      match @32 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @29 :=
            UNCHECKED match @32 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*.
            Some (@0) ->
             @0;
          @26 :=
            { start = 0size_t; end = 8size_t; }:
            core_ops_range_Range size_t;
          @27 :=
            core.iter.traits.collect.{I}.into_iter
              < core_ops_range_Range size_t > □ @26;
          ();
          ();
          @25 := @27;
          while<()>
          (true)
          {
            @21 := &(@25);
            @22 := &((@21: core_ops_range_Range size_t*)[0uint32_t]);
            @23 :=
              core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □
                @22;
            ();
            ();
            match @23 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @20 :=
                  UNCHECKED match @23 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
                  size_t.
                  Some (@0) ->
                   @0;
                @16 := (@29: uint8_t*)[0uint32_t];
                @15 := @20;
                @17 := (>>,uint8_t) @16 (@15<: uint32_t);
                ();
                ();
                @18 := (&,uint8_t) @17 1uint8_t;
                ();
                @19 := (@18<: int32_t);
                ();
                ();
                @13 := @19;
                @14 := libcrux_kyber.compress.decompress_message_coefficient @13;
                ();
                @10 := @40;
                @11 := (*,size_t) 8size_t @10;
                ();
                @9 := @20;
                @12 := (+,size_t) @11 @9;
                ();
                ();
                @1 := (@42).coefficients;
                @0 := &((@1: int32_t*)[@12]);
                (@0: int32_t*)[0uint32_t] := @14;
                ();
                ();
                @5 := ();
                @24 := @5;
                ();
                ();
                ();
                ();
                ();
                @3 := ();
                @34 := @3;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @6 := ();
          @28 := @6;
          ();
          ();
          ();
          ();
          ();
          ();
          @40 := (+,size_t) @40 1size_t;
          @4 := ();
          @33 := @4;
          ();
          ();
          ();
          ();
          @2 := ();
          @34 := @2;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @7 := ();
    @41 := @7;
    @43 := @42;
    return @43
  }

  function
  libcrux_kyber_matrix_compute_ring_element_v
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    t_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*,
    mutable
    r_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*,
    mutable
    error_2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*,
    mutable
    message(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____2167(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    result(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2169(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2170(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2171(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2173(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2174(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2175(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____2176(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____2177(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    product(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2180(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2181(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2182(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2183(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2184(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2185(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2186(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2187(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2188(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2189(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2190(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2191(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2192(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2193(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2194(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2196(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2197(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____2198(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____2199(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient_normal_form(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t
    = $any
    in
    let
    mutable
    uu____2202(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2203(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2204(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2205(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2206(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2207(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2208(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2209(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2210(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2211(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2212(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2213(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2214(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2215(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2216(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2217(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2218(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2219(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2220(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2221(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2222(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2223(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2224(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2225(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2226(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2227(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2228(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2229(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2230(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2231(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2232(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2233(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    @19 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @65 := @19;
    @62 := { start = 0size_t; end = @71; }: core_ops_range_Range size_t;
    @63 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @62;
    @61 := @63;
    while<()>
    (true)
    {
      @56 := &(@61);
      @57 := &((@56: core_ops_range_Range size_t*)[0uint32_t]);
      @58 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @57;
      ();
      ();
      match @58 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @55 :=
            UNCHECKED match @58 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @51 := @55;
          @1 := @70;
          @0 := &((@1: libcrux_kyber_arithmetic_PolynomialRingElement*)[@51]);
          @52 :=
            &((@0: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @53 :=
            &((@52: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @48 := @55;
          @3 := @69;
          @2 := &((@3: libcrux_kyber_arithmetic_PolynomialRingElement*)[@48]);
          @49 :=
            &((@2: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @50 :=
            &((@49: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @54 := libcrux_kyber.ntt.ntt_multiply @53 @50;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @46 := @65;
          @44 := &(@54);
          @45 :=
            &((@44: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @47 := libcrux_kyber.arithmetic.add_to_ring_element 😱 [[@71]] @46 @45;
          ();
          ();
          @65 := @47;
          ();
          ();
          @16 := ();
          @59 := @16;
          ();
          ();
          ();
          ();
          ();
          @15 := ();
          @60 := @15;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @18 := ();
    @64 := @18;
    @42 := @65;
    @43 := libcrux_kyber.ntt.invert_ntt_montgomery 😱 [[@71]] @42;
    @65 := @43;
    @17 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @39 := { start = 0size_t; end = @17; }: core_ops_range_Range size_t;
    @40 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @39;
    @38 := @40;
    while<()>
    (true)
    {
      @34 := &(@38);
      @35 := &((@34: core_ops_range_Range size_t*)[0uint32_t]);
      @36 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @35;
      ();
      ();
      match @36 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @33 :=
            UNCHECKED match @36 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @29 := @33;
          @5 := (@65).coefficients;
          @4 := &((@5: int32_t*)[@29]);
          @30 := (@4: int32_t*)[0uint32_t];
          @31 := (*,int32_t) @30 1441int32_t;
          ();
          @32 := libcrux_kyber.arithmetic.montgomery_reduce @31;
          ();
          ();
          ();
          @25 := @32;
          @23 := @33;
          @7 :=
            ((@68: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @6 := &((@7: int32_t*)[@23]);
          @24 := (@6: int32_t*)[0uint32_t];
          @26 := (+,int32_t) @25 @24;
          ();
          ();
          @21 := @33;
          @9 :=
            ((@67: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @8 := &((@9: int32_t*)[@21]);
          @22 := (@8: int32_t*)[0uint32_t];
          @27 := (+,int32_t) @26 @22;
          ();
          ();
          @28 := libcrux_kyber.arithmetic.barrett_reduce @27;
          ();
          @20 := @33;
          @11 := (@65).coefficients;
          @10 := &((@11: int32_t*)[@20]);
          (@10: int32_t*)[0uint32_t] := @28;
          ();
          ();
          ();
          ();
          @13 := ();
          @37 := @13;
          ();
          ();
          ();
          ();
          ();
          @12 := ();
          @60 := @12;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @14 := ();
    @41 := @14;
    @66 := @65;
    return @66
  }

  function
  libcrux_kyber_serialize_compress_then_serialize_4
  <cg: 1><0>(
    mutable
    OUT_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____2234(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____2236(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2238(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____2239(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____2240(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2241(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____2243(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2244(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2245(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2246(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    uu____2247(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    coefficients(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2249(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2251(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2252(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2253(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2254(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2256(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2257(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2258(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2259(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2260(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2261(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2262(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2263(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2264(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2265(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2266(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2267(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2268(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2269(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2270(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2271(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2272(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2273(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @38 := Eurydice.array_repeat < uint8_t > [[@41]] 0uint8_t;
    @36 := 0size_t;
    @32 := (@40).coefficients;
    @33 := Eurydice.array_to_slice < int32_t > [[256size_t]] @32;
    @34 := core.slice.{@Slice<T>}.chunks_exact < int32_t > □ @33 2size_t;
    @35 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact int32_t > □ @34;
    @31 := @35;
    while<()>
    (true)
    {
      @26 := &(@31);
      @27 := &((@26: core_slice_iter_ChunksExact int32_t*)[0uint32_t]);
      @28 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < int32_t > □ @27;
      ();
      ();
      match @28 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @25 :=
            UNCHECKED match @28 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              int32_t.
            Some (@0) ->
             @0;
          @19 := 0size_t;
          @1 := @25;
          @0 := &(Eurydice.slice_index < int32_t > □ @1 @19);
          @20 := (@0: int32_t*)[0uint32_t];
          @21 := libcrux_kyber.arithmetic.to_unsigned_representative @20;
          ();
          @22 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 4uint8_t @21;
          ();
          @23 := (@22<: uint8_t);
          ();
          ();
          ();
          @14 := 1size_t;
          @3 := @25;
          @2 := &(Eurydice.slice_index < int32_t > □ @3 @14);
          @15 := (@2: int32_t*)[0uint32_t];
          @16 := libcrux_kyber.arithmetic.to_unsigned_representative @15;
          ();
          @17 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 4uint8_t @16;
          ();
          @18 := (@17<: uint8_t);
          ();
          ();
          ();
          @12 := @18;
          @13 := (<<,uint8_t) @12 4uint32_t;
          ();
          @11 := @23;
          @10 := @36;
          @5 := @38;
          @4 := &((@5: uint8_t*)[@10]);
          (@4: uint8_t*)[0uint32_t] := (|,uint8_t) @13 @11;
          ();
          ();
          ();
          @8 := ();
          @24 := @8;
          ();
          ();
          ();
          @36 := (+,size_t) @36 1size_t;
          @7 := ();
          @29 := @7;
          ();
          ();
          ();
          ();
          @6 := ();
          @30 := @6;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @9 := ();
    @37 := @9;
    blitbuf @38 0size_t @39 0size_t @41;
    return @39
  }

  function
  libcrux_kyber_serialize_compress_coefficients_5
  <cg: 0><0>(
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t,
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t,
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t,
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t,
    mutable
    coefficient5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t,
    mutable
    coefficient7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t,
    mutable
    coefficient6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t,
    mutable
    coefficient8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
  ):
  uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
  {
    let
    mutable
    uu____2274(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
    = $any
    in
    let
    mutable
    coef1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2276(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2277(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2278(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2279(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2281(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2282(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2283(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2284(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2285(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2286(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2287(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2288(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2290(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2291(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2292(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2293(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2294(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2296(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2297(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2298(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2299(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2300(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2301(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2302(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2303(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2305(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2306(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2307(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2308(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2309(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2310(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2311(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2312(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2313(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    @35 := @47;
    @36 := (&,uint8_t) @35 7uint8_t;
    @37 := (<<,uint8_t) @36 5uint32_t;
    @34 := @46;
    @38 := (|,uint8_t) @37 @34;
    @29 := @45;
    @30 := (&,uint8_t) @29 1uint8_t;
    @31 := (<<,uint8_t) @30 7uint32_t;
    @27 := @44;
    @28 := (<<,uint8_t) @27 2uint32_t;
    @32 := (|,uint8_t) @31 @28;
    @25 := @47;
    @26 := (>>,uint8_t) @25 3uint32_t;
    @33 := (|,uint8_t) @32 @26;
    @21 := @43;
    @22 := (&,uint8_t) @21 15uint8_t;
    @23 := (<<,uint8_t) @22 4uint32_t;
    @19 := @45;
    @20 := (>>,uint8_t) @19 1uint32_t;
    @24 := (|,uint8_t) @23 @20;
    @14 := @42;
    @15 := (&,uint8_t) @14 3uint8_t;
    @16 := (<<,uint8_t) @15 6uint32_t;
    @12 := @41;
    @13 := (<<,uint8_t) @12 1uint32_t;
    @17 := (|,uint8_t) @16 @13;
    @10 := @43;
    @11 := (>>,uint8_t) @10 4uint32_t;
    @18 := (|,uint8_t) @17 @11;
    @7 := @40;
    @8 := (<<,uint8_t) @7 3uint32_t;
    @5 := @42;
    @6 := (>>,uint8_t) @5 2uint32_t;
    @9 := (|,uint8_t) @8 @6;
    @4 := @38;
    @3 := @33;
    @2 := @24;
    @1 := @18;
    @0 := @9;
    @39 := (@4, @3, @2, @1, @0);
    return @39
  }

  function
  libcrux_kyber_serialize_compress_then_serialize_5
  <cg: 1><0>(
    mutable
    OUT_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____2314(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____2316(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2318(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____2319(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____2320(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2321(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____2323(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2324(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2325(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2326(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    uu____2327(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    coefficients(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2329(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2331(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2332(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2333(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2334(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2336(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2337(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2338(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2339(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2341(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2342(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2343(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2344(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2346(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2347(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2348(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2349(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2351(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2352(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2353(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2354(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2356(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2357(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2358(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2359(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2361(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2362(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2363(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2364(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2366(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2367(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____2368(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2369(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coef1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    coef5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2375(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t * uint8_t * uint8_t * uint8_t * uint8_t
    = $any
    in
    let
    mutable
    uu____2376(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2377(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2378(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2379(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2380(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2381(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2382(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2383(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2384(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2385(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2386(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2387(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2388(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2389(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2390(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2391(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2392(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2393(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2394(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2395(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2396(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2397(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2398(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2399(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2400(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2401(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2402(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2403(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2404(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2405(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2406(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2407(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2408(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2409(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2410(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2411(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2412(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2413(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2414(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2415(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2416(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2417(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2418(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2419(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2420(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2421(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2422(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2423(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2424(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2425(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2426(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2427(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2428(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2429(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2430(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2431(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____2432(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @117 := Eurydice.array_repeat < uint8_t > [[@120]] 0uint8_t;
    @115 := 0size_t;
    @111 := (@119).coefficients;
    @112 := Eurydice.array_to_slice < int32_t > [[256size_t]] @111;
    @113 := core.slice.{@Slice<T>}.chunks_exact < int32_t > □ @112 8size_t;
    @114 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact int32_t > □ @113;
    @110 := @114;
    while<()>
    (true)
    {
      @105 := &(@110);
      @106 := &((@105: core_slice_iter_ChunksExact int32_t*)[0uint32_t]);
      @107 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < int32_t > □ @106;
      ();
      ();
      match @107 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @104 :=
            UNCHECKED match @107 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              int32_t.
            Some (@0) ->
             @0;
          @98 := 0size_t;
          @1 := @104;
          @0 := &(Eurydice.slice_index < int32_t > □ @1 @98);
          @99 := (@0: int32_t*)[0uint32_t];
          @100 := libcrux_kyber.arithmetic.to_unsigned_representative @99;
          ();
          @101 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 5uint8_t @100;
          ();
          @102 := (@101<: uint8_t);
          ();
          ();
          ();
          @93 := 1size_t;
          @3 := @104;
          @2 := &(Eurydice.slice_index < int32_t > □ @3 @93);
          @94 := (@2: int32_t*)[0uint32_t];
          @95 := libcrux_kyber.arithmetic.to_unsigned_representative @94;
          ();
          @96 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 5uint8_t @95;
          ();
          @97 := (@96<: uint8_t);
          ();
          ();
          ();
          @88 := 2size_t;
          @5 := @104;
          @4 := &(Eurydice.slice_index < int32_t > □ @5 @88);
          @89 := (@4: int32_t*)[0uint32_t];
          @90 := libcrux_kyber.arithmetic.to_unsigned_representative @89;
          ();
          @91 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 5uint8_t @90;
          ();
          @92 := (@91<: uint8_t);
          ();
          ();
          ();
          @83 := 3size_t;
          @7 := @104;
          @6 := &(Eurydice.slice_index < int32_t > □ @7 @83);
          @84 := (@6: int32_t*)[0uint32_t];
          @85 := libcrux_kyber.arithmetic.to_unsigned_representative @84;
          ();
          @86 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 5uint8_t @85;
          ();
          @87 := (@86<: uint8_t);
          ();
          ();
          ();
          @78 := 4size_t;
          @9 := @104;
          @8 := &(Eurydice.slice_index < int32_t > □ @9 @78);
          @79 := (@8: int32_t*)[0uint32_t];
          @80 := libcrux_kyber.arithmetic.to_unsigned_representative @79;
          ();
          @81 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 5uint8_t @80;
          ();
          @82 := (@81<: uint8_t);
          ();
          ();
          ();
          @73 := 5size_t;
          @11 := @104;
          @10 := &(Eurydice.slice_index < int32_t > □ @11 @73);
          @74 := (@10: int32_t*)[0uint32_t];
          @75 := libcrux_kyber.arithmetic.to_unsigned_representative @74;
          ();
          @76 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 5uint8_t @75;
          ();
          @77 := (@76<: uint8_t);
          ();
          ();
          ();
          @68 := 6size_t;
          @13 := @104;
          @12 := &(Eurydice.slice_index < int32_t > □ @13 @68);
          @69 := (@12: int32_t*)[0uint32_t];
          @70 := libcrux_kyber.arithmetic.to_unsigned_representative @69;
          ();
          @71 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 5uint8_t @70;
          ();
          @72 := (@71<: uint8_t);
          ();
          ();
          ();
          @63 := 7size_t;
          @15 := @104;
          @14 := &(Eurydice.slice_index < int32_t > □ @15 @63);
          @64 := (@14: int32_t*)[0uint32_t];
          @65 := libcrux_kyber.arithmetic.to_unsigned_representative @64;
          ();
          @66 :=
            libcrux_kyber.compress.compress_ciphertext_coefficient 5uint8_t @65;
          ();
          @67 := (@66<: uint8_t);
          ();
          ();
          ();
          @56 := @97;
          @55 := @102;
          @54 := @87;
          @53 := @92;
          @52 := @82;
          @51 := @72;
          @50 := @77;
          @49 := @67;
          @57 :=
            libcrux_kyber.serialize.compress_coefficients_5
              @56
              @55
              @54
              @53
              @52
              @51
              @50
              @49;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @62 :=
            match @57 with
            | λ
            uu____2433(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (@0, _, _, _, _) ->
             @0;
          @61 :=
            match @57 with
            | λ
            uu____2434(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, @0, _, _, _) ->
             @0;
          @60 :=
            match @57 with
            | λ
            uu____2435(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, @0, _, _) ->
             @0;
          @59 :=
            match @57 with
            | λ
            uu____2436(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, @0, _) ->
             @0;
          @58 :=
            match @57 with
            | λ
            uu____2437(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            uint8_t.
            (_, _, _, _, @0) ->
             @0;
          ();
          @48 := @62;
          @46 := @115;
          @47 := (*,size_t) 5size_t @46;
          ();
          @17 := @117;
          @16 := &((@17: uint8_t*)[@47]);
          (@16: uint8_t*)[0uint32_t] := @48;
          ();
          ();
          @45 := @61;
          @42 := @115;
          @43 := (*,size_t) 5size_t @42;
          ();
          @44 := (+,size_t) @43 1size_t;
          ();
          @19 := @117;
          @18 := &((@19: uint8_t*)[@44]);
          (@18: uint8_t*)[0uint32_t] := @45;
          ();
          ();
          @41 := @60;
          @38 := @115;
          @39 := (*,size_t) 5size_t @38;
          ();
          @40 := (+,size_t) @39 2size_t;
          ();
          @21 := @117;
          @20 := &((@21: uint8_t*)[@40]);
          (@20: uint8_t*)[0uint32_t] := @41;
          ();
          ();
          @37 := @59;
          @34 := @115;
          @35 := (*,size_t) 5size_t @34;
          ();
          @36 := (+,size_t) @35 3size_t;
          ();
          @23 := @117;
          @22 := &((@23: uint8_t*)[@36]);
          (@22: uint8_t*)[0uint32_t] := @37;
          ();
          ();
          @33 := @58;
          @30 := @115;
          @31 := (*,size_t) 5size_t @30;
          ();
          @32 := (+,size_t) @31 4size_t;
          ();
          @25 := @117;
          @24 := &((@25: uint8_t*)[@32]);
          (@24: uint8_t*)[0uint32_t] := @33;
          ();
          ();
          @28 := ();
          @103 := @28;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @115 := (+,size_t) @115 1size_t;
          @27 := ();
          @108 := @27;
          ();
          ();
          ();
          ();
          @26 := ();
          @109 := @26;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @29 := ();
    @116 := @29;
    blitbuf @117 0size_t @118 0size_t @120;
    return @118
  }

  function
  libcrux_kyber_serialize_compress_then_serialize_ring_element_v
  <cg: 2><0>(
    mutable
    COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    OUT_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____2438(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____2439(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____2440(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2441(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    @2 := (@6<: uint32_t);
    switch @2
    {
      case 4uint32_t:
        @1 := @4;
        @3 := libcrux_kyber.serialize.compress_then_serialize_4 😱 [[@5]] @1;
        ()
      case 5uint32_t:
        @0 := @4;
        @3 := libcrux_kyber.serialize.compress_then_serialize_5 😱 [[@5]] @0;
        ()
      case _:
        $abort<??> (panic!)
    };
    return @3
  }


  external core_array_{@Array<T, N>#23}_as_slice <1>:<cg: 1>
    size_t ->

      0* ->
      Eurydice_slice
        0

  function
  libcrux_kyber_ind_cpa_encrypt
  <cg: 12><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    CIPHERTEXT_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    T_AS_NTT_ENCODED_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    C1_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    C2_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    U_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    V_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    BLOCK_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA1_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    ETA2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA2_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t,
    mutable
    message(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t],
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t[10]
  {
    let
    mutable
    uu____2442(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[10]
    = $any
    in
    let
    mutable
    t_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[11]
    = $any
    in
    let
    mutable
    uu____2444(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    seed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2446(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2447(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2448(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    let
    mutable
    A_transpose(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[11][11]
    = $any
    in
    let
    mutable
    uu____2450(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[34size_t]
    = $any
    in
    let
    mutable
    uu____2451(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    prf_input(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[33size_t]
    = $any
    in
    let
    mutable
    uu____2453(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    r_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[11]
    = $any
    in
    let
    mutable
    domain_separator(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t
    = $any
    in
    let
    mutable
    uu____2456(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[11] * uint8_t
    = $any
    in
    let
    mutable
    uu____2457(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[33size_t]
    = $any
    in
    let
    mutable
    error_1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[11]
    = $any
    in
    let
    mutable
    uu____2459(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2460(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2461(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2462(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2463(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2464(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    prf_output(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____2466(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2467(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2468(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    error_2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2470(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2471(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2472(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    u(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[11]
    = $any
    in
    let
    mutable
    uu____2474(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[11]*
    = $any
    in
    let
    mutable
    uu____2475(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement[11]*
    = $any
    in
    let
    mutable
    uu____2476(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2477(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2478(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2479(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    message_as_ring_element(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2481(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    v(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2483(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2484(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2485(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2486(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2487(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2488(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2489(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2490(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    c1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[8]
    = $any
    in
    let
    mutable
    uu____2492(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[11]
    = $any
    in
    let
    mutable
    c2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[7]
    = $any
    in
    let
    mutable
    uu____2494(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[10]
    = $any
    in
    let
    mutable
    uu____2496(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2497(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2498(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2499(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2500(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2501(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2502(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2503(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    let
    mutable
    uu____2504(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2505(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2506(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2507(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2508(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @64 := @69;
    @65 := libcrux_kyber.ind_cpa.deserialize_public_key 😱 [[@81]] [[@79]] @64;
    @61 := @69;
    @60 := { start = @79; }: core_ops_range_RangeFrom size_t;
    @62 :=
      Eurydice.slice_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > □ @61 @60;
    @63 := @62;
    @57 := @63;
    @58 := libcrux_kyber.ind_cpa.into_padded_array 😱 [[34size_t]] @57;
    @59 := libcrux_kyber.matrix.sample_matrix_A 😱 [[@81]] @58 false;
    @55 := @67;
    @56 := libcrux_kyber.ind_cpa.into_padded_array 😱 [[33size_t]] @55;
    blitbuf @56 0size_t @51 0size_t 33size_t;
    @52 :=
      libcrux_kyber.ind_cpa.sample_vector_cbd_then_ntt 😱 [[@81]] [[@73]] [[@72]]
        @51
        0uint8_t;
    blitbuf
      match @52 with
      | λ
      uu____2509(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      libcrux_kyber_arithmetic_PolynomialRingElement[11].
      (@0, _) ->
       @0
      0size_t
      @54
      0size_t
      @81;
    @53 :=
      match @52 with
      | λ
      uu____2510(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t.
      (_, @0) ->
       @0;
    @48 := @56;
    @49 := @48;
    @46 := &(@53);
    @47 := &((@46: uint8_t*)[0uint32_t]);
    @50 :=
      libcrux_kyber.ind_cpa.sample_ring_element_cbd 😱 [[@81]] [[@70]] [[@71]]
        @49
        @47;
    @45 := @53;
    @44 := 32size_t;
    @1 := @56;
    @0 := &((@1: uint8_t*)[@44]);
    (@0: uint8_t*)[0uint32_t] := @45;
    @40 := @56;
    @41 := @40;
    @42 := Eurydice.array_to_slice < uint8_t > [[33size_t]] @41;
    @43 := libcrux_kyber.hash_functions.PRF 😱 [[@70]] @42;
    @36 := @43;
    @37 := @36;
    @38 := Eurydice.array_to_slice < uint8_t > [[@70]] @37;
    @39 :=
      libcrux_kyber.sampling.sample_from_binomial_distribution 😱 [[@71]] @38;
    @33 := @59;
    @34 := @33;
    @31 := @54;
    @32 := @31;
    @29 := @50;
    @30 := @29;
    @35 := libcrux_kyber.matrix.compute_vector_u 😱 [[@81]] @34 @32 @30;
    blitbuf @68 0size_t @27 0size_t 32size_t;
    @28 := libcrux_kyber.serialize.deserialize_then_decompress_message @27;
    @24 := @65;
    @25 := @24;
    @22 := @54;
    @23 := @22;
    @20 := &(@39);
    @21 := &((@20: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
    @18 := &(@28);
    @19 := &((@18: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
    @26 := libcrux_kyber.matrix.compute_ring_element_v 😱 [[@81]] @25 @23 @21 @19;
    blitbuf @35 0size_t @16 0size_t @81;
    @17 :=
      libcrux_kyber.ind_cpa.compress_then_serialize_u 😱
        [[@81]]
        [[@78]]
        [[@76]]
        [[@74]] @16;
    @14 := @26;
    @15 :=
      libcrux_kyber.serialize.compress_then_serialize_ring_element_v 😱
        [[@75]]
        [[@77]] @14;
    @10 := @17;
    @11 := @10;
    @12 := Eurydice.array_to_slice < uint8_t > [[@78]] @11;
    @13 := libcrux_kyber.ind_cpa.into_padded_array 😱 [[@80]] @12;
    @6 := @13;
    @5 := { start = @78; }: core_ops_range_RangeFrom size_t;
    @7 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[@80]] @6 @5;
    @8 := @7;
    @2 := @15;
    @3 := core.array.{@Array<T,␣N>#23}.as_slice < uint8_t > [[@77]] @2;
    @4 := @3;
    @9 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @8 @4;
    blitbuf @13 0size_t @66 0size_t @80;
    return @66
  }

  function
  libcrux_kyber_serialize_decompress_coefficients_10
  <cg: 0><0>(
    mutable
    byte2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t * int32_t * int32_t * int32_t
  {
    let
    mutable
    uu____2511(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t * int32_t * int32_t
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2513(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2514(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2515(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2516(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2517(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2519(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2520(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2521(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2522(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2523(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2525(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2526(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2527(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2528(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2529(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2531(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2532(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2533(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2534(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2535(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2536(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2537(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2538(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @23 := @32;
    @24 := (&,int32_t) @23 3int32_t;
    @25 := (<<,int32_t) @24 8uint32_t;
    @21 := @31;
    @22 := (&,int32_t) @21 255int32_t;
    @26 := (|,int32_t) @25 @22;
    @17 := @30;
    @18 := (&,int32_t) @17 15int32_t;
    @19 := (<<,int32_t) @18 6uint32_t;
    @15 := @32;
    @16 := (>>,int32_t) @15 2uint32_t;
    @20 := (|,int32_t) @19 @16;
    @11 := @29;
    @12 := (&,int32_t) @11 63int32_t;
    @13 := (<<,int32_t) @12 4uint32_t;
    @9 := @30;
    @10 := (>>,int32_t) @9 4uint32_t;
    @14 := (|,int32_t) @13 @10;
    @6 := @28;
    @7 := (<<,int32_t) @6 2uint32_t;
    @4 := @29;
    @5 := (>>,int32_t) @4 6uint32_t;
    @8 := (|,int32_t) @7 @5;
    @3 := @26;
    @2 := @20;
    @1 := @14;
    @0 := @8;
    @27 := (@3, @2, @1, @0);
    return @27
  }

  function
  libcrux_kyber_serialize_deserialize_then_decompress_10
  <cg: 0><0>(
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____2539(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2541(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2543(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2544(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2545(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2547(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2548(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2549(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2550(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____2551(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2553(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    byte1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2555(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2556(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2558(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2559(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2561(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2562(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2564(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2565(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2567(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2568(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2573(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t * int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____2574(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2575(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2576(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2577(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2578(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2579(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2580(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2581(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2582(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2583(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2584(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2585(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2586(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2587(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2588(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2589(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2590(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2591(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2592(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2593(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2594(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2595(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2596(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2597(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2598(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2599(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2600(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2601(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2602(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2603(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2604(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2605(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2606(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2607(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2608(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2609(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2610(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2611(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2612(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2613(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2614(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2615(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2616(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2617(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2618(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2619(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2620(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @22 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @80 := @22;
    @78 := 0size_t;
    @75 := @82;
    @76 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @75 5size_t;
    @77 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @76;
    @74 := @77;
    while<()>
    (true)
    {
      @69 := &(@74);
      @70 := &((@69: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @71 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @70;
      ();
      ();
      match @71 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @68 :=
            UNCHECKED match @71 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @64 := 0size_t;
          @1 := @68;
          @0 := &(Eurydice.slice_index < uint8_t > □ @1 @64);
          @65 := (@0: uint8_t*)[0uint32_t];
          @66 := (@65<: int32_t);
          ();
          ();
          ();
          @61 := 1size_t;
          @3 := @68;
          @2 := &(Eurydice.slice_index < uint8_t > □ @3 @61);
          @62 := (@2: uint8_t*)[0uint32_t];
          @63 := (@62<: int32_t);
          ();
          ();
          ();
          @58 := 2size_t;
          @5 := @68;
          @4 := &(Eurydice.slice_index < uint8_t > □ @5 @58);
          @59 := (@4: uint8_t*)[0uint32_t];
          @60 := (@59<: int32_t);
          ();
          ();
          ();
          @55 := 3size_t;
          @7 := @68;
          @6 := &(Eurydice.slice_index < uint8_t > □ @7 @55);
          @56 := (@6: uint8_t*)[0uint32_t];
          @57 := (@56<: int32_t);
          ();
          ();
          ();
          @52 := 4size_t;
          @9 := @68;
          @8 := &(Eurydice.slice_index < uint8_t > □ @9 @52);
          @53 := (@8: uint8_t*)[0uint32_t];
          @54 := (@53<: int32_t);
          ();
          ();
          ();
          @46 := @63;
          @45 := @66;
          @44 := @60;
          @43 := @57;
          @42 := @54;
          @47 :=
            libcrux_kyber.serialize.decompress_coefficients_10
              @46
              @45
              @44
              @43
              @42;
          ();
          ();
          ();
          ();
          ();
          ();
          @51 :=
            match @47 with
            | λ
            uu____2621(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (@0, _, _, _) ->
             @0;
          @50 :=
            match @47 with
            | λ
            uu____2622(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, @0, _, _) ->
             @0;
          @49 :=
            match @47 with
            | λ
            uu____2623(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, @0, _) ->
             @0;
          @48 :=
            match @47 with
            | λ
            uu____2624(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, @0) ->
             @0;
          ();
          @40 := @51;
          @41 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              10uint8_t
              @40;
          ();
          @38 := @78;
          @39 := (*,size_t) 4size_t @38;
          ();
          @11 := (@80).coefficients;
          @10 := &((@11: int32_t*)[@39]);
          (@10: int32_t*)[0uint32_t] := @41;
          ();
          ();
          @36 := @50;
          @37 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              10uint8_t
              @36;
          ();
          @33 := @78;
          @34 := (*,size_t) 4size_t @33;
          ();
          @35 := (+,size_t) @34 1size_t;
          ();
          @13 := (@80).coefficients;
          @12 := &((@13: int32_t*)[@35]);
          (@12: int32_t*)[0uint32_t] := @37;
          ();
          ();
          @31 := @49;
          @32 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              10uint8_t
              @31;
          ();
          @28 := @78;
          @29 := (*,size_t) 4size_t @28;
          ();
          @30 := (+,size_t) @29 2size_t;
          ();
          @15 := (@80).coefficients;
          @14 := &((@15: int32_t*)[@30]);
          (@14: int32_t*)[0uint32_t] := @32;
          ();
          ();
          @26 := @48;
          @27 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              10uint8_t
              @26;
          ();
          @23 := @78;
          @24 := (*,size_t) 4size_t @23;
          ();
          @25 := (+,size_t) @24 3size_t;
          ();
          @17 := (@80).coefficients;
          @16 := &((@17: int32_t*)[@25]);
          (@16: int32_t*)[0uint32_t] := @27;
          ();
          ();
          @20 := ();
          @67 := @20;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @78 := (+,size_t) @78 1size_t;
          @19 := ();
          @72 := @19;
          ();
          ();
          ();
          ();
          @18 := ();
          @73 := @18;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @21 := ();
    @79 := @21;
    @81 := @80;
    return @81
  }

  function
  libcrux_kyber_serialize_decompress_coefficients_11
  <cg: 0><0>(
    mutable
    byte2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte9(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte10(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte11(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t
  {
    let
    mutable
    uu____2625(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2627(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2628(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2629(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2630(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2632(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2633(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2634(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2635(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2636(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2638(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2639(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2640(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2641(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2642(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2643(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2644(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2645(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2647(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2648(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2649(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2650(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2651(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2653(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2654(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2655(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2656(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2657(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2659(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2660(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2661(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2662(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2663(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2664(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2665(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2666(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2668(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2669(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2670(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2671(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2672(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2674(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2675(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2676(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2677(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2678(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2679(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2680(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2681(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2682(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2683(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2684(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2685(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @56 := @71;
    @57 := (&,int32_t) @56 7int32_t;
    @58 := (<<,int32_t) @57 8uint32_t;
    @55 := @70;
    @59 := (|,int32_t) @58 @55;
    @51 := @69;
    @52 := (&,int32_t) @51 63int32_t;
    @53 := (<<,int32_t) @52 5uint32_t;
    @49 := @71;
    @50 := (>>,int32_t) @49 3uint32_t;
    @54 := (|,int32_t) @53 @50;
    @44 := @68;
    @45 := (&,int32_t) @44 1int32_t;
    @46 := (<<,int32_t) @45 10uint32_t;
    @42 := @67;
    @43 := (<<,int32_t) @42 2uint32_t;
    @47 := (|,int32_t) @46 @43;
    @40 := @69;
    @41 := (>>,int32_t) @40 6uint32_t;
    @48 := (|,int32_t) @47 @41;
    @36 := @66;
    @37 := (&,int32_t) @36 15int32_t;
    @38 := (<<,int32_t) @37 7uint32_t;
    @34 := @68;
    @35 := (>>,int32_t) @34 1uint32_t;
    @39 := (|,int32_t) @38 @35;
    @30 := @65;
    @31 := (&,int32_t) @30 127int32_t;
    @32 := (<<,int32_t) @31 4uint32_t;
    @28 := @66;
    @29 := (>>,int32_t) @28 4uint32_t;
    @33 := (|,int32_t) @32 @29;
    @23 := @64;
    @24 := (&,int32_t) @23 3int32_t;
    @25 := (<<,int32_t) @24 9uint32_t;
    @21 := @63;
    @22 := (<<,int32_t) @21 1uint32_t;
    @26 := (|,int32_t) @25 @22;
    @19 := @65;
    @20 := (>>,int32_t) @19 7uint32_t;
    @27 := (|,int32_t) @26 @20;
    @15 := @62;
    @16 := (&,int32_t) @15 31int32_t;
    @17 := (<<,int32_t) @16 6uint32_t;
    @13 := @64;
    @14 := (>>,int32_t) @13 2uint32_t;
    @18 := (|,int32_t) @17 @14;
    @10 := @61;
    @11 := (<<,int32_t) @10 3uint32_t;
    @8 := @62;
    @9 := (>>,int32_t) @8 5uint32_t;
    @12 := (|,int32_t) @11 @9;
    @7 := @59;
    @6 := @54;
    @5 := @48;
    @4 := @39;
    @3 := @33;
    @2 := @27;
    @1 := @18;
    @0 := @12;
    @60 := (@7, @6, @5, @4, @3, @2, @1, @0);
    return @60
  }

  function
  libcrux_kyber_serialize_deserialize_then_decompress_11
  <cg: 0><0>(
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____2686(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2688(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2690(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2691(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2692(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2694(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2695(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2696(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2697(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____2698(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2700(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    byte1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2702(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2703(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2705(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2706(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2708(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2709(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2711(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2712(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2714(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2715(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2717(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2718(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2720(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2721(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2723(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2724(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte9(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2726(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2727(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte10(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2729(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2730(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte11(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2732(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2733(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2742(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____2743(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2744(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2745(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2746(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2747(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2748(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2749(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2750(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2751(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2752(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2753(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2754(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2755(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2756(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2757(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2758(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2759(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2760(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2761(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2762(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2763(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2764(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2765(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2766(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2767(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2768(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2769(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2770(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2771(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2772(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2773(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2774(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2775(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2776(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2777(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2778(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2779(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2780(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2781(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2782(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2783(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2784(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2785(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2786(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2787(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2788(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2789(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2790(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2791(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2792(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2793(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2794(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2795(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2796(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2797(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2798(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2799(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2800(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2801(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2802(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2803(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2804(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2805(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2806(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2807(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2808(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2809(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2810(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2811(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2812(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2813(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2814(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2815(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2816(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2817(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2818(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2819(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2820(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2821(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2822(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2823(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2824(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2825(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2826(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2827(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2828(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2829(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2830(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2831(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2832(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2833(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2834(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2835(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @42 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @148 := @42;
    @146 := 0size_t;
    @143 := @150;
    @144 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @143 11size_t;
    @145 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @144;
    @142 := @145;
    while<()>
    (true)
    {
      @137 := &(@142);
      @138 := &((@137: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @139 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @138;
      ();
      ();
      match @139 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @136 :=
            UNCHECKED match @139 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @132 := 0size_t;
          @1 := @136;
          @0 := &(Eurydice.slice_index < uint8_t > □ @1 @132);
          @133 := (@0: uint8_t*)[0uint32_t];
          @134 := (@133<: int32_t);
          ();
          ();
          ();
          @129 := 1size_t;
          @3 := @136;
          @2 := &(Eurydice.slice_index < uint8_t > □ @3 @129);
          @130 := (@2: uint8_t*)[0uint32_t];
          @131 := (@130<: int32_t);
          ();
          ();
          ();
          @126 := 2size_t;
          @5 := @136;
          @4 := &(Eurydice.slice_index < uint8_t > □ @5 @126);
          @127 := (@4: uint8_t*)[0uint32_t];
          @128 := (@127<: int32_t);
          ();
          ();
          ();
          @123 := 3size_t;
          @7 := @136;
          @6 := &(Eurydice.slice_index < uint8_t > □ @7 @123);
          @124 := (@6: uint8_t*)[0uint32_t];
          @125 := (@124<: int32_t);
          ();
          ();
          ();
          @120 := 4size_t;
          @9 := @136;
          @8 := &(Eurydice.slice_index < uint8_t > □ @9 @120);
          @121 := (@8: uint8_t*)[0uint32_t];
          @122 := (@121<: int32_t);
          ();
          ();
          ();
          @117 := 5size_t;
          @11 := @136;
          @10 := &(Eurydice.slice_index < uint8_t > □ @11 @117);
          @118 := (@10: uint8_t*)[0uint32_t];
          @119 := (@118<: int32_t);
          ();
          ();
          ();
          @114 := 6size_t;
          @13 := @136;
          @12 := &(Eurydice.slice_index < uint8_t > □ @13 @114);
          @115 := (@12: uint8_t*)[0uint32_t];
          @116 := (@115<: int32_t);
          ();
          ();
          ();
          @111 := 7size_t;
          @15 := @136;
          @14 := &(Eurydice.slice_index < uint8_t > □ @15 @111);
          @112 := (@14: uint8_t*)[0uint32_t];
          @113 := (@112<: int32_t);
          ();
          ();
          ();
          @108 := 8size_t;
          @17 := @136;
          @16 := &(Eurydice.slice_index < uint8_t > □ @17 @108);
          @109 := (@16: uint8_t*)[0uint32_t];
          @110 := (@109<: int32_t);
          ();
          ();
          ();
          @105 := 9size_t;
          @19 := @136;
          @18 := &(Eurydice.slice_index < uint8_t > □ @19 @105);
          @106 := (@18: uint8_t*)[0uint32_t];
          @107 := (@106<: int32_t);
          ();
          ();
          ();
          @102 := 10size_t;
          @21 := @136;
          @20 := &(Eurydice.slice_index < uint8_t > □ @21 @102);
          @103 := (@20: uint8_t*)[0uint32_t];
          @104 := (@103<: int32_t);
          ();
          ();
          ();
          @92 := @131;
          @91 := @134;
          @90 := @128;
          @89 := @122;
          @88 := @125;
          @87 := @119;
          @86 := @116;
          @85 := @110;
          @84 := @113;
          @83 := @107;
          @82 := @104;
          @93 :=
            libcrux_kyber.serialize.decompress_coefficients_11
              @92
              @91
              @90
              @89
              @88
              @87
              @86
              @85
              @84
              @83
              @82;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @101 :=
            match @93 with
            | λ
            uu____2836(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (@0, _, _, _, _, _, _, _) ->
             @0;
          @100 :=
            match @93 with
            | λ
            uu____2837(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, @0, _, _, _, _, _, _) ->
             @0;
          @99 :=
            match @93 with
            | λ
            uu____2838(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, @0, _, _, _, _, _) ->
             @0;
          @98 :=
            match @93 with
            | λ
            uu____2839(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, @0, _, _, _, _) ->
             @0;
          @97 :=
            match @93 with
            | λ
            uu____2840(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, _, @0, _, _, _) ->
             @0;
          @96 :=
            match @93 with
            | λ
            uu____2841(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, _, _, @0, _, _) ->
             @0;
          @95 :=
            match @93 with
            | λ
            uu____2842(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, _, _, _, @0, _) ->
             @0;
          @94 :=
            match @93 with
            | λ
            uu____2843(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, _, _, _, _, @0) ->
             @0;
          ();
          @80 := @101;
          @81 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              11uint8_t
              @80;
          ();
          @78 := @146;
          @79 := (*,size_t) 8size_t @78;
          ();
          @23 := (@148).coefficients;
          @22 := &((@23: int32_t*)[@79]);
          (@22: int32_t*)[0uint32_t] := @81;
          ();
          ();
          @76 := @100;
          @77 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              11uint8_t
              @76;
          ();
          @73 := @146;
          @74 := (*,size_t) 8size_t @73;
          ();
          @75 := (+,size_t) @74 1size_t;
          ();
          @25 := (@148).coefficients;
          @24 := &((@25: int32_t*)[@75]);
          (@24: int32_t*)[0uint32_t] := @77;
          ();
          ();
          @71 := @99;
          @72 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              11uint8_t
              @71;
          ();
          @68 := @146;
          @69 := (*,size_t) 8size_t @68;
          ();
          @70 := (+,size_t) @69 2size_t;
          ();
          @27 := (@148).coefficients;
          @26 := &((@27: int32_t*)[@70]);
          (@26: int32_t*)[0uint32_t] := @72;
          ();
          ();
          @66 := @98;
          @67 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              11uint8_t
              @66;
          ();
          @63 := @146;
          @64 := (*,size_t) 8size_t @63;
          ();
          @65 := (+,size_t) @64 3size_t;
          ();
          @29 := (@148).coefficients;
          @28 := &((@29: int32_t*)[@65]);
          (@28: int32_t*)[0uint32_t] := @67;
          ();
          ();
          @61 := @97;
          @62 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              11uint8_t
              @61;
          ();
          @58 := @146;
          @59 := (*,size_t) 8size_t @58;
          ();
          @60 := (+,size_t) @59 4size_t;
          ();
          @31 := (@148).coefficients;
          @30 := &((@31: int32_t*)[@60]);
          (@30: int32_t*)[0uint32_t] := @62;
          ();
          ();
          @56 := @96;
          @57 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              11uint8_t
              @56;
          ();
          @53 := @146;
          @54 := (*,size_t) 8size_t @53;
          ();
          @55 := (+,size_t) @54 5size_t;
          ();
          @33 := (@148).coefficients;
          @32 := &((@33: int32_t*)[@55]);
          (@32: int32_t*)[0uint32_t] := @57;
          ();
          ();
          @51 := @95;
          @52 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              11uint8_t
              @51;
          ();
          @48 := @146;
          @49 := (*,size_t) 8size_t @48;
          ();
          @50 := (+,size_t) @49 6size_t;
          ();
          @35 := (@148).coefficients;
          @34 := &((@35: int32_t*)[@50]);
          (@34: int32_t*)[0uint32_t] := @52;
          ();
          ();
          @46 := @94;
          @47 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              11uint8_t
              @46;
          ();
          @43 := @146;
          @44 := (*,size_t) 8size_t @43;
          ();
          @45 := (+,size_t) @44 7size_t;
          ();
          @37 := (@148).coefficients;
          @36 := &((@37: int32_t*)[@45]);
          (@36: int32_t*)[0uint32_t] := @47;
          ();
          ();
          @40 := ();
          @135 := @40;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @146 := (+,size_t) @146 1size_t;
          @39 := ();
          @140 := @39;
          ();
          ();
          ();
          ();
          @38 := ();
          @141 := @38;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @41 := ();
    @147 := @41;
    @149 := @148;
    return @149
  }

  function
  libcrux_kyber_serialize_deserialize_then_decompress_ring_element_u
  <cg: 1><0>(
    mutable
    COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____2844(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2845(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____2846(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2847(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    @2 := (@5<: uint32_t);
    switch @2
    {
      case 10uint32_t:
        @1 := @4;
        @3 := libcrux_kyber.serialize.deserialize_then_decompress_10 @1;
        ()
      case 11uint32_t:
        @0 := @4;
        @3 := libcrux_kyber.serialize.deserialize_then_decompress_11 @0;
        ()
      case _:
        $abort<??> (panic!)
    };
    return @3
  }

  function
  libcrux_kyber_ntt_ntt_at_layer_3328
  <cg: 0><0>(
    mutable
    zeta_i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement,
    mutable
    layer(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____2848(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2849(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2850(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2851(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @2 := &((@6: size_t*)[0uint32_t]);
    @1 := @5;
    @0 := @4;
    @3 := libcrux_kyber.ntt.ntt_at_layer @2 @1 @0 3328size_t;
    return @3
  }

  function
  libcrux_kyber_ntt_ntt_vector_u
  <cg: 1><0>(
    mutable
    VECTOR_U_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____2852(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    zeta_i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2854(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2855(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2856(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2857(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2858(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2859(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2860(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2861(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2862(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2863(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2864(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2865(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2866(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2867(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2868(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2869(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2870(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2871(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2872(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2873(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2874(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2875(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2876(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2877(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2878(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2879(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2880(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  size_t*
    = $any
    in
    let
    mutable
    uu____2881(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2882(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2883(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2884(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____2886(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2887(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2888(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____2889(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____2890(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2892(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2893(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2894(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2895(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2896(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2897(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2898(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2899(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2900(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2901(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2902(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____2903(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @50 := 0size_t;
    @47 := &(@50);
    @48 := &((@47: size_t*)[0uint32_t]);
    @46 := @52;
    @49 := libcrux_kyber.ntt.ntt_at_layer_3328 @48 @46 7size_t;
    @52 := @49;
    @43 := &(@50);
    @44 := &((@43: size_t*)[0uint32_t]);
    @42 := @52;
    @45 := libcrux_kyber.ntt.ntt_at_layer_3328 @44 @42 6size_t;
    @52 := @45;
    @39 := &(@50);
    @40 := &((@39: size_t*)[0uint32_t]);
    @38 := @52;
    @41 := libcrux_kyber.ntt.ntt_at_layer_3328 @40 @38 5size_t;
    @52 := @41;
    @35 := &(@50);
    @36 := &((@35: size_t*)[0uint32_t]);
    @34 := @52;
    @37 := libcrux_kyber.ntt.ntt_at_layer_3328 @36 @34 4size_t;
    @52 := @37;
    @31 := &(@50);
    @32 := &((@31: size_t*)[0uint32_t]);
    @30 := @52;
    @33 := libcrux_kyber.ntt.ntt_at_layer_3328 @32 @30 3size_t;
    @52 := @33;
    @27 := &(@50);
    @28 := &((@27: size_t*)[0uint32_t]);
    @26 := @52;
    @29 := libcrux_kyber.ntt.ntt_at_layer_3328 @28 @26 2size_t;
    @52 := @29;
    @23 := &(@50);
    @24 := &((@23: size_t*)[0uint32_t]);
    @22 := @52;
    @25 := libcrux_kyber.ntt.ntt_at_layer_3328 @24 @22 1size_t;
    @52 := @25;
    @7 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @19 := { start = 0size_t; end = @7; }: core_ops_range_Range size_t;
    @20 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @19;
    @18 := @20;
    while<()>
    (true)
    {
      @13 := &(@18);
      @14 := &((@13: core_ops_range_Range size_t*)[0uint32_t]);
      @15 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @14;
      ();
      ();
      match @15 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @12 :=
            UNCHECKED match @15 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @9 := @12;
          @1 := (@52).coefficients;
          @0 := &((@1: int32_t*)[@9]);
          @10 := (@0: int32_t*)[0uint32_t];
          @11 := libcrux_kyber.arithmetic.barrett_reduce @10;
          ();
          @8 := @12;
          @3 := (@52).coefficients;
          @2 := &((@3: int32_t*)[@8]);
          (@2: int32_t*)[0uint32_t] := @11;
          ();
          ();
          ();
          @5 := ();
          @16 := @5;
          ();
          ();
          ();
          ();
          @4 := ();
          @17 := @4;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @6 := ();
    @21 := @6;
    @51 := @52;
    return @51
  }

  function
  libcrux_kyber_ind_cpa_deserialize_then_decompress_u
  <cg: 4><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    CIPHERTEXT_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    VECTOR_U_ENCODED_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    U_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement[3]
  {
    let
    mutable
    uu____2904(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[3]
    = $any
    in
    let
    mutable
    u_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[3]
    = $any
    in
    let
    mutable
    uu____2906(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2908(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2909(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2910(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2911(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2912(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2913(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2915(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2916(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2917(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2918(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____2919(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    u_bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2921(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    u(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2923(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2924(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2925(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2926(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2927(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2928(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2929(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2930(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2931(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2932(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2933(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2934(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    @7 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @29 :=
      Eurydice.array_repeat < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@35]] @7;
    @27 := 0size_t;
    @23 := @31;
    @24 := Eurydice.array_to_slice < uint8_t > [[@34]] @23;
    @6 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @21 := (*,size_t) @6 @32;
    @22 := (/,size_t) @21 8size_t;
    @25 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @24 @22;
    @26 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @25;
    @20 := @26;
    while<()>
    (true)
    {
      @15 := &(@20);
      @16 := &((@15: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @17 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @16;
      ();
      ();
      match @17 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @14 :=
            UNCHECKED match @17 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @11 := @14;
          @12 :=
            libcrux_kyber.serialize.deserialize_then_decompress_ring_element_u 😱
              [[@32]] @11;
          ();
          ();
          @9 := @12;
          @10 := libcrux_kyber.ntt.ntt_vector_u 😱 [[@32]] @9;
          ();
          @8 := @27;
          @1 := @29;
          @0 := &((@1: libcrux_kyber_arithmetic_PolynomialRingElement*)[@8]);
          (@0: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t] :=
            @10;
          ();
          ();
          @4 := ();
          @13 := @4;
          ();
          ();
          @27 := (+,size_t) @27 1size_t;
          @3 := ();
          @18 := @3;
          ();
          ();
          ();
          ();
          @2 := ();
          @19 := @2;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @5 := ();
    @28 := @5;
    blitbuf @29 0size_t @30 0size_t @35;
    return @30
  }

  function
  libcrux_kyber_ind_cpa_deserialize_secret_key
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement[0]
  {
    let
    mutable
    uu____2935(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    secret_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[0]
    = $any
    in
    let
    mutable
    uu____2937(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2939(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2940(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2941(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____2943(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2944(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2945(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2946(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____2947(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    secret_bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2949(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2950(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2951(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____2952(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2953(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2954(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2955(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2956(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2957(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2958(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2959(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____2960(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    @7 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @24 :=
      Eurydice.array_repeat < libcrux_kyber_arithmetic_PolynomialRingElement >
        [[@27]] @7;
    @22 := 0size_t;
    @19 := @26;
    @6 := libcrux_kyber.constants.BYTES_PER_RING_ELEMENT;
    @20 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @19 @6;
    @21 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @20;
    @18 := @21;
    while<()>
    (true)
    {
      @13 := &(@18);
      @14 := &((@13: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @15 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @14;
      ();
      ();
      match @15 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @12 :=
            UNCHECKED match @15 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @9 := @12;
          @10 :=
            libcrux_kyber.serialize.deserialize_to_uncompressed_ring_element @9;
          ();
          @8 := @22;
          @1 := @24;
          @0 := &((@1: libcrux_kyber_arithmetic_PolynomialRingElement*)[@8]);
          (@0: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t] :=
            @10;
          ();
          ();
          @4 := ();
          @11 := @4;
          ();
          @22 := (+,size_t) @22 1size_t;
          @3 := ();
          @16 := @3;
          ();
          ();
          ();
          ();
          @2 := ();
          @17 := @2;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @5 := ();
    @23 := @5;
    blitbuf @24 0size_t @25 0size_t @27;
    return @25
  }


  external core_ops_bit_{u8#29}_bitand <0>:<cg: 0>
    uint8_t ->
    uint8_t ->
      uint8_t


  external core_ops_bit_{u8#791}_shr <0>:<cg: 0> uint8_t -> int32_t -> uint8_t

  function
  libcrux_kyber_serialize_decompress_coefficients_4
  <cg: 0><0>(
    mutable
    byte(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
  ):
  int32_t * int32_t
  {
    let
    mutable
    uu____2961(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2963(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2964(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2966(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2967(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____2968(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2969(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2970(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @6 := @10;
    @7 := Eurydice.bitand_pv_u8 @6 15uint8_t;
    @8 := (@7<: int32_t);
    @2 := @10;
    @3 := Eurydice.shr_pv_u8 @2 4int32_t;
    @4 := (&,uint8_t) @3 15uint8_t;
    @5 := (@4<: int32_t);
    @1 := @8;
    @0 := @5;
    @9 := (@1, @0);
    return @9
  }

  function
  libcrux_kyber_serialize_deserialize_then_decompress_4
  <cg: 0><0>(
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____2971(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____2973(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2975(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      uint8_t
    = $any
    in
    let
    mutable
    uu____2976(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      uint8_t
    = $any
    in
    let
    mutable
    uu____2977(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      uint8_t
    = $any
    in
    let
    mutable
    uu____2979(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2980(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____2981(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      uint8_t*
    = $any
    in
    let
    mutable
    uu____2982(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      uint8_t*
    = $any
    in
    let
    mutable
    uu____2983(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      uint8_t*
    = $any
    in
    let
    mutable
    byte(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2985(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2988(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____2989(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____2990(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2991(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2992(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2993(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2994(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2995(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____2996(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2997(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2998(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____2999(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3000(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3001(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3002(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3003(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3004(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3005(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3006(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3007(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    @8 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @35 := @8;
    @33 := 0size_t;
    @30 := @37;
    @31 := core.slice.{@Slice<T>}.iter < uint8_t > □ @30;
    @32 :=
      core.iter.traits.collect.{I}.into_iter < core_slice_iter_Iter uint8_t > □
        @31;
    @29 := @32;
    while<()>
    (true)
    {
      @24 := &(@29);
      @25 := &((@24: core_slice_iter_Iter uint8_t*)[0uint32_t]);
      @26 :=
        core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next < uint8_t >
          □ @25;
      ();
      ();
      match @26 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @23 :=
            UNCHECKED match @26 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*.
            Some (@0) ->
             @0;
          @18 := &((@23: uint8_t*)[0uint32_t]);
          @19 := libcrux_kyber.serialize.decompress_coefficients_4 @18;
          ();
          ();
          @21 :=
            match @19 with
            | λ
            uu____3008(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (@0, _) ->
             @0;
          @20 :=
            match @19 with
            | λ
            uu____3009(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, @0) ->
             @0;
          ();
          @16 := @21;
          @17 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              4uint8_t
              @16;
          ();
          @14 := @33;
          @15 := (*,size_t) 2size_t @14;
          ();
          @1 := (@35).coefficients;
          @0 := &((@1: int32_t*)[@15]);
          (@0: int32_t*)[0uint32_t] := @17;
          ();
          ();
          @12 := @20;
          @13 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              4uint8_t
              @12;
          ();
          @9 := @33;
          @10 := (*,size_t) 2size_t @9;
          ();
          @11 := (+,size_t) @10 1size_t;
          ();
          @3 := (@35).coefficients;
          @2 := &((@3: int32_t*)[@11]);
          (@2: int32_t*)[0uint32_t] := @13;
          ();
          ();
          @6 := ();
          @22 := @6;
          ();
          ();
          ();
          @33 := (+,size_t) @33 1size_t;
          @5 := ();
          @27 := @5;
          ();
          ();
          ();
          ();
          @4 := ();
          @28 := @4;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @7 := ();
    @34 := @7;
    @36 := @35;
    return @36
  }

  function
  libcrux_kyber_serialize_decompress_coefficients_5
  <cg: 0><0>(
    mutable
    byte1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t,
    mutable
    byte5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
  ):
  int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t
  {
    let
    mutable
    uu____3010(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3012(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3014(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3015(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3016(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3017(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3018(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3020(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3021(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3023(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3024(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3025(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3026(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3027(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3029(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3030(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3031(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3032(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3033(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3035(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3036(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3038(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3039(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3040(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3041(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3042(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3044(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3045(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3046(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3047(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3048(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3049(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3050(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3051(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3052(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    @40 := @47;
    @41 := (&,int32_t) @40 31int32_t;
    @36 := @46;
    @37 := (&,int32_t) @36 3int32_t;
    @38 := (<<,int32_t) @37 3uint32_t;
    @34 := @47;
    @35 := (>>,int32_t) @34 5uint32_t;
    @39 := (|,int32_t) @38 @35;
    @31 := @46;
    @32 := (>>,int32_t) @31 2uint32_t;
    @33 := (&,int32_t) @32 31int32_t;
    @27 := @45;
    @28 := (&,int32_t) @27 15int32_t;
    @29 := (<<,int32_t) @28 1uint32_t;
    @25 := @46;
    @26 := (>>,int32_t) @25 7uint32_t;
    @30 := (|,int32_t) @29 @26;
    @21 := @44;
    @22 := (&,int32_t) @21 1int32_t;
    @23 := (<<,int32_t) @22 4uint32_t;
    @19 := @45;
    @20 := (>>,int32_t) @19 4uint32_t;
    @24 := (|,int32_t) @23 @20;
    @16 := @44;
    @17 := (>>,int32_t) @16 1uint32_t;
    @18 := (&,int32_t) @17 31int32_t;
    @12 := @43;
    @13 := (&,int32_t) @12 7int32_t;
    @14 := (<<,int32_t) @13 2uint32_t;
    @10 := @44;
    @11 := (>>,int32_t) @10 6uint32_t;
    @15 := (|,int32_t) @14 @11;
    @8 := @43;
    @9 := (>>,int32_t) @8 3uint32_t;
    @7 := @41;
    @6 := @39;
    @5 := @33;
    @4 := @30;
    @3 := @24;
    @2 := @18;
    @1 := @15;
    @0 := @9;
    @42 := (@7, @6, @5, @4, @3, @2, @1, @0);
    return @42
  }

  function
  libcrux_kyber_serialize_deserialize_then_decompress_5
  <cg: 0><0>(
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____3053(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3055(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3057(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____3058(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____3059(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      uint8_t
    = $any
    in
    let
    mutable
    uu____3061(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3062(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3063(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3064(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    uu____3065(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      uint8_t*
    = $any
    in
    let
    mutable
    bytes(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3067(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    byte1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3069(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3070(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3072(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3073(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3075(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3076(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3078(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3079(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    byte5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3081(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3082(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient3(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient4(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient5(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient6(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient7(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient8(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3091(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t * int32_t
    = $any
    in
    let
    mutable
    uu____3092(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3093(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3094(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3095(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3096(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3097(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3098(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3099(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3100(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3101(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3102(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3103(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3104(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3105(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3106(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3107(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3108(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3109(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3110(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3111(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3112(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3113(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3114(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3115(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3116(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3117(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3118(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3119(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3120(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3121(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3122(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3123(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3124(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3125(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3126(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3127(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3128(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3129(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3130(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3131(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3132(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3133(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3134(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3135(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3136(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3137(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3138(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3139(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3140(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3141(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3142(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3143(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3144(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3145(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3146(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3147(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3148(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3149(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3150(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3151(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3152(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3153(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3154(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3155(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3156(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3157(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3158(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3159(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3160(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3161(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3162(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3163(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3164(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3165(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3166(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @30 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @112 := @30;
    @110 := 0size_t;
    @107 := @114;
    @108 := core.slice.{@Slice<T>}.chunks_exact < uint8_t > □ @107 5size_t;
    @109 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact uint8_t > □ @108;
    @106 := @109;
    while<()>
    (true)
    {
      @101 := &(@106);
      @102 := &((@101: core_slice_iter_ChunksExact uint8_t*)[0uint32_t]);
      @103 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < uint8_t > □ @102;
      ();
      ();
      match @103 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @100 :=
            UNCHECKED match @103 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              uint8_t.
            Some (@0) ->
             @0;
          @96 := 0size_t;
          @1 := @100;
          @0 := &(Eurydice.slice_index < uint8_t > □ @1 @96);
          @97 := (@0: uint8_t*)[0uint32_t];
          @98 := (@97<: int32_t);
          ();
          ();
          ();
          @93 := 1size_t;
          @3 := @100;
          @2 := &(Eurydice.slice_index < uint8_t > □ @3 @93);
          @94 := (@2: uint8_t*)[0uint32_t];
          @95 := (@94<: int32_t);
          ();
          ();
          ();
          @90 := 2size_t;
          @5 := @100;
          @4 := &(Eurydice.slice_index < uint8_t > □ @5 @90);
          @91 := (@4: uint8_t*)[0uint32_t];
          @92 := (@91<: int32_t);
          ();
          ();
          ();
          @87 := 3size_t;
          @7 := @100;
          @6 := &(Eurydice.slice_index < uint8_t > □ @7 @87);
          @88 := (@6: uint8_t*)[0uint32_t];
          @89 := (@88<: int32_t);
          ();
          ();
          ();
          @84 := 4size_t;
          @9 := @100;
          @8 := &(Eurydice.slice_index < uint8_t > □ @9 @84);
          @85 := (@8: uint8_t*)[0uint32_t];
          @86 := (@85<: int32_t);
          ();
          ();
          ();
          @74 := @98;
          @73 := @95;
          @72 := @92;
          @71 := @89;
          @70 := @86;
          @75 :=
            libcrux_kyber.serialize.decompress_coefficients_5
              @74
              @73
              @72
              @71
              @70;
          ();
          ();
          ();
          ();
          ();
          ();
          @83 :=
            match @75 with
            | λ
            uu____3167(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (@0, _, _, _, _, _, _, _) ->
             @0;
          @82 :=
            match @75 with
            | λ
            uu____3168(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, @0, _, _, _, _, _, _) ->
             @0;
          @81 :=
            match @75 with
            | λ
            uu____3169(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, @0, _, _, _, _, _) ->
             @0;
          @80 :=
            match @75 with
            | λ
            uu____3170(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, @0, _, _, _, _) ->
             @0;
          @79 :=
            match @75 with
            | λ
            uu____3171(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, _, @0, _, _, _) ->
             @0;
          @78 :=
            match @75 with
            | λ
            uu____3172(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, _, _, @0, _, _) ->
             @0;
          @77 :=
            match @75 with
            | λ
            uu____3173(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, _, _, _, @0, _) ->
             @0;
          @76 :=
            match @75 with
            | λ
            uu____3174(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            int32_t.
            (_, _, _, _, _, _, _, @0) ->
             @0;
          ();
          @68 := @83;
          @69 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              5uint8_t
              @68;
          ();
          @66 := @110;
          @67 := (*,size_t) 8size_t @66;
          ();
          @11 := (@112).coefficients;
          @10 := &((@11: int32_t*)[@67]);
          (@10: int32_t*)[0uint32_t] := @69;
          ();
          ();
          @64 := @82;
          @65 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              5uint8_t
              @64;
          ();
          @61 := @110;
          @62 := (*,size_t) 8size_t @61;
          ();
          @63 := (+,size_t) @62 1size_t;
          ();
          @13 := (@112).coefficients;
          @12 := &((@13: int32_t*)[@63]);
          (@12: int32_t*)[0uint32_t] := @65;
          ();
          ();
          @59 := @81;
          @60 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              5uint8_t
              @59;
          ();
          @56 := @110;
          @57 := (*,size_t) 8size_t @56;
          ();
          @58 := (+,size_t) @57 2size_t;
          ();
          @15 := (@112).coefficients;
          @14 := &((@15: int32_t*)[@58]);
          (@14: int32_t*)[0uint32_t] := @60;
          ();
          ();
          @54 := @80;
          @55 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              5uint8_t
              @54;
          ();
          @51 := @110;
          @52 := (*,size_t) 8size_t @51;
          ();
          @53 := (+,size_t) @52 3size_t;
          ();
          @17 := (@112).coefficients;
          @16 := &((@17: int32_t*)[@53]);
          (@16: int32_t*)[0uint32_t] := @55;
          ();
          ();
          @49 := @79;
          @50 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              5uint8_t
              @49;
          ();
          @46 := @110;
          @47 := (*,size_t) 8size_t @46;
          ();
          @48 := (+,size_t) @47 4size_t;
          ();
          @19 := (@112).coefficients;
          @18 := &((@19: int32_t*)[@48]);
          (@18: int32_t*)[0uint32_t] := @50;
          ();
          ();
          @44 := @78;
          @45 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              5uint8_t
              @44;
          ();
          @41 := @110;
          @42 := (*,size_t) 8size_t @41;
          ();
          @43 := (+,size_t) @42 5size_t;
          ();
          @21 := (@112).coefficients;
          @20 := &((@21: int32_t*)[@43]);
          (@20: int32_t*)[0uint32_t] := @45;
          ();
          ();
          @39 := @77;
          @40 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              5uint8_t
              @39;
          ();
          @36 := @110;
          @37 := (*,size_t) 8size_t @36;
          ();
          @38 := (+,size_t) @37 6size_t;
          ();
          @23 := (@112).coefficients;
          @22 := &((@23: int32_t*)[@38]);
          (@22: int32_t*)[0uint32_t] := @40;
          ();
          ();
          @34 := @76;
          @35 :=
            libcrux_kyber.compress.decompress_ciphertext_coefficient
              5uint8_t
              @34;
          ();
          @31 := @110;
          @32 := (*,size_t) 8size_t @31;
          ();
          @33 := (+,size_t) @32 7size_t;
          ();
          @25 := (@112).coefficients;
          @24 := &((@25: int32_t*)[@33]);
          (@24: int32_t*)[0uint32_t] := @35;
          ();
          ();
          @28 := ();
          @99 := @28;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @110 := (+,size_t) @110 1size_t;
          @27 := ();
          @104 := @27;
          ();
          ();
          ();
          ();
          @26 := ();
          @105 := @26;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @29 := ();
    @111 := @29;
    @113 := @112;
    return @113
  }

  function
  libcrux_kyber_serialize_deserialize_then_decompress_ring_element_v
  <cg: 1><0>(
    mutable
    COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____3175(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3176(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint32_t
    = $any
    in
    let
    mutable
    uu____3177(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3178(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    @2 := (@5<: uint32_t);
    switch @2
    {
      case 4uint32_t:
        @1 := @4;
        @3 := libcrux_kyber.serialize.deserialize_then_decompress_4 @1;
        ()
      case 5uint32_t:
        @0 := @4;
        @3 := libcrux_kyber.serialize.deserialize_then_decompress_5 @0;
        ()
      case _:
        $abort<??> (panic!)
    };
    return @3
  }

  function
  libcrux_kyber_matrix_compute_message
  <cg: 1><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    v(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*,
    mutable
    secret_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*,
    mutable
    u_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
  ):
  libcrux_kyber_arithmetic_PolynomialRingElement
  {
    let
    mutable
    uu____3179(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    result(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3181(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3182(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____3183(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____3185(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3186(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3187(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____3188(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____3189(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    product(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3192(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3193(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3194(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3195(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3196(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3197(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3198(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3199(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3200(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3201(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3202(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3203(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3204(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3205(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____3206(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____3208(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3209(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      size_t
    = $any
    in
    let
    mutable
    uu____3210(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    uu____3211(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_ops_range_Range
      size_t*
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    coefficient_normal_form(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    int32_t
    = $any
    in
    let
    mutable
    uu____3214(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3215(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3216(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3217(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3218(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3219(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3220(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3221(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3222(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3223(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3224(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3225(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3226(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3227(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3228(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3229(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3230(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3231(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3232(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3233(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3234(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3235(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3236(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3237(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3238(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3239(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3240(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    @17 :=
      libcrux_kyber.arithmetic.{libcrux_kyber::arithmetic::PolynomialRingElement}.ZERO;
    @60 := @17;
    @57 := { start = 0size_t; end = @65; }: core_ops_range_Range size_t;
    @58 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @57;
    @56 := @58;
    while<()>
    (true)
    {
      @51 := &(@56);
      @52 := &((@51: core_ops_range_Range size_t*)[0uint32_t]);
      @53 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @52;
      ();
      ();
      match @53 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @50 :=
            UNCHECKED match @53 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @46 := @50;
          @1 := @63;
          @0 := &((@1: libcrux_kyber_arithmetic_PolynomialRingElement*)[@46]);
          @47 :=
            &((@0: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @48 :=
            &((@47: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @43 := @50;
          @3 := @62;
          @2 := &((@3: libcrux_kyber_arithmetic_PolynomialRingElement*)[@43]);
          @44 :=
            &((@2: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @45 :=
            &((@44: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @49 := libcrux_kyber.ntt.ntt_multiply @48 @45;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @41 := @60;
          @39 := &(@49);
          @40 :=
            &((@39: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
          @42 := libcrux_kyber.arithmetic.add_to_ring_element 😱 [[@65]] @41 @40;
          ();
          ();
          @60 := @42;
          ();
          ();
          @14 := ();
          @54 := @14;
          ();
          ();
          ();
          ();
          ();
          @13 := ();
          @55 := @13;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @16 := ();
    @59 := @16;
    @37 := @60;
    @38 := libcrux_kyber.ntt.invert_ntt_montgomery 😱 [[@65]] @37;
    @60 := @38;
    @15 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @34 := { start = 0size_t; end = @15; }: core_ops_range_Range size_t;
    @35 :=
      core.iter.traits.collect.{I}.into_iter < core_ops_range_Range size_t > □
        @34;
    @33 := @35;
    while<()>
    (true)
    {
      @29 := &(@33);
      @30 := &((@29: core_ops_range_Range size_t*)[0uint32_t]);
      @31 :=
        core.iter.range.{core::ops::range::Range<A>#3}.next < size_t > □ @30;
      ();
      ();
      match @31 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @28 :=
            UNCHECKED match @31 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t.
            Some (@0) ->
             @0;
          @24 := @28;
          @5 := (@60).coefficients;
          @4 := &((@5: int32_t*)[@24]);
          @25 := (@4: int32_t*)[0uint32_t];
          @26 := (*,int32_t) @25 1441int32_t;
          ();
          @27 := libcrux_kyber.arithmetic.montgomery_reduce @26;
          ();
          ();
          ();
          @20 := @28;
          @7 :=
            ((@64: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]).coefficients;
          @6 := &((@7: int32_t*)[@20]);
          @21 := (@6: int32_t*)[0uint32_t];
          @19 := @27;
          @22 := (-,int32_t) @21 @19;
          ();
          ();
          @23 := libcrux_kyber.arithmetic.barrett_reduce @22;
          ();
          @18 := @28;
          @9 := (@60).coefficients;
          @8 := &((@9: int32_t*)[@18]);
          (@8: int32_t*)[0uint32_t] := @23;
          ();
          ();
          ();
          @11 := ();
          @32 := @11;
          ();
          ();
          ();
          ();
          ();
          @10 := ();
          @55 := @10;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @12 := ();
    @36 := @12;
    @61 := @60;
    return @61
  }

  function
  libcrux_kyber_serialize_compress_then_serialize_message
  <cg: 0><0>(
    mutable
    re(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
  ):
  uint8_t[32size_t]
  {
    let
    mutable
    uu____3241(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3243(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    i(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3245(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____3246(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____3247(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____3248(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_ChunksExact
      int32_t
    = $any
    in
    let
    mutable
    uu____3250(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3251(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3252(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option
      Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____3253(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    uu____3254(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_ChunksExact
      int32_t*
    = $any
    in
    let
    mutable
    coefficients(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    uu____3256(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    j(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3258(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      int32_t
    = $any
    in
    let
    mutable
    uu____3259(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      int32_t
    = $any
    in
    let
    mutable
    uu____3260(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      int32_t
    = $any
    in
    let
    mutable
    iter(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_slice_iter_Iter
      int32_t
    = $any
    in
    let
    mutable
    uu____3262(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3263(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_option_Option

      int32_t*
    = $any
    in
    let
    mutable
    uu____3264(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      int32_t*
    = $any
    in
    let
    mutable
    uu____3265(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      core_slice_iter_Iter
      int32_t*
    = $any
    in
    let
    mutable
    coefficient(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  int32_t*
    = $any
    in
    let
    mutable
    uu____3267(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    coefficient(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____3269(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    coefficient_compressed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t
    = $any
    in
    let
    mutable
    uu____3271(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint16_t
    = $any
    in
    let
    mutable
    uu____3272(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3273(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3274(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): int32_t
    = $any
    in
    let
    mutable
    uu____3275(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3276(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3277(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3278(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3279(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3280(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3281(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3282(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3283(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3284(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3285(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3286(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @44 := Eurydice.array_repeat < uint8_t > [[32size_t]] 0uint8_t;
    @42 := 0size_t;
    @38 := (@46).coefficients;
    @39 := Eurydice.array_to_slice < int32_t > [[256size_t]] @38;
    @40 := core.slice.{@Slice<T>}.chunks_exact < int32_t > □ @39 8size_t;
    @41 :=
      core.iter.traits.collect.{I}.into_iter
        < core_slice_iter_ChunksExact int32_t > □ @40;
    @37 := @41;
    while<()>
    (true)
    {
      @32 := &(@37);
      @33 := &((@32: core_slice_iter_ChunksExact int32_t*)[0uint32_t]);
      @34 :=
        core.slice.iter.{core::slice::iter::ChunksExact<'a,␣T>#89}.next
          < int32_t > □ @33;
      ();
      ();
      match @34 with
      | λ .  None () ->  break
      | λ .  Some (_) ->

          @31 :=
            UNCHECKED match @34 with
            | λ
            f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
            Eurydice_slice
              int32_t.
            Some (@0) ->
             @0;
          @29 := 0int32_t;
          ();
          @26 := @31;
          @27 := core.slice.{@Slice<T>}.iter < int32_t > □ @26;
          ();
          @28 :=
            core.iter.traits.collect.{I}.into_iter
              < core_slice_iter_Iter int32_t > □ @27;
          ();
          ();
          @25 := @28;
          while<()>
          (true)
          {
            @21 := &(@25);
            @22 := &((@21: core_slice_iter_Iter int32_t*)[0uint32_t]);
            @23 :=
              core.slice.iter.{core::slice::iter::Iter<'a,␣T>#181}.next
                < int32_t > □ @22;
            ();
            ();
            match @23 with
            | λ .  None () ->  break
            | λ .  Some (_) ->

                @20 :=
                  UNCHECKED match @23 with
                  | λ
                  f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

                    int32_t*.
                  Some (@0) ->
                   @0;
                @17 := (@20: int32_t*)[0uint32_t];
                @18 := libcrux_kyber.arithmetic.to_unsigned_representative @17;
                ();
                ();
                @15 := @18;
                @16 := libcrux_kyber.compress.compress_message_coefficient @15;
                ();
                ();
                @13 := @16;
                @12 := @29;
                @14 := (<<,uint8_t) @13 (@12<: uint32_t);
                ();
                ();
                @11 := @42;
                @3 := @44;
                @2 := &((@3: uint8_t*)[@11]);
                @1 := @44;
                @0 := &((@1: uint8_t*)[@11]);
                (@2: uint8_t*)[0uint32_t] :=
                  (|,uint8_t) (@0: uint8_t*)[0uint32_t] @14;
                @7 := ();
                @19 := @7;
                ();
                ();
                ();
                ();
                ();
                @29 := (+,int32_t) @29 1int32_t;
                @6 := ();
                @24 := @6;
                ();
                ();
                ();
                ();
                @4 := ();
                @36 := @4;
                continue
            | λ .  _ ->  $abort<??> (panic!)
          };
          @9 := ();
          @30 := @9;
          ();
          ();
          ();
          ();
          ();
          ();
          ();
          @42 := (+,size_t) @42 1size_t;
          @8 := ();
          @35 := @8;
          ();
          ();
          ();
          ();
          @5 := ();
          @36 := @5;
          continue
      | λ .  _ ->  $abort<??> (panic!)
    };
    @10 := ();
    @43 := @10;
    blitbuf @44 0size_t @45 0size_t 32size_t;
    return @45
  }

  function
  libcrux_kyber_ind_cpa_decrypt
  <cg: 5><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    CIPHERTEXT_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    VECTOR_U_ENCODED_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    U_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    V_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t,
    mutable
    ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
  ):
  uint8_t[32size_t]
  {
    let
    mutable
    uu____3287(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    u_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[4]
    = $any
    in
    let
    mutable
    uu____3289(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    v(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3291(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3292(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3293(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3294(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3295(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    let
    mutable
    secret_as_ntt(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement[4]
    = $any
    in
    let
    mutable
    uu____3297(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    message(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    let
    mutable
    uu____3299(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3300(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3301(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3302(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3303(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3304(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_arithmetic_PolynomialRingElement*
    = $any
    in
    let
    mutable
    uu____3305(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_arithmetic_PolynomialRingElement
    = $any
    in
    @16 := @19;
    @17 :=
      libcrux_kyber.ind_cpa.deserialize_then_decompress_u 😱
        [[@25]]
        [[@24]]
        [[@23]]
        [[@22]] @16;
    @11 := @19;
    @10 := { start = @23; }: core_ops_range_RangeFrom size_t;
    @12 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[@24]] @11 @10;
    @13 := @12;
    @14 := @13;
    @15 :=
      libcrux_kyber.serialize.deserialize_then_decompress_ring_element_v 😱
        [[@21]] @14;
    @8 := @20;
    @9 := libcrux_kyber.ind_cpa.deserialize_secret_key 😱 [[@25]] @8;
    @5 := &(@15);
    @6 := &((@5: libcrux_kyber_arithmetic_PolynomialRingElement*)[0uint32_t]);
    @3 := @9;
    @4 := @3;
    @1 := @17;
    @2 := @1;
    @7 := libcrux_kyber.matrix.compute_message 😱 [[@25]] @6 @4 @2;
    @0 := @7;
    @18 := libcrux_kyber.serialize.compress_then_serialize_message @0;
    return @18
  }

  type  libcrux_kyber_types_KyberCiphertext  =<cg: 1>
    flat
    { mutable value: uint8_t[0] }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberCiphertext<SIZE>#1}_as_ref
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[0]]*
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3306(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3307(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3308(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := ((@3: libcrux_kyber_types_KyberCiphertext[[0]]*)[0uint32_t]).value;
    @1 := @0;
    @2 := Eurydice.array_to_slice < uint8_t > [[@4]] @1;
    return @2
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberCiphertext<SIZE>#2}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
  ):
  libcrux_kyber_types_KyberCiphertext[[0]]
  {
    let
    mutable
    uu____3309(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[0]]
    = $any
    in
    let
    mutable
    uu____3310(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    blitbuf @2 0size_t @0 0size_t @3;
    @1 := { value = @0; }: libcrux_kyber_types_KyberCiphertext[[0]];
    return @1
  }


  external core_array_{@Array<T, N>#20}_clone <1>:<cg: 1>
    size_t ->

      0* ->
      0[0]


  external core_array_{@Array<T, N>#20}_clone_from <1>:<cg: 1>
    size_t ->

      0* ->

        0* ->
        ()


  external core_clone_Clone_clone <1>:<cg: 0>  0* -> 0

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberCiphertext<SIZE>#3}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
  ):
  libcrux_kyber_types_KyberCiphertext[[0]]
  {
    let
    mutable
    uu____3311(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[0]]
    = $any
    in
    let
    mutable
    uu____3312(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____3313(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := @3;
    @1 := core.array.{@Array<T,␣N>#20}.clone < uint8_t > [[@4]] @0;
    @2 := { value = @1; }: libcrux_kyber_types_KyberCiphertext[[0]];
    return @2
  }

  function
  libcrux_kyber_types_{@Array<u8, SIZE>#4}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[0]]
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____3314(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    blitbuf (@1).value 0size_t @0 0size_t @2;
    return @0
  }


  external core_array_{@Array<T, N>#7}_try_from <1>:<cg: 1>
    size_t ->
    Eurydice_slice
      0 ->
      core_result_Result
        0[0] core_array_TryFromSliceError

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberCiphertext<SIZE>#5}_try_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  core_result_Result
  libcrux_kyber_types_KyberCiphertext[[0]] core_array_TryFromSliceError
  {
    let
    mutable
    uu____3315(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_result_Result
      libcrux_kyber_types_KyberCiphertext[[0]] core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3316(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_result_Result
      uint8_t[0] core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3317(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____3319(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[0]]
    = $any
    in
    let
    mutable
    uu____3320(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    e(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3322(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_array_TryFromSliceError
    = $any
    in
    @5 := @8;
    @6 := Eurydice.slice_to_array < Eurydice_slice uint8_t > < uint8_t[0] > □ @5;
    match @6 with
    | λ .  Ok (_) ->

        blitbuf
          UNCHECKED match @6 with
          | λ
          f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0].
          Ok (@0) ->
           @0
          0size_t
          @4
          0size_t
          @9;
        blitbuf @4 0size_t @2 0size_t @9;
        @3 := { value = @2; }: libcrux_kyber_types_KyberCiphertext[[0]];
        ();
        @7 :=
          Ok
          (@3):
          core_result_Result
          libcrux_kyber_types_KyberCiphertext[[0]] core_array_TryFromSliceError;
        ();
        ()
    | λ .  Err (_) ->

        @1 :=
          UNCHECKED match @6 with
          | λ
          f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
          core_array_TryFromSliceError.
          Err (@0) ->
           @0;
        @0 := @1;
        @7 :=
          Err
          (@0):
          core_result_Result
          libcrux_kyber_types_KyberCiphertext[[0]] core_array_TryFromSliceError;
        ();
        ()
    | λ .  _ ->  $abort<??> (panic!);
    return @7
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberCiphertext<SIZE>#6}_as_slice
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[0]]*
  ):

  uint8_t*
  {
    let
    mutable
    uu____3323(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3324(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := ((@2: libcrux_kyber_types_KyberCiphertext[[0]]*)[0uint32_t]).value;
    @1 := @0;
    return @1
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberCiphertext<SIZE>#6}_split_at
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[0]]*,
    mutable
    mid(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):
  Eurydice_slice
  uint8_t * Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3325(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3326(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3327(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3328(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := ((@5: libcrux_kyber_types_KyberCiphertext[[0]]*)[0uint32_t]).value;
    @2 := Eurydice.array_to_slice < uint8_t > [[@6]] @1;
    @0 := @4;
    @3 := core.slice.{@Slice<T>}.split_at < uint8_t > □ @2 @0;
    return @3
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberCiphertext<SIZE>#6}_len
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[0]]*
  ):
  size_t
  {
    let
    mutable
    uu____3329(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := @2;
    return @0
  }

  type  libcrux_kyber_types_KyberPrivateKey  =<cg: 1>
    flat
    { mutable value: uint8_t[0] }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPrivateKey<SIZE>#7}_as_ref
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[0]]*
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3330(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3331(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3332(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := ((@3: libcrux_kyber_types_KyberPrivateKey[[0]]*)[0uint32_t]).value;
    @1 := @0;
    @2 := Eurydice.array_to_slice < uint8_t > [[@4]] @1;
    return @2
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
  ):
  libcrux_kyber_types_KyberPrivateKey[[0]]
  {
    let
    mutable
    uu____3333(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[0]]
    = $any
    in
    let
    mutable
    uu____3334(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    blitbuf @2 0size_t @0 0size_t @3;
    @1 := { value = @0; }: libcrux_kyber_types_KyberPrivateKey[[0]];
    return @1
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPrivateKey<SIZE>#9}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
  ):
  libcrux_kyber_types_KyberPrivateKey[[0]]
  {
    let
    mutable
    uu____3335(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[0]]
    = $any
    in
    let
    mutable
    uu____3336(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____3337(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := @3;
    @1 := core.array.{@Array<T,␣N>#20}.clone < uint8_t > [[@4]] @0;
    @2 := { value = @1; }: libcrux_kyber_types_KyberPrivateKey[[0]];
    return @2
  }

  function
  libcrux_kyber_types_{@Array<u8, SIZE>#10}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[0]]
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____3338(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    blitbuf (@1).value 0size_t @0 0size_t @2;
    return @0
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPrivateKey<SIZE>#11}_try_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  core_result_Result
  libcrux_kyber_types_KyberPrivateKey[[0]] core_array_TryFromSliceError
  {
    let
    mutable
    uu____3339(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_result_Result
      libcrux_kyber_types_KyberPrivateKey[[0]] core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3340(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_result_Result
      uint8_t[0] core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3341(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____3343(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[0]]
    = $any
    in
    let
    mutable
    uu____3344(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    e(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3346(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_array_TryFromSliceError
    = $any
    in
    @5 := @8;
    @6 := Eurydice.slice_to_array < Eurydice_slice uint8_t > < uint8_t[0] > □ @5;
    match @6 with
    | λ .  Ok (_) ->

        blitbuf
          UNCHECKED match @6 with
          | λ
          f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0].
          Ok (@0) ->
           @0
          0size_t
          @4
          0size_t
          @9;
        blitbuf @4 0size_t @2 0size_t @9;
        @3 := { value = @2; }: libcrux_kyber_types_KyberPrivateKey[[0]];
        ();
        @7 :=
          Ok
          (@3):
          core_result_Result
          libcrux_kyber_types_KyberPrivateKey[[0]] core_array_TryFromSliceError;
        ();
        ()
    | λ .  Err (_) ->

        @1 :=
          UNCHECKED match @6 with
          | λ
          f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
          core_array_TryFromSliceError.
          Err (@0) ->
           @0;
        @0 := @1;
        @7 :=
          Err
          (@0):
          core_result_Result
          libcrux_kyber_types_KyberPrivateKey[[0]] core_array_TryFromSliceError;
        ();
        ()
    | λ .  _ ->  $abort<??> (panic!);
    return @7
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}_as_slice
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[0]]*
  ):

  uint8_t*
  {
    let
    mutable
    uu____3347(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3348(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := ((@2: libcrux_kyber_types_KyberPrivateKey[[0]]*)[0uint32_t]).value;
    @1 := @0;
    return @1
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}_split_at
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[0]]*,
    mutable
    mid(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):
  Eurydice_slice
  uint8_t * Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3349(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3350(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3351(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3352(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := ((@5: libcrux_kyber_types_KyberPrivateKey[[0]]*)[0uint32_t]).value;
    @2 := Eurydice.array_to_slice < uint8_t > [[@6]] @1;
    @0 := @4;
    @3 := core.slice.{@Slice<T>}.split_at < uint8_t > □ @2 @0;
    return @3
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}_len
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[0]]*
  ):
  size_t
  {
    let
    mutable
    uu____3353(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := @2;
    return @0
  }

  type  libcrux_kyber_types_KyberPublicKey  =<cg: 1>
    flat
    { mutable value: uint8_t[0] }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPublicKey<SIZE>#13}_as_ref
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3354(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3355(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3356(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := ((@3: libcrux_kyber_types_KyberPublicKey[[0]]*)[0uint32_t]).value;
    @1 := @0;
    @2 := Eurydice.array_to_slice < uint8_t > [[@4]] @1;
    return @2
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPublicKey<SIZE>#14}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
  ):
  libcrux_kyber_types_KyberPublicKey[[0]]
  {
    let
    mutable
    uu____3357(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPublicKey[[0]]
    = $any
    in
    let
    mutable
    uu____3358(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    blitbuf @2 0size_t @0 0size_t @3;
    @1 := { value = @0; }: libcrux_kyber_types_KyberPublicKey[[0]];
    return @1
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPublicKey<SIZE>#15}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
  ):
  libcrux_kyber_types_KyberPublicKey[[0]]
  {
    let
    mutable
    uu____3359(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPublicKey[[0]]
    = $any
    in
    let
    mutable
    uu____3360(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____3361(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := @3;
    @1 := core.array.{@Array<T,␣N>#20}.clone < uint8_t > [[@4]] @0;
    @2 := { value = @1; }: libcrux_kyber_types_KyberPublicKey[[0]];
    return @2
  }

  function
  libcrux_kyber_types_{@Array<u8, SIZE>#16}_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPublicKey[[0]]
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____3362(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    blitbuf (@1).value 0size_t @0 0size_t @2;
    return @0
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPublicKey<SIZE>#17}_try_from
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  core_result_Result
  libcrux_kyber_types_KyberPublicKey[[0]] core_array_TryFromSliceError
  {
    let
    mutable
    uu____3363(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_result_Result
      libcrux_kyber_types_KyberPublicKey[[0]] core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3364(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_result_Result
      uint8_t[0] core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3365(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____3367(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPublicKey[[0]]
    = $any
    in
    let
    mutable
    uu____3368(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    e(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3370(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_array_TryFromSliceError
    = $any
    in
    @5 := @8;
    @6 := Eurydice.slice_to_array < Eurydice_slice uint8_t > < uint8_t[0] > □ @5;
    match @6 with
    | λ .  Ok (_) ->

        blitbuf
          UNCHECKED match @6 with
          | λ
          f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0].
          Ok (@0) ->
           @0
          0size_t
          @4
          0size_t
          @9;
        blitbuf @4 0size_t @2 0size_t @9;
        @3 := { value = @2; }: libcrux_kyber_types_KyberPublicKey[[0]];
        ();
        @7 :=
          Ok
          (@3):
          core_result_Result
          libcrux_kyber_types_KyberPublicKey[[0]] core_array_TryFromSliceError;
        ();
        ()
    | λ .  Err (_) ->

        @1 :=
          UNCHECKED match @6 with
          | λ
          f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
          core_array_TryFromSliceError.
          Err (@0) ->
           @0;
        @0 := @1;
        @7 :=
          Err
          (@0):
          core_result_Result
          libcrux_kyber_types_KyberPublicKey[[0]] core_array_TryFromSliceError;
        ();
        ()
    | λ .  _ ->  $abort<??> (panic!);
    return @7
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPublicKey<SIZE>#18}_as_slice
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*
  ):

  uint8_t*
  {
    let
    mutable
    uu____3371(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3372(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @0 := ((@2: libcrux_kyber_types_KyberPublicKey[[0]]*)[0uint32_t]).value;
    @1 := @0;
    return @1
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPublicKey<SIZE>#18}_split_at
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*,
    mutable
    mid(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):
  Eurydice_slice
  uint8_t * Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3373(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3374(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3375(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3376(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := ((@5: libcrux_kyber_types_KyberPublicKey[[0]]*)[0uint32_t]).value;
    @2 := Eurydice.array_to_slice < uint8_t > [[@6]] @1;
    @0 := @4;
    @3 := core.slice.{@Slice<T>}.split_at < uint8_t > □ @2 @0;
    return @3
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberPublicKey<SIZE>#18}_len
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*
  ):
  size_t
  {
    let
    mutable
    uu____3377(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := @2;
    return @0
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberCiphertext<SIZE>}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[0]]*,
    mutable
    index(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):

  uint8_t*
  {
    let
    mutable
    uu____3378(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3379(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3380(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3381(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3382(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @2 := @5;
    @1 := ((@6: libcrux_kyber_types_KyberCiphertext[[0]]*)[0uint32_t]).value;
    @0 := &((@1: uint8_t*)[@2]);
    @3 := &((@0: uint8_t*)[0uint32_t]);
    @4 := &((@3: uint8_t*)[0uint32_t]);
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberCiphertext<SIZE>#1}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3383(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3384(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3385(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3386(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3387(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberCiphertext[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  type  core_ops_range_RangeTo t0 =<cg: 0> flat { mutable end: 0 }


  external core_slice_index_{core::ops::range::RangeTo<usize>#5}_get <1>:<cg: 0>
    core_ops_range_RangeTo
    size_t ->
    Eurydice_slice
      0 ->
      core_option_Option
        Eurydice_slice
        0


  external core_slice_index_{core::ops::range::RangeTo<usize>#5}_get_mut <1>:<cg: 0>
    core_ops_range_RangeTo
    size_t ->
    Eurydice_slice
      0 ->
      core_option_Option
        Eurydice_slice
        0


  external core_slice_index_{core::ops::range::RangeTo<usize>#5}_index <1>:<cg: 0>
    core_ops_range_RangeTo
    size_t ->
    Eurydice_slice
      0 ->
      Eurydice_slice
        0


  external
  core_slice_index_{core::ops::range::RangeTo<usize>#5}_index_mut
  <1>:<cg: 0>
    core_ops_range_RangeTo
    size_t ->
    Eurydice_slice
      0 ->
      Eurydice_slice
        0

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberCiphertext<SIZE>#2}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeTo
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3388(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3389(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3390(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3391(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3392(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeTo
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberCiphertext[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice_to
        < uint8_t >
        < core_ops_range_RangeTo size_t > [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberCiphertext<SIZE>#3}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3393(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3394(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3395(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3396(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3397(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberCiphertext[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberPrivateKey<SIZE>#4}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[0]]*,
    mutable
    index(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):

  uint8_t*
  {
    let
    mutable
    uu____3398(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3399(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3400(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3401(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3402(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @2 := @5;
    @1 := ((@6: libcrux_kyber_types_KyberPrivateKey[[0]]*)[0uint32_t]).value;
    @0 := &((@1: uint8_t*)[@2]);
    @3 := &((@0: uint8_t*)[0uint32_t]);
    @4 := &((@3: uint8_t*)[0uint32_t]);
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberPrivateKey<SIZE>#5}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3403(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3404(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3405(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3406(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3407(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberPrivateKey[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberPrivateKey<SIZE>#6}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeTo
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3408(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3409(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3410(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3411(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3412(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeTo
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberPrivateKey[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice_to
        < uint8_t >
        < core_ops_range_RangeTo size_t > [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberPrivateKey<SIZE>#7}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3413(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3414(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3415(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3416(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3417(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberPrivateKey[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberPublicKey<SIZE>#8}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*,
    mutable
    index(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
  ):

  uint8_t*
  {
    let
    mutable
    uu____3418(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3419(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3420(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3421(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3422(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    @2 := @5;
    @1 := ((@6: libcrux_kyber_types_KyberPublicKey[[0]]*)[0uint32_t]).value;
    @0 := &((@1: uint8_t*)[@2]);
    @3 := &((@0: uint8_t*)[0uint32_t]);
    @4 := &((@3: uint8_t*)[0uint32_t]);
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberPublicKey<SIZE>#9}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3423(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3424(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3425(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3426(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3427(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberPublicKey[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberPublicKey<SIZE>#10}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeTo
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3428(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3429(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3430(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3431(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3432(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeTo
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberPublicKey[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice_to
        < uint8_t >
        < core_ops_range_RangeTo size_t > [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  function
  libcrux_kyber_types_index_impls_{libcrux_kyber::types::KyberPublicKey<SIZE>#11}_index
  <cg: 1><0>(
    mutable
    SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*,
    mutable
    range(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
  ):
  Eurydice_slice
  uint8_t
  {
    let
    mutable
    uu____3433(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3434(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3435(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3436(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3437(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    @1 := ((@6: libcrux_kyber_types_KyberPublicKey[[0]]*)[0uint32_t]).value;
    @0 := @5;
    @2 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[@7]] @1 @0;
    @3 := @2;
    @4 := @3;
    return @4
  }

  type  libcrux_kyber_types_KyberKeyPair  =<cg: 2>
    flat
    {
      mutable sk: libcrux_kyber_types_KyberPrivateKey[[1]];
      mutable pk: libcrux_kyber_types_KyberPublicKey[[0]]
    }


  external core_convert_{T#3}_into <2>:<cg: 0> 1 -> 0


  external core_convert_Into_into <2>:<cg: 0> 1 -> 0

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}_new
  <cg: 2><0>(
    mutable
    PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    sk(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[1],
    mutable
    pk(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
  ):
  libcrux_kyber_types_KyberKeyPair[[0]][[1]]
  {
    let
    mutable
    uu____3438(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberKeyPair[[0]][[1]]
    = $any
    in
    let
    mutable
    uu____3439(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[1]]
    = $any
    in
    let
    mutable
    uu____3440(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[1]
    = $any
    in
    let
    mutable
    uu____3441(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPublicKey[[0]]
    = $any
    in
    let
    mutable
    uu____3442(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    blitbuf @6 0size_t @2 0size_t @8;
    @3 :=
      core.convert.{T#3}.into
        < uint8_t[1] >
        < libcrux_kyber_types_KyberPrivateKey[[1]] > □ @2;
    blitbuf @5 0size_t @0 0size_t @7;
    @1 :=
      core.convert.{T#3}.into
        < uint8_t[0] >
        < libcrux_kyber_types_KyberPublicKey[[0]] > □ @0;
    @4 := { sk = @3; pk = @1; }: libcrux_kyber_types_KyberKeyPair[[0]][[1]];
    return @4
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}_from
  <cg: 2><0>(
    mutable
    PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    sk(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[1]],
    mutable
    pk(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPublicKey[[0]]
  ):
  libcrux_kyber_types_KyberKeyPair[[0]][[1]]
  {
    let
    mutable
    uu____3443(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberKeyPair[[0]][[1]]
    = $any
    in
    let
    mutable
    uu____3444(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[1]]
    = $any
    in
    let
    mutable
    uu____3445(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPublicKey[[0]]
    = $any
    in
    @1 := @4;
    @0 := @3;
    @2 := { sk = @1; pk = @0; }: libcrux_kyber_types_KyberKeyPair[[0]][[1]];
    return @2
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}_public_key
  <cg: 2><0>(
    mutable
    PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberKeyPair[[0]][[1]]*
  ):

  libcrux_kyber_types_KyberPublicKey[[0]]*
  {
    let
    mutable
    uu____3446(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*
    = $any
    in
    let
    mutable
    uu____3447(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*
    = $any
    in
    @0 := &(((@2: libcrux_kyber_types_KyberKeyPair[[0]][[1]]*)[0uint32_t]).pk);
    @1 := &((@0: libcrux_kyber_types_KyberPublicKey[[0]]*)[0uint32_t]);
    return @1
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}_private_key
  <cg: 2><0>(
    mutable
    PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberKeyPair[[0]][[1]]*
  ):

  libcrux_kyber_types_KyberPrivateKey[[1]]*
  {
    let
    mutable
    uu____3448(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[1]]*
    = $any
    in
    let
    mutable
    uu____3449(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[1]]*
    = $any
    in
    @0 := &(((@2: libcrux_kyber_types_KyberKeyPair[[0]][[1]]*)[0uint32_t]).sk);
    @1 := &((@0: libcrux_kyber_types_KyberPrivateKey[[1]]*)[0uint32_t]);
    return @1
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}_pk
  <cg: 2><0>(
    mutable
    PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberKeyPair[[0]][[1]]*
  ):

  uint8_t*
  {
    let
    mutable
    uu____3450(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3451(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3452(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[0]]*
    = $any
    in
    @0 := &(((@3: libcrux_kyber_types_KyberKeyPair[[0]][[1]]*)[0uint32_t]).pk);
    @1 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberPublicKey<SIZE>#18}.as_slice
        😱 [[@4]] @0;
    @2 := @1;
    return @2
  }

  function
  libcrux_kyber_types_{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE, PUBLIC_KEY_SIZE>}_sk
  <cg: 2><0>(
    mutable
    PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    self(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberKeyPair[[0]][[1]]*
  ):

  uint8_t*
  {
    let
    mutable
    uu____3453(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3454(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3455(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[1]]*
    = $any
    in
    @0 := &(((@3: libcrux_kyber_types_KyberKeyPair[[0]][[1]]*)[0uint32_t]).sk);
    @1 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}.as_slice
        😱 [[@5]] @0;
    @2 := @1;
    return @2
  }

  const <0>size_t libcrux_kyber_kyber1024_RANK_1024 =
  let
    mutable
    uu____3456(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 4size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber1024_RANKED_BYTES_PER_RING_ELEMENT_1024 =
  let
    mutable
    uu____3457(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3458(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3459(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3460(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber1024.RANK_1024;
    @0 := libcrux_kyber.constants.BITS_PER_RING_ELEMENT;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber1024_T_AS_NTT_ENCODED_SIZE_1024 =
  let
    mutable
    uu____3461(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3462(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3463(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3464(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3465(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3466(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @2 := libcrux_kyber.kyber1024.RANK_1024;
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @3 := (*,size_t) @2 @1;
    @0 := libcrux_kyber.constants.BITS_PER_COEFFICIENT;
    @4 := (*,size_t) @3 @0;
    @5 := (/,size_t) @4 8size_t;
    return @5

  const <0>size_t libcrux_kyber_kyber1024_VECTOR_U_COMPRESSION_FACTOR_1024 =
  let
    mutable
    uu____3467(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 11size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber1024_C1_BLOCK_SIZE_1024 =
  let
    mutable
    uu____3468(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3469(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3470(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3471(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @0 := libcrux_kyber.kyber1024.VECTOR_U_COMPRESSION_FACTOR_1024;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber1024_C1_SIZE_1024 =
  let
    mutable
    uu____3472(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3473(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3474(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber1024.C1_BLOCK_SIZE_1024;
    @0 := libcrux_kyber.kyber1024.RANK_1024;
    @2 := (*,size_t) @1 @0;
    return @2

  const <0>size_t libcrux_kyber_kyber1024_VECTOR_V_COMPRESSION_FACTOR_1024 =
  let
    mutable
    uu____3475(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 5size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber1024_C2_SIZE_1024 =
  let
    mutable
    uu____3476(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3477(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3478(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3479(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @0 := libcrux_kyber.kyber1024.VECTOR_V_COMPRESSION_FACTOR_1024;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber1024_CPA_PKE_SECRET_KEY_SIZE_1024 =
  let
    mutable
    uu____3480(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3481(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3482(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3483(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3484(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3485(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @2 := libcrux_kyber.kyber1024.RANK_1024;
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @3 := (*,size_t) @2 @1;
    @0 := libcrux_kyber.constants.BITS_PER_COEFFICIENT;
    @4 := (*,size_t) @3 @0;
    @5 := (/,size_t) @4 8size_t;
    return @5

  const <0>size_t libcrux_kyber_kyber1024_CPA_PKE_PUBLIC_KEY_SIZE_1024 =
  let
    mutable
    uu____3486(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3487(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber1024.T_AS_NTT_ENCODED_SIZE_1024;
    @1 := (+,size_t) @0 32size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber1024_CPA_PKE_CIPHERTEXT_SIZE_1024 =
  let
    mutable
    uu____3488(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3489(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3490(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber1024.C1_SIZE_1024;
    @0 := libcrux_kyber.kyber1024.C2_SIZE_1024;
    @2 := (+,size_t) @1 @0;
    return @2

  const <0>size_t libcrux_kyber_kyber1024_SECRET_KEY_SIZE_1024 =
  let
    mutable
    uu____3491(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3492(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3493(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3494(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3495(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3496(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3497(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @3 := libcrux_kyber.kyber1024.CPA_PKE_SECRET_KEY_SIZE_1024;
    @2 := libcrux_kyber.kyber1024.CPA_PKE_PUBLIC_KEY_SIZE_1024;
    @4 := (+,size_t) @3 @2;
    @1 := libcrux_kyber.constants.H_DIGEST_SIZE;
    @5 := (+,size_t) @4 @1;
    @0 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @6 := (+,size_t) @5 @0;
    return @6

  const <0>size_t libcrux_kyber_kyber1024_ETA1 =
  let
    mutable
    uu____3498(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 2size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber1024_ETA1_RANDOMNESS_SIZE =
  let
    mutable
    uu____3499(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3500(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber1024.ETA1;
    @1 := (*,size_t) @0 64size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber1024_ETA2 =
  let
    mutable
    uu____3501(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 2size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber1024_ETA2_RANDOMNESS_SIZE =
  let
    mutable
    uu____3502(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3503(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber1024.ETA2;
    @1 := (*,size_t) @0 64size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber1024_IMPLICIT_REJECTION_HASH_INPUT_SIZE =
  let
    mutable
    uu____3504(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3505(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3506(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @0 := libcrux_kyber.kyber1024.CPA_PKE_CIPHERTEXT_SIZE_1024;
    @2 := (+,size_t) @1 @0;
    return @2

  function
  libcrux_kyber_serialize_kem_secret_key
  <cg: 1><0>(
    mutable
    SERIALIZED_KEY_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    private_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t,
    mutable
    public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t,
    mutable
    implicit_rejection_value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
  ):
  uint8_t[0]
  {
    let
    mutable
    uu____3507(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    out(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    pointer(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3510(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3511(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3512(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3513(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3514(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____3515(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3516(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3517(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3518(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3519(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3520(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3521(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3522(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3523(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3524(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3525(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3526(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3527(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____3528(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3529(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3530(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3531(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3532(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3533(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3534(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3535(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3536(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3537(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3538(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3539(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3540(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____3541(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3542(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3543(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3544(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3545(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3546(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3547(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3548(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3549(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3550(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3551(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3552(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3553(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    uu____3554(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3555(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3556(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3557(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3558(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3559(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3560(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3561(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @53 := Eurydice.array_repeat < uint8_t > [[@58]] 0uint8_t;
    @52 := 0size_t;
    @48 := @53;
    @46 := @52;
    @44 := @52;
    @42 := @57;
    @43 := core.slice.{@Slice<T>}.len < uint8_t > □ @42;
    @45 := (+,size_t) @44 @43;
    @47 := { start = @46; end = @45; }: core_ops_range_Range size_t;
    @49 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@58]] @48 @47;
    @50 := @49;
    @41 := @57;
    @51 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @50 @41;
    @39 := @57;
    @40 := core.slice.{@Slice<T>}.len < uint8_t > □ @39;
    @52 := (+,size_t) @52 @40;
    @35 := @53;
    @33 := @52;
    @31 := @52;
    @29 := @56;
    @30 := core.slice.{@Slice<T>}.len < uint8_t > □ @29;
    @32 := (+,size_t) @31 @30;
    @34 := { start = @33; end = @32; }: core_ops_range_Range size_t;
    @36 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@58]] @35 @34;
    @37 := @36;
    @28 := @56;
    @38 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @37 @28;
    @26 := @56;
    @27 := core.slice.{@Slice<T>}.len < uint8_t > □ @26;
    @52 := (+,size_t) @52 @27;
    @22 := @53;
    @20 := @52;
    @18 := @52;
    @1 := libcrux_kyber.constants.H_DIGEST_SIZE;
    @19 := (+,size_t) @18 @1;
    @21 := { start = @20; end = @19; }: core_ops_range_Range size_t;
    @23 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@58]] @22 @21;
    @24 := @23;
    @13 := @56;
    @14 := libcrux_kyber.hash_functions.H @13;
    @15 := @14;
    @16 := @15;
    @17 := Eurydice.array_to_slice < uint8_t > [[32size_t]] @16;
    @25 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @24 @17;
    @0 := libcrux_kyber.constants.H_DIGEST_SIZE;
    @52 := (+,size_t) @52 @0;
    @9 := @53;
    @7 := @52;
    @5 := @52;
    @3 := @55;
    @4 := core.slice.{@Slice<T>}.len < uint8_t > □ @3;
    @6 := (+,size_t) @5 @4;
    @8 := { start = @7; end = @6; }: core_ops_range_Range size_t;
    @10 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[@58]] @9 @8;
    @11 := @10;
    @2 := @55;
    @12 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @11 @2;
    blitbuf @53 0size_t @54 0size_t @58;
    return @54
  }

  function
  libcrux_kyber_generate_keypair
  <cg: 7><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    CPA_PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PRIVATE_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    BYTES_PER_RING_ELEMENT(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    ETA1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA1_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
  ):
  libcrux_kyber_types_KyberKeyPair[[3]][[4]]
  {
    let
    mutable
    uu____3562(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberKeyPair[[3]][[4]]
    = $any
    in
    let
    mutable
    ind_cpa_keypair_randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3564(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3565(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3566(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_Range
      size_t
    = $any
    in
    let
    mutable
    implicit_rejection_value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3568(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3569(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3570(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    let
    mutable
    ind_cpa_private_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[5]
    = $any
    in
    let
    mutable
    public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[3]
    = $any
    in
    let
    mutable
    uu____3573(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[5] * uint8_t[3]
    = $any
    in
    let
    mutable
    uu____3574(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    secret_key_serialized(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[4]
    = $any
    in
    let
    mutable
    uu____3576(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3577(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3578(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3579(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3580(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3581(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3582(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    private_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[4]]
    = $any
    in
    let
    mutable
    uu____3584(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[4]
    = $any
    in
    let
    mutable
    uu____3585(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPrivateKey[[4]]
    = $any
    in
    let
    mutable
    uu____3586(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberPublicKey[[3]]
    = $any
    in
    let
    mutable
    uu____3587(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[3]
    = $any
    in
    let
    mutable
    uu____3588(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3589(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @24 := @28;
    @1 := libcrux_kyber.constants.CPA_PKE_KEY_GENERATION_SEED_SIZE;
    @23 := { start = 0size_t; end = @1; }: core_ops_range_Range size_t;
    @25 :=
      Eurydice.array_to_subslice < uint8_t > < core_ops_range_Range size_t >
        [[64size_t]] @24 @23;
    @26 := @25;
    @20 := @28;
    @0 := libcrux_kyber.constants.CPA_PKE_KEY_GENERATION_SEED_SIZE;
    @19 := { start = @0; }: core_ops_range_RangeFrom size_t;
    @21 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[64size_t]] @20 @19;
    @22 := @21;
    @15 := @26;
    @16 :=
      libcrux_kyber.ind_cpa.generate_keypair 😱
        [[@35]]
        [[@34]]
        [[@32]]
        [[@31]]
        [[@30]]
        [[@29]] @15;
    blitbuf
      match @16 with
      | λ
      uu____3590(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      uint8_t[5].
      (@0, _) ->
       @0
      0size_t
      @18
      0size_t
      @34;
    blitbuf
      match @16 with
      | λ
      uu____3591(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      uint8_t[3].
      (_, @0) ->
       @0
      0size_t
      @17
      0size_t
      @32;
    @11 := @18;
    @12 := @11;
    @13 := Eurydice.array_to_slice < uint8_t > [[@34]] @12;
    @8 := @17;
    @9 := @8;
    @10 := Eurydice.array_to_slice < uint8_t > [[@32]] @9;
    @7 := @22;
    @14 := libcrux_kyber.serialize_kem_secret_key 😱 [[@33]] @13 @10 @7;
    blitbuf @14 0size_t @5 0size_t @33;
    @6 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberPrivateKey<SIZE>#8}.from 😱
        [[@33]] @5;
    @4 := @6;
    blitbuf @17 0size_t @2 0size_t @32;
    @3 :=
      core.convert.{T#3}.into
        < uint8_t[3] >
        < libcrux_kyber_types_KyberPublicKey[[3]] > □ @2;
    @27 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberKeyPair<PRIVATE_KEY_SIZE,␣PUBLIC_KEY_SIZE>}.from
        😱 [[@33]] [[@32]] @4 @3;
    return @27
  }

  function
  libcrux_kyber_kyber1024_generate_key_pair_1024
  <cg: 0><0>(
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
  ):
  libcrux_kyber_types_KyberKeyPair[[1568size_t]][[3168size_t]]
  {
    let
    mutable
    uu____3592(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberKeyPair[[1568size_t]][[3168size_t]]
    = $any
    in
    let
    mutable
    uu____3593(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    blitbuf @2 0size_t @0 0size_t 64size_t;
    @1 :=
      libcrux_kyber.generate_keypair 😱
        [[4size_t]]
        [[1536size_t]]
        [[3168size_t]]
        [[1568size_t]]
        [[1536size_t]]
        [[2size_t]]
        [[128size_t]] @0;
    return @1
  }

  function
  libcrux_kyber_encapsulate
  <cg: 13><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    CIPHERTEXT_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    T_AS_NTT_ENCODED_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    C1_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    C2_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    VECTOR_U_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    VECTOR_V_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    VECTOR_U_BLOCK_LEN(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    ETA1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA1_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    ETA2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA2_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[10]]*,
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
  ):
  libcrux_kyber_types_KyberCiphertext[[11]] * uint8_t[32size_t]
  {
    let
    mutable
    uu____3594(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[11]] * uint8_t[32size_t]
    = $any
    in
    let
    mutable
    to_hash(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    let
    mutable
    uu____3596(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3597(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3598(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3599(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3600(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3601(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3602(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3603(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    let
    mutable
    uu____3604(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3605(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3606(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3607(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3608(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3609(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3610(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3611(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[10]]*
    = $any
    in
    let
    mutable
    hashed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    let
    mutable
    uu____3613(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3614(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3615(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    shared_secret(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    pseudorandomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3618(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3619(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3620(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[11]
    = $any
    in
    let
    mutable
    uu____3622(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3623(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3624(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3625(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[10]]*
    = $any
    in
    let
    mutable
    uu____3626(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3627(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    shared_secret(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3629(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_result_Result
      uint8_t[32size_t] core_array_TryFromSliceError
    = $any
    in
    let
    mutable
    uu____3630(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    ss(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3632(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[11]]
    = $any
    in
    let
    mutable
    uu____3633(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[11]
    = $any
    in
    let
    mutable
    uu____3634(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3635(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3636(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @38 := @43;
    @39 := @38;
    @40 := Eurydice.array_to_slice < uint8_t > [[32size_t]] @39;
    @41 := libcrux_kyber.ind_cpa.into_padded_array 😱 [[64size_t]] @40;
    @34 := @41;
    @1 := libcrux_kyber.constants.H_DIGEST_SIZE;
    @33 := { start = @1; }: core_ops_range_RangeFrom size_t;
    @35 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[64size_t]] @34 @33;
    @36 := @35;
    @25 := &((@44: libcrux_kyber_types_KyberPublicKey[[10]]*)[0uint32_t]);
    @26 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberPublicKey<SIZE>#18}.as_slice
        😱 [[@55]] @25;
    @27 := @26;
    @28 := Eurydice.array_to_slice < uint8_t > [[@55]] @27;
    @29 := libcrux_kyber.hash_functions.H @28;
    @30 := @29;
    @31 := @30;
    @32 := Eurydice.array_to_slice < uint8_t > [[32size_t]] @31;
    @37 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @36 @32;
    @21 := @41;
    @22 := @21;
    @23 := Eurydice.array_to_slice < uint8_t > [[64size_t]] @22;
    @24 := libcrux_kyber.hash_functions.G @23;
    @16 := @24;
    @17 := Eurydice.array_to_slice < uint8_t > [[64size_t]] @16;
    @0 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @18 := core.slice.{@Slice<T>}.split_at < uint8_t > □ @17 @0;
    @20 :=
      match @18 with
      | λ
      uu____3637(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (@0, _) ->
       @0;
    @19 :=
      match @18 with
      | λ
      uu____3638(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (_, @0) ->
       @0;
    @11 := &((@44: libcrux_kyber_types_KyberPublicKey[[10]]*)[0uint32_t]);
    @12 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberPublicKey<SIZE>#18}.as_slice
        😱 [[@55]] @11;
    @13 := @12;
    @14 := Eurydice.array_to_slice < uint8_t > [[@55]] @13;
    blitbuf @43 0size_t @10 0size_t 32size_t;
    @9 := @19;
    @15 :=
      libcrux_kyber.ind_cpa.encrypt 😱
        [[@57]]
        [[@56]]
        [[@54]]
        [[@53]]
        [[@52]]
        [[@51]]
        [[@50]]
        [[@49]]
        [[@48]]
        [[@47]]
        [[@46]]
        [[@45]] @14 @10 @9;
    @6 := @20;
    @7 :=
      Eurydice.slice_to_array < Eurydice_slice uint8_t > < uint8_t[32size_t] > □
        @6;
    match @7 with
    | λ .  Ok (_) ->  ()
    | λ .  Err (_) ->  $abort<??> (panic!)
    | λ .  _ ->  $abort<??> (panic!);
    blitbuf
      UNCHECKED match @7 with
      | λ
      f0(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      uint8_t[32size_t].
      Ok (@0) ->
       @0
      0size_t
      @5
      0size_t
      32size_t;
    blitbuf @5 0size_t @8 0size_t 32size_t;
    blitbuf @15 0size_t @3 0size_t @56;
    @4 :=
      core.convert.{T#3}.into
        < uint8_t[11] >
        < libcrux_kyber_types_KyberCiphertext[[11]] > □ @3;
    blitbuf @8 0size_t @2 0size_t 32size_t;
    @42 := (@4, @2);
    return @42
  }

  function
  libcrux_kyber_kyber1024_encapsulate_1024
  <cg: 0><0>(
    mutable
    public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[1568size_t]]*,
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
  ):
  libcrux_kyber_types_KyberCiphertext[[1568size_t]] * uint8_t[32size_t]
  {
    let
    mutable
    uu____3639(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[1568size_t]] * uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3640(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[1568size_t]]*
    = $any
    in
    let
    mutable
    uu____3641(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    @1 := &((@4: libcrux_kyber_types_KyberPublicKey[[1568size_t]]*)[0uint32_t]);
    blitbuf @3 0size_t @0 0size_t 32size_t;
    @2 :=
      libcrux_kyber.encapsulate 😱
        [[4size_t]]
        [[1568size_t]]
        [[1568size_t]]
        [[1536size_t]]
        [[1408size_t]]
        [[160size_t]]
        [[11size_t]]
        [[5size_t]]
        [[352size_t]]
        [[2size_t]]
        [[128size_t]]
        [[2size_t]]
        [[128size_t]] @1 @0;
    return @2
  }


  external core_convert_AsRef_as_ref <2>:<cg: 0>  1* ->  0*

  function
  libcrux_kyber_decapsulate
  <cg: 16><0>(
    mutable
    K(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    SECRET_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    CPA_SECRET_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    PUBLIC_KEY_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    CIPHERTEXT_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    T_AS_NTT_ENCODED_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    C1_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    C2_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    VECTOR_U_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    VECTOR_V_COMPRESSION_FACTOR(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    C1_BLOCK_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA1(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA1_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    ETA2(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t,
    mutable
    ETA2_RANDOMNESS_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    IMPLICIT_REJECTION_HASH_INPUT_SIZE(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    size_t,
    mutable
    secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[14]]*,
    mutable
    ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[11]]*
  ):
  uint8_t[32size_t]
  {
    let
    mutable
    uu____3642(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    ind_cpa_secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3645(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3646(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[14]]*
    = $any
    in
    let
    mutable
    ind_cpa_public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3649(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3650(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    ind_cpa_public_key_hash(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    implicit_rejection_value(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3653(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3654(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    decrypted(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3656(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3657(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3658(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    to_hash(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    let
    mutable
    uu____3660(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3661(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3662(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3663(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3664(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3665(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3666(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3667(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    let
    mutable
    uu____3668(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    hashed(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    let
    mutable
    uu____3670(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3671(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3672(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    shared_secret(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    pseudorandomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3675(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t * Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3676(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3677(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    to_hash(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t[0]
    = $any
    in
    let
    mutable
    uu____3679(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3680(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      Eurydice_slice
      uint8_t*
    = $any
    in
    let
    mutable
    uu____3681(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): ()
    = $any
    in
    let
    mutable
    uu____3682(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3683(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3684(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3685(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    core_ops_range_RangeFrom
      size_t
    = $any
    in
    let
    mutable
    uu____3686(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3687(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3688(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[11]]*
    = $any
    in
    let
    mutable
    implicit_rejection_shared_secret(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3690(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3691(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3692(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    expected_ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[11]
    = $any
    in
    let
    mutable
    uu____3694(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3695(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3696(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    selector(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3698(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3699(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3700(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[11]]*
    = $any
    in
    let
    mutable
    uu____3701(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3702(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3703(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3704(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3705(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    Eurydice_slice
      uint8_t
    = $any
    in
    let
    mutable
    uu____3706(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3707(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):  uint8_t*
    = $any
    in
    let
    mutable
    uu____3708(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): uint8_t
    = $any
    in
    let
    mutable
    uu____3709(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3710(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3711(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3712(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @66 := &((@72: libcrux_kyber_types_KyberPrivateKey[[14]]*)[0uint32_t]);
    @67 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberPrivateKey<SIZE>#12}.split_at
        😱 [[@87]] @66 @86;
    @69 :=
      match @67 with
      | λ
      uu____3713(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (@0, _) ->
       @0;
    @68 :=
      match @67 with
      | λ
      uu____3714(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (_, @0) ->
       @0;
    @62 := @68;
    @63 := core.slice.{@Slice<T>}.split_at < uint8_t > □ @62 @85;
    @65 :=
      match @63 with
      | λ
      uu____3715(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (@0, _) ->
       @0;
    @64 :=
      match @63 with
      | λ
      uu____3716(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (_, @0) ->
       @0;
    @58 := @64;
    @3 := libcrux_kyber.constants.H_DIGEST_SIZE;
    @59 := core.slice.{@Slice<T>}.split_at < uint8_t > □ @58 @3;
    @61 :=
      match @59 with
      | λ
      uu____3717(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (@0, _) ->
       @0;
    @60 :=
      match @59 with
      | λ
      uu____3718(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (_, @0) ->
       @0;
    @56 := @69;
    @54 := ((@71: libcrux_kyber_types_KyberCiphertext[[11]]*)[0uint32_t]).value;
    @55 := @54;
    @57 :=
      libcrux_kyber.ind_cpa.decrypt 😱 [[@88]] [[@84]] [[@82]] [[@80]] [[@79]]
        @56
        @55;
    @50 := @57;
    @51 := @50;
    @52 := Eurydice.array_to_slice < uint8_t > [[32size_t]] @51;
    @53 := libcrux_kyber.ind_cpa.into_padded_array 😱 [[64size_t]] @52;
    @46 := @53;
    @2 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @45 := { start = @2; }: core_ops_range_RangeFrom size_t;
    @47 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[64size_t]] @46 @45;
    @48 := @47;
    @44 := @61;
    @49 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @48 @44;
    @40 := @53;
    @41 := @40;
    @42 := Eurydice.array_to_slice < uint8_t > [[64size_t]] @41;
    @43 := libcrux_kyber.hash_functions.G @42;
    @35 := @43;
    @36 := Eurydice.array_to_slice < uint8_t > [[64size_t]] @35;
    @1 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @37 := core.slice.{@Slice<T>}.split_at < uint8_t > □ @36 @1;
    @39 :=
      match @37 with
      | λ
      uu____3719(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (@0, _) ->
       @0;
    @38 :=
      match @37 with
      | λ
      uu____3720(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
      Eurydice_slice
        uint8_t.
      (_, @0) ->
       @0;
    @32 := &(@60);
    @33 := (@32: Eurydice_slice uint8_t*)[0uint32_t];
    @34 := libcrux_kyber.ind_cpa.into_padded_array 😱 [[@73]] @33;
    @28 := @34;
    @0 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @27 := { start = @0; }: core_ops_range_RangeFrom size_t;
    @29 :=
      Eurydice.array_to_subslice_from
        < uint8_t >
        < core_ops_range_RangeFrom size_t > [[@73]] @28 @27;
    @30 := @29;
    @24 := &((@71: libcrux_kyber_types_KyberCiphertext[[11]]*)[0uint32_t]);
    @25 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberCiphertext<SIZE>#1}.as_ref
        😱 [[@84]] @24;
    @26 := @25;
    @31 := core.slice.{@Slice<T>}.copy_from_slice < uint8_t > □ @30 @26;
    @20 := @34;
    @21 := @20;
    @22 := Eurydice.array_to_slice < uint8_t > [[@73]] @21;
    @23 := libcrux_kyber.hash_functions.PRF 😱 [[32size_t]] @22;
    @18 := @65;
    blitbuf @57 0size_t @17 0size_t 32size_t;
    @16 := @38;
    @19 :=
      libcrux_kyber.ind_cpa.encrypt 😱
        [[@88]]
        [[@84]]
        [[@83]]
        [[@82]]
        [[@81]]
        [[@80]]
        [[@79]]
        [[@78]]
        [[@77]]
        [[@76]]
        [[@75]]
        [[@74]] @18 @17 @16;
    @12 := &((@71: libcrux_kyber_types_KyberCiphertext[[11]]*)[0uint32_t]);
    @13 :=
      libcrux_kyber.types.{libcrux_kyber::types::KyberCiphertext<SIZE>#1}.as_ref
        😱 [[@84]] @12;
    @14 := @13;
    @9 := @19;
    @10 := @9;
    @11 := Eurydice.array_to_slice < uint8_t > [[@84]] @10;
    @15 :=
      libcrux_kyber.constant_time_ops.compare_ciphertexts_in_constant_time 😱
        [[@84]] @14 @11;
    @8 := @39;
    @5 := @23;
    @6 := @5;
    @7 := Eurydice.array_to_slice < uint8_t > [[32size_t]] @6;
    @4 := @15;
    @70 :=
      libcrux_kyber.constant_time_ops.select_shared_secret_in_constant_time
        @8
        @7
        @4;
    return @70
  }

  function
  libcrux_kyber_kyber1024_decapsulate_1024
  <cg: 0><0>(
    mutable
    secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[3168size_t]]*,
    mutable
    ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[1568size_t]]*
  ):
  uint8_t[32size_t]
  {
    let
    mutable
    uu____3721(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3722(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[3168size_t]]*
    = $any
    in
    let
    mutable
    uu____3723(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[1568size_t]]*
    = $any
    in
    @1 := &((@4: libcrux_kyber_types_KyberPrivateKey[[3168size_t]]*)[0uint32_t]);
    @0 := &((@3: libcrux_kyber_types_KyberCiphertext[[1568size_t]]*)[0uint32_t]);
    @2 :=
      libcrux_kyber.decapsulate 😱
        [[4size_t]]
        [[3168size_t]]
        [[1536size_t]]
        [[1568size_t]]
        [[1568size_t]]
        [[1536size_t]]
        [[1408size_t]]
        [[160size_t]]
        [[11size_t]]
        [[5size_t]]
        [[352size_t]]
        [[2size_t]]
        [[128size_t]]
        [[2size_t]]
        [[128size_t]]
        [[1600size_t]] @1 @0;
    return @2
  }

  const <0>size_t libcrux_kyber_kyber512_RANK_512 =
  let
    mutable
    uu____3724(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 2size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber512_RANKED_BYTES_PER_RING_ELEMENT_512 =
  let
    mutable
    uu____3725(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3726(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3727(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3728(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber512.RANK_512;
    @0 := libcrux_kyber.constants.BITS_PER_RING_ELEMENT;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber512_T_AS_NTT_ENCODED_SIZE_512 =
  let
    mutable
    uu____3729(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3730(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3731(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3732(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3733(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3734(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @2 := libcrux_kyber.kyber512.RANK_512;
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @3 := (*,size_t) @2 @1;
    @0 := libcrux_kyber.constants.BITS_PER_COEFFICIENT;
    @4 := (*,size_t) @3 @0;
    @5 := (/,size_t) @4 8size_t;
    return @5

  const <0>size_t libcrux_kyber_kyber512_VECTOR_U_COMPRESSION_FACTOR_512 =
  let
    mutable
    uu____3735(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 10size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber512_C1_BLOCK_SIZE_512 =
  let
    mutable
    uu____3736(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3737(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3738(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3739(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @0 := libcrux_kyber.kyber512.VECTOR_U_COMPRESSION_FACTOR_512;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber512_C1_SIZE_512 =
  let
    mutable
    uu____3740(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3741(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3742(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber512.C1_BLOCK_SIZE_512;
    @0 := libcrux_kyber.kyber512.RANK_512;
    @2 := (*,size_t) @1 @0;
    return @2

  const <0>size_t libcrux_kyber_kyber512_VECTOR_V_COMPRESSION_FACTOR_512 =
  let
    mutable
    uu____3743(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 4size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber512_C2_SIZE_512 =
  let
    mutable
    uu____3744(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3745(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3746(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3747(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @0 := libcrux_kyber.kyber512.VECTOR_V_COMPRESSION_FACTOR_512;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber512_CPA_PKE_SECRET_KEY_SIZE_512 =
  let
    mutable
    uu____3748(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3749(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3750(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3751(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3752(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3753(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @2 := libcrux_kyber.kyber512.RANK_512;
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @3 := (*,size_t) @2 @1;
    @0 := libcrux_kyber.constants.BITS_PER_COEFFICIENT;
    @4 := (*,size_t) @3 @0;
    @5 := (/,size_t) @4 8size_t;
    return @5

  const <0>size_t libcrux_kyber_kyber512_CPA_PKE_PUBLIC_KEY_SIZE_512 =
  let
    mutable
    uu____3754(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3755(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber512.T_AS_NTT_ENCODED_SIZE_512;
    @1 := (+,size_t) @0 32size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber512_CPA_PKE_CIPHERTEXT_SIZE_512 =
  let
    mutable
    uu____3756(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3757(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3758(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber512.C1_SIZE_512;
    @0 := libcrux_kyber.kyber512.C2_SIZE_512;
    @2 := (+,size_t) @1 @0;
    return @2

  const <0>size_t libcrux_kyber_kyber512_SECRET_KEY_SIZE_512 =
  let
    mutable
    uu____3759(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3760(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3761(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3762(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3763(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3764(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3765(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @3 := libcrux_kyber.kyber512.CPA_PKE_SECRET_KEY_SIZE_512;
    @2 := libcrux_kyber.kyber512.CPA_PKE_PUBLIC_KEY_SIZE_512;
    @4 := (+,size_t) @3 @2;
    @1 := libcrux_kyber.constants.H_DIGEST_SIZE;
    @5 := (+,size_t) @4 @1;
    @0 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @6 := (+,size_t) @5 @0;
    return @6

  const <0>size_t libcrux_kyber_kyber512_ETA1 =
  let
    mutable
    uu____3766(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 3size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber512_ETA1_RANDOMNESS_SIZE =
  let
    mutable
    uu____3767(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3768(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber512.ETA1;
    @1 := (*,size_t) @0 64size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber512_ETA2 =
  let
    mutable
    uu____3769(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 2size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber512_ETA2_RANDOMNESS_SIZE =
  let
    mutable
    uu____3770(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3771(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber512.ETA2;
    @1 := (*,size_t) @0 64size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber512_IMPLICIT_REJECTION_HASH_INPUT_SIZE =
  let
    mutable
    uu____3772(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3773(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3774(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @0 := libcrux_kyber.kyber512.CPA_PKE_CIPHERTEXT_SIZE_512;
    @2 := (+,size_t) @1 @0;
    return @2

  function
  libcrux_kyber_kyber512_generate_key_pair_512
  <cg: 0><0>(
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
  ):
  libcrux_kyber_types_KyberKeyPair[[800size_t]][[1632size_t]]
  {
    let
    mutable
    uu____3775(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberKeyPair[[800size_t]][[1632size_t]]
    = $any
    in
    let
    mutable
    uu____3776(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    blitbuf @2 0size_t @0 0size_t 64size_t;
    @1 :=
      libcrux_kyber.generate_keypair 😱
        [[2size_t]]
        [[768size_t]]
        [[1632size_t]]
        [[800size_t]]
        [[768size_t]]
        [[3size_t]]
        [[192size_t]] @0;
    return @1
  }

  function
  libcrux_kyber_kyber512_encapsulate_512
  <cg: 0><0>(
    mutable
    public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[800size_t]]*,
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
  ):
  libcrux_kyber_types_KyberCiphertext[[768size_t]] * uint8_t[32size_t]
  {
    let
    mutable
    uu____3777(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[768size_t]] * uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3778(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[800size_t]]*
    = $any
    in
    let
    mutable
    uu____3779(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    @1 := &((@4: libcrux_kyber_types_KyberPublicKey[[800size_t]]*)[0uint32_t]);
    blitbuf @3 0size_t @0 0size_t 32size_t;
    @2 :=
      libcrux_kyber.encapsulate 😱
        [[2size_t]]
        [[768size_t]]
        [[800size_t]]
        [[768size_t]]
        [[640size_t]]
        [[128size_t]]
        [[10size_t]]
        [[4size_t]]
        [[320size_t]]
        [[3size_t]]
        [[192size_t]]
        [[2size_t]]
        [[128size_t]] @1 @0;
    return @2
  }

  function
  libcrux_kyber_kyber512_decapsulate_512
  <cg: 0><0>(
    mutable
    secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[1632size_t]]*,
    mutable
    ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[768size_t]]*
  ):
  uint8_t[32size_t]
  {
    let
    mutable
    uu____3780(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3781(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[1632size_t]]*
    = $any
    in
    let
    mutable
    uu____3782(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[768size_t]]*
    = $any
    in
    @1 := &((@4: libcrux_kyber_types_KyberPrivateKey[[1632size_t]]*)[0uint32_t]);
    @0 := &((@3: libcrux_kyber_types_KyberCiphertext[[768size_t]]*)[0uint32_t]);
    @2 :=
      libcrux_kyber.decapsulate 😱
        [[2size_t]]
        [[1632size_t]]
        [[768size_t]]
        [[800size_t]]
        [[768size_t]]
        [[768size_t]]
        [[640size_t]]
        [[128size_t]]
        [[10size_t]]
        [[4size_t]]
        [[320size_t]]
        [[3size_t]]
        [[192size_t]]
        [[2size_t]]
        [[128size_t]]
        [[800size_t]] @1 @0;
    return @2
  }

  const <0>size_t libcrux_kyber_kyber768_RANK_768 =
  let
    mutable
    uu____3783(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 3size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber768_RANKED_BYTES_PER_RING_ELEMENT_768 =
  let
    mutable
    uu____3784(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3785(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3786(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3787(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber768.RANK_768;
    @0 := libcrux_kyber.constants.BITS_PER_RING_ELEMENT;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber768_T_AS_NTT_ENCODED_SIZE_768 =
  let
    mutable
    uu____3788(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3789(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3790(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3791(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3792(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3793(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @2 := libcrux_kyber.kyber768.RANK_768;
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @3 := (*,size_t) @2 @1;
    @0 := libcrux_kyber.constants.BITS_PER_COEFFICIENT;
    @4 := (*,size_t) @3 @0;
    @5 := (/,size_t) @4 8size_t;
    return @5

  const <0>size_t libcrux_kyber_kyber768_VECTOR_U_COMPRESSION_FACTOR_768 =
  let
    mutable
    uu____3794(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 10size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber768_C1_BLOCK_SIZE_768 =
  let
    mutable
    uu____3795(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3796(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3797(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3798(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @0 := libcrux_kyber.kyber768.VECTOR_U_COMPRESSION_FACTOR_768;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber768_C1_SIZE_768 =
  let
    mutable
    uu____3799(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3800(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3801(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber768.C1_BLOCK_SIZE_768;
    @0 := libcrux_kyber.kyber768.RANK_768;
    @2 := (*,size_t) @1 @0;
    return @2

  const <0>size_t libcrux_kyber_kyber768_VECTOR_V_COMPRESSION_FACTOR_768 =
  let
    mutable
    uu____3802(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 4size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber768_C2_SIZE_768 =
  let
    mutable
    uu____3803(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3804(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3805(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3806(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @0 := libcrux_kyber.kyber768.VECTOR_V_COMPRESSION_FACTOR_768;
    @2 := (*,size_t) @1 @0;
    @3 := (/,size_t) @2 8size_t;
    return @3

  const <0>size_t libcrux_kyber_kyber768_CPA_PKE_SECRET_KEY_SIZE_768 =
  let
    mutable
    uu____3807(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3808(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3809(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3810(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3811(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3812(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @2 := libcrux_kyber.kyber768.RANK_768;
    @1 := libcrux_kyber.constants.COEFFICIENTS_IN_RING_ELEMENT;
    @3 := (*,size_t) @2 @1;
    @0 := libcrux_kyber.constants.BITS_PER_COEFFICIENT;
    @4 := (*,size_t) @3 @0;
    @5 := (/,size_t) @4 8size_t;
    return @5

  const <0>size_t libcrux_kyber_kyber768_CPA_PKE_PUBLIC_KEY_SIZE_768 =
  let
    mutable
    uu____3813(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3814(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber768.T_AS_NTT_ENCODED_SIZE_768;
    @1 := (+,size_t) @0 32size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber768_CPA_PKE_CIPHERTEXT_SIZE_768 =
  let
    mutable
    uu____3815(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3816(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3817(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.kyber768.C1_SIZE_768;
    @0 := libcrux_kyber.kyber768.C2_SIZE_768;
    @2 := (+,size_t) @1 @0;
    return @2

  const <0>size_t libcrux_kyber_kyber768_SECRET_KEY_SIZE_768 =
  let
    mutable
    uu____3818(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3819(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3820(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3821(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3822(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3823(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3824(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @3 := libcrux_kyber.kyber768.CPA_PKE_SECRET_KEY_SIZE_768;
    @2 := libcrux_kyber.kyber768.CPA_PKE_PUBLIC_KEY_SIZE_768;
    @4 := (+,size_t) @3 @2;
    @1 := libcrux_kyber.constants.H_DIGEST_SIZE;
    @5 := (+,size_t) @4 @1;
    @0 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @6 := (+,size_t) @5 @0;
    return @6

  const <0>size_t libcrux_kyber_kyber768_ETA1 =
  let
    mutable
    uu____3825(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 2size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber768_ETA1_RANDOMNESS_SIZE =
  let
    mutable
    uu____3826(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3827(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber768.ETA1;
    @1 := (*,size_t) @0 64size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber768_ETA2 =
  let
    mutable
    uu____3828(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := 2size_t;
    return @0

  const <0>size_t libcrux_kyber_kyber768_ETA2_RANDOMNESS_SIZE =
  let
    mutable
    uu____3829(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3830(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @0 := libcrux_kyber.kyber768.ETA2;
    @1 := (*,size_t) @0 64size_t;
    return @1

  const <0>size_t libcrux_kyber_kyber768_IMPLICIT_REJECTION_HASH_INPUT_SIZE =
  let
    mutable
    uu____3831(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3832(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3833(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @0 := libcrux_kyber.kyber768.CPA_PKE_CIPHERTEXT_SIZE_768;
    @2 := (+,size_t) @1 @0;
    return @2

  function
  libcrux_kyber_kyber768_generate_key_pair_768
  <cg: 0><0>(
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
  ):
  libcrux_kyber_types_KyberKeyPair[[1184size_t]][[2400size_t]]
  {
    let
    mutable
    uu____3834(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberKeyPair[[1184size_t]][[2400size_t]]
    = $any
    in
    let
    mutable
    uu____3835(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[64size_t]
    = $any
    in
    blitbuf @2 0size_t @0 0size_t 64size_t;
    @1 :=
      libcrux_kyber.generate_keypair 😱
        [[3size_t]]
        [[1152size_t]]
        [[2400size_t]]
        [[1184size_t]]
        [[1152size_t]]
        [[2size_t]]
        [[128size_t]] @0;
    return @1
  }

  function
  libcrux_kyber_kyber768_encapsulate_768
  <cg: 0><0>(
    mutable
    public_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[1184size_t]]*,
    mutable
    randomness(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
  ):
  libcrux_kyber_types_KyberCiphertext[[1088size_t]] * uint8_t[32size_t]
  {
    let
    mutable
    uu____3836(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    libcrux_kyber_types_KyberCiphertext[[1088size_t]] * uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3837(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPublicKey[[1184size_t]]*
    = $any
    in
    let
    mutable
    uu____3838(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    @1 := &((@4: libcrux_kyber_types_KyberPublicKey[[1184size_t]]*)[0uint32_t]);
    blitbuf @3 0size_t @0 0size_t 32size_t;
    @2 :=
      libcrux_kyber.encapsulate 😱
        [[3size_t]]
        [[1088size_t]]
        [[1184size_t]]
        [[1152size_t]]
        [[960size_t]]
        [[128size_t]]
        [[10size_t]]
        [[4size_t]]
        [[320size_t]]
        [[2size_t]]
        [[128size_t]]
        [[2size_t]]
        [[128size_t]] @1 @0;
    return @2
  }

  function
  libcrux_kyber_kyber768_decapsulate_768
  <cg: 0><0>(
    mutable
    secret_key(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[2400size_t]]*,
    mutable
    ciphertext(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[1088size_t]]*
  ):
  uint8_t[32size_t]
  {
    let
    mutable
    uu____3839(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):
    uint8_t[32size_t]
    = $any
    in
    let
    mutable
    uu____3840(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberPrivateKey[[2400size_t]]*
    = $any
    in
    let
    mutable
    uu____3841(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ):

      libcrux_kyber_types_KyberCiphertext[[1088size_t]]*
    = $any
    in
    @1 := &((@4: libcrux_kyber_types_KyberPrivateKey[[2400size_t]]*)[0uint32_t]);
    @0 := &((@3: libcrux_kyber_types_KyberCiphertext[[1088size_t]]*)[0uint32_t]);
    @2 :=
      libcrux_kyber.decapsulate 😱
        [[3size_t]]
        [[2400size_t]]
        [[1152size_t]]
        [[1184size_t]]
        [[1088size_t]]
        [[1152size_t]]
        [[960size_t]]
        [[128size_t]]
        [[10size_t]]
        [[4size_t]]
        [[320size_t]]
        [[2size_t]]
        [[128size_t]]
        [[2size_t]]
        [[128size_t]]
        [[1120size_t]] @1 @0;
    return @2
  }

  const <0>size_t libcrux_kyber_KEY_GENERATION_SEED_SIZE =
  let
    mutable
    uu____3842(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3843(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    let
    mutable
    uu____3844(Mark.MaybeAbsent,(Mark.AtMost 4611686018427387903), ): size_t
    = $any
    in
    @1 := libcrux_kyber.constants.CPA_PKE_KEY_GENERATION_SEED_SIZE;
    @0 := libcrux_kyber.constants.SHARED_SECRET_SIZE;
    @2 := (+,size_t) @1 @0;
    return @2


  external core_iter_range_Step_steps_between <1>:<cg: 0>

    0* ->

      0* ->
      core_option_Option
        size_t


  external core_iter_range_Step_forward_checked <1>:<cg: 0>
    0 ->
    size_t ->
      core_option_Option
        0


  external core_iter_range_Step_backward_checked <1>:<cg: 0>
    0 ->
    size_t ->
      core_option_Option
        0


  external core_cmp_PartialEq_eq <2>:<cg: 0>  1* ->  0* -> bool


  external core_cmp_PartialOrd_partial_cmp <2>:<cg: 0>

    1* ->

      0* ->
      core_option_Option
        core_cmp_Ordering


  external core_cmp_Ord_cmp <1>:<cg: 0>  0* ->  0* -> core_cmp_Ordering

