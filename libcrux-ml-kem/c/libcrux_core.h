/*
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/jonathan/Code/eurydice/eurydice --config ../c.yaml
  ../../libcrux_ml_kem.llbc ../../libcrux_sha3.llbc F* version: 58c915a8 KaRaMeL
  version: 40e3a603
 */

#ifndef __libcrux_core_H
#define __libcrux_core_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "eurydice_glue.h"

typedef struct core_ops_range_Range__size_t_s {
  size_t start;
  size_t end;
} core_ops_range_Range__size_t;

extern uint8_t Eurydice_bitand_pv_u8(uint8_t *x, uint8_t y);

extern uint8_t Eurydice_shr_pv_u8(uint8_t *x, int32_t y);

#define core_option_None 0
#define core_option_Some 1

typedef uint8_t core_option_Option__size_t_tags;

typedef struct core_option_Option__size_t_s {
  core_option_Option__size_t_tags tag;
  size_t f0;
} core_option_Option__size_t;

static inline uint64_t core_num__u64_9__from_le_bytes(uint8_t x0[8U]);

static inline void core_num__u64_9__to_le_bytes(uint64_t x0, uint8_t x1[8U]);

typedef struct libcrux_ml_kem_vector_PortableVector_s {
  int16_t elements[16U];
} libcrux_ml_kem_vector_PortableVector;

#define core_result_Ok 0
#define core_result_Err 1

typedef uint8_t
    core_result_Result__int16_t_16size_t__core_array_TryFromSliceError_tags;

typedef struct libcrux_ml_kem_types_MlKemPublicKey____800size_t_s {
  uint8_t value[800U];
} libcrux_ml_kem_types_MlKemPublicKey____800size_t;

typedef struct
    core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___800size_t___s {
  core_option_Option__size_t_tags tag;
  libcrux_ml_kem_types_MlKemPublicKey____800size_t f0;
} core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___800size_t__;

typedef struct
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_s {
  libcrux_ml_kem_vector_PortableVector coefficients[16U];
} libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector;

typedef struct libcrux_ml_kem_types_MlKemPrivateKey____1632size_t_s {
  uint8_t value[1632U];
} libcrux_ml_kem_types_MlKemPrivateKey____1632size_t;

typedef struct libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t_s {
  libcrux_ml_kem_types_MlKemPrivateKey____1632size_t sk;
  libcrux_ml_kem_types_MlKemPublicKey____800size_t pk;
} libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t;

typedef struct libcrux_ml_kem_types_MlKemCiphertext____768size_t_s {
  uint8_t value[768U];
} libcrux_ml_kem_types_MlKemCiphertext____768size_t;

typedef struct
    K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t__s {
  libcrux_ml_kem_types_MlKemCiphertext____768size_t fst;
  uint8_t snd[32U];
} K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t_;

typedef struct libcrux_ml_kem_types_MlKemPublicKey____1568size_t_s {
  uint8_t value[1568U];
} libcrux_ml_kem_types_MlKemPublicKey____1568size_t;

typedef struct
    core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1568size_t___s {
  core_option_Option__size_t_tags tag;
  libcrux_ml_kem_types_MlKemPublicKey____1568size_t f0;
} core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1568size_t__;

typedef struct libcrux_ml_kem_types_MlKemPrivateKey____3168size_t_s {
  uint8_t value[3168U];
} libcrux_ml_kem_types_MlKemPrivateKey____3168size_t;

typedef struct libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t_s {
  libcrux_ml_kem_types_MlKemPrivateKey____3168size_t sk;
  libcrux_ml_kem_types_MlKemPublicKey____1568size_t pk;
} libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t;

typedef struct libcrux_ml_kem_types_MlKemCiphertext____1568size_t_s {
  uint8_t value[1568U];
} libcrux_ml_kem_types_MlKemCiphertext____1568size_t;

typedef struct
    K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t__s {
  libcrux_ml_kem_types_MlKemCiphertext____1568size_t fst;
  uint8_t snd[32U];
} K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t_;

typedef struct libcrux_ml_kem_types_MlKemPublicKey____1184size_t_s {
  uint8_t value[1184U];
} libcrux_ml_kem_types_MlKemPublicKey____1184size_t;

typedef struct
    core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1184size_t___s {
  core_option_Option__size_t_tags tag;
  libcrux_ml_kem_types_MlKemPublicKey____1184size_t f0;
} core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1184size_t__;

typedef struct
    libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t_s {
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      secret_as_ntt[3U];
} libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t;

typedef struct
    libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t_s {
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      t_as_ntt[3U];
  uint8_t seed_for_A[32U];
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      A_transpose[3U][3U];
} libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t;

typedef struct libcrux_ml_kem_types_MlKemPrivateKey____2400size_t_s {
  uint8_t value[2400U];
} libcrux_ml_kem_types_MlKemPrivateKey____2400size_t;

typedef struct libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t_s {
  libcrux_ml_kem_types_MlKemPrivateKey____2400size_t sk;
  libcrux_ml_kem_types_MlKemPublicKey____1184size_t pk;
} libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t;

typedef struct libcrux_ml_kem_types_MlKemCiphertext____1088size_t_s {
  uint8_t value[1088U];
} libcrux_ml_kem_types_MlKemCiphertext____1088size_t;

typedef struct
    K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t__s {
  libcrux_ml_kem_types_MlKemCiphertext____1088size_t fst;
  uint8_t snd[32U];
} K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t_;

typedef struct
    libcrux_ml_kem_types_MlKemKeyPairUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t_s {
  libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t
      private_key;
  libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t
      public_key;
  uint8_t public_key_hash[32U];
  uint8_t implicit_rejection_value[32U];
} libcrux_ml_kem_types_MlKemKeyPairUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t;

typedef struct
    core_result_Result__uint8_t_8size_t__core_array_TryFromSliceError_s {
  core_result_Result__int16_t_16size_t__core_array_TryFromSliceError_tags tag;
  union {
    uint8_t case_Ok[8U];
    core_array_TryFromSliceError case_Err;
  } val;
} core_result_Result__uint8_t_8size_t__core_array_TryFromSliceError;

void core_result__core__result__Result_T__E___unwrap__uint8_t_8size_t__core_array_TryFromSliceError(
    core_result_Result__uint8_t_8size_t__core_array_TryFromSliceError self,
    uint8_t ret[8U]);

typedef struct K___Eurydice_slice_uint8_t_Eurydice_slice_uint8_t_s {
  Eurydice_slice fst;
  Eurydice_slice snd;
} K___Eurydice_slice_uint8_t_Eurydice_slice_uint8_t;

typedef struct
    K___Eurydice_slice_uint8_t_1size_t__Eurydice_slice_uint8_t_1size_t__s {
  Eurydice_slice fst[1U];
  Eurydice_slice snd[1U];
} K___Eurydice_slice_uint8_t_1size_t__Eurydice_slice_uint8_t_1size_t_;

#if defined(__cplusplus)
}
#endif

#define __libcrux_core_H_DEFINED
#endif
