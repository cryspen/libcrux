/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /home/franziskus/eurydice//eurydice --config ../c.yaml ../../libcrux_ml_kem.llbc
  F* version: <unknown>
  KaRaMeL version: 04cb86b9
 */

#ifndef __libcrux_core_H
#define __libcrux_core_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "eurydice_glue.h"

typedef struct core_ops_range_Range__size_t_s
{
  size_t start;
  size_t end;
}
core_ops_range_Range__size_t;

extern uint8_t Eurydice_bitand_pv_u8(uint8_t *x, uint8_t y);

extern uint8_t Eurydice_shr_pv_u8(uint8_t *x, int32_t y);

#define core_option_None 0
#define core_option_Some 1

typedef uint8_t core_option_Option__size_t_tags;

typedef struct libcrux_ml_kem_types_MlKemPublicKey____800size_t_s { uint8_t value[800U]; }
libcrux_ml_kem_types_MlKemPublicKey____800size_t;

typedef struct core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___800size_t___s
{
  core_option_Option__size_t_tags tag;
  libcrux_ml_kem_types_MlKemPublicKey____800size_t f0;
}
core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___800size_t__;

typedef struct libcrux_ml_kem_types_MlKemPrivateKey____1632size_t_s { uint8_t value[1632U]; }
libcrux_ml_kem_types_MlKemPrivateKey____1632size_t;

typedef struct libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t_s
{
  libcrux_ml_kem_types_MlKemPrivateKey____1632size_t sk;
  libcrux_ml_kem_types_MlKemPublicKey____800size_t pk;
}
libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t;

typedef struct libcrux_ml_kem_types_MlKemCiphertext____768size_t_s { uint8_t value[768U]; }
libcrux_ml_kem_types_MlKemCiphertext____768size_t;

typedef struct K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t__s
{
  libcrux_ml_kem_types_MlKemCiphertext____768size_t fst;
  uint8_t snd[32U];
}
K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t_;

typedef struct libcrux_ml_kem_types_MlKemPublicKey____1568size_t_s { uint8_t value[1568U]; }
libcrux_ml_kem_types_MlKemPublicKey____1568size_t;

typedef struct core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1568size_t___s
{
  core_option_Option__size_t_tags tag;
  libcrux_ml_kem_types_MlKemPublicKey____1568size_t f0;
}
core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1568size_t__;

typedef struct libcrux_ml_kem_types_MlKemPrivateKey____3168size_t_s { uint8_t value[3168U]; }
libcrux_ml_kem_types_MlKemPrivateKey____3168size_t;

typedef struct libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t_s
{
  libcrux_ml_kem_types_MlKemPrivateKey____3168size_t sk;
  libcrux_ml_kem_types_MlKemPublicKey____1568size_t pk;
}
libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t;

typedef struct libcrux_ml_kem_types_MlKemCiphertext____1568size_t_s { uint8_t value[1568U]; }
libcrux_ml_kem_types_MlKemCiphertext____1568size_t;

typedef struct K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t__s
{
  libcrux_ml_kem_types_MlKemCiphertext____1568size_t fst;
  uint8_t snd[32U];
}
K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t_;

typedef struct libcrux_ml_kem_types_MlKemPublicKey____1184size_t_s { uint8_t value[1184U]; }
libcrux_ml_kem_types_MlKemPublicKey____1184size_t;

typedef struct core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1184size_t___s
{
  core_option_Option__size_t_tags tag;
  libcrux_ml_kem_types_MlKemPublicKey____1184size_t f0;
}
core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1184size_t__;

typedef struct libcrux_ml_kem_types_MlKemPrivateKey____2400size_t_s { uint8_t value[2400U]; }
libcrux_ml_kem_types_MlKemPrivateKey____2400size_t;

typedef struct libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t_s
{
  libcrux_ml_kem_types_MlKemPrivateKey____2400size_t sk;
  libcrux_ml_kem_types_MlKemPublicKey____1184size_t pk;
}
libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t;

typedef struct libcrux_ml_kem_types_MlKemCiphertext____1088size_t_s { uint8_t value[1088U]; }
libcrux_ml_kem_types_MlKemCiphertext____1088size_t;

typedef struct K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t__s
{
  libcrux_ml_kem_types_MlKemCiphertext____1088size_t fst;
  uint8_t snd[32U];
}
K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t_;

#if defined(__cplusplus)
}
#endif

#define __libcrux_core_H_DEFINED
#endif
