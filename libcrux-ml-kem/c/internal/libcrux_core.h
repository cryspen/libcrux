/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/jonathan/Code/eurydice/eurydice --config ../c.yaml ../../libcrux_ml_kem.llbc ../../libcrux_sha3.llbc --log Phase2.6,Phase2.7
  F* version: 58c915a8
  KaRaMeL version: 40e3a603
 */

#ifndef __internal_libcrux_core_H
#define __internal_libcrux_core_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "../libcrux_core.h"
#include "eurydice_glue.h"

extern void core_fmt_rt__core__fmt__rt__Argument__a__1__none(core_fmt_rt_Argument x0[0U]);

extern core_fmt_Arguments
core_fmt__core__fmt__Arguments__a__2__new_v1(Eurydice_slice x0, Eurydice_slice x1);

#define CORE_NUM__U32_8__BITS (32U)

static inline uint32_t core_num__u8_6__count_ones(uint8_t x0);

#define LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE ((size_t)32U)

void
libcrux_ml_kem_constant_time_ops_select_shared_secret_in_constant_time(
  Eurydice_slice lhs,
  Eurydice_slice rhs,
  uint8_t selector,
  uint8_t ret[32U]
);

#define LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_COEFFICIENT ((size_t)12U)

#define LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT ((size_t)256U)

#define LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_RING_ELEMENT (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * (size_t)12U)

#define LIBCRUX_ML_KEM_CONSTANTS_BYTES_PER_RING_ELEMENT (LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_ML_KEM_CONSTANTS_CPA_PKE_KEY_GENERATION_SEED_SIZE ((size_t)32U)

#define LIBCRUX_ML_KEM_CONSTANTS_H_DIGEST_SIZE ((size_t)32U)

extern const int16_t libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R[128U];

#define LIBCRUX_ML_KEM_VECTOR_TRAITS_FIELD_ELEMENTS_IN_VECTOR ((size_t)16U)

#define LIBCRUX_ML_KEM_POLYNOMIAL_VECTORS_IN_RING_ELEMENT (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT / LIBCRUX_ML_KEM_VECTOR_TRAITS_FIELD_ELEMENTS_IN_VECTOR)

#define LIBCRUX_ML_KEM_VECTOR_TRAITS_FIELD_MODULUS ((int16_t)3329)

#define LIBCRUX_ML_KEM_VECTOR_TRAITS_INVERSE_OF_MODULUS_MOD_MONTGOMERY_R (62209U)

extern const
uint8_t
libcrux_ml_kem_vector_rej_sample_table_REJECTION_SAMPLE_SHUFFLE_TABLE[256U][16U];

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___add(
  libcrux_ml_kem_vector_PortableVector lhs,
  libcrux_ml_kem_vector_PortableVector *rhs
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___sub(
  libcrux_ml_kem_vector_PortableVector lhs,
  libcrux_ml_kem_vector_PortableVector *rhs
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___multiply_by_constant(
  libcrux_ml_kem_vector_PortableVector v,
  int16_t c
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___cond_subtract_3329(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___barrett_reduce(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress_1(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___ntt_layer_1_step(
  libcrux_ml_kem_vector_PortableVector a,
  int16_t zeta0,
  int16_t zeta1,
  int16_t zeta2,
  int16_t zeta3
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___ntt_layer_2_step(
  libcrux_ml_kem_vector_PortableVector a,
  int16_t zeta0,
  int16_t zeta1
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___ntt_layer_3_step(
  libcrux_ml_kem_vector_PortableVector a,
  int16_t zeta
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___inv_ntt_layer_1_step(
  libcrux_ml_kem_vector_PortableVector a,
  int16_t zeta0,
  int16_t zeta1,
  int16_t zeta2,
  int16_t zeta3
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___inv_ntt_layer_2_step(
  libcrux_ml_kem_vector_PortableVector a,
  int16_t zeta0,
  int16_t zeta1
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___inv_ntt_layer_3_step(
  libcrux_ml_kem_vector_PortableVector a,
  int16_t zeta
);

void
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_1(
  libcrux_ml_kem_vector_PortableVector a,
  uint8_t ret[2U]
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_1(
  Eurydice_slice a
);

void
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_4(
  libcrux_ml_kem_vector_PortableVector a,
  uint8_t ret[8U]
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_4(
  Eurydice_slice a
);

void
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_5(
  libcrux_ml_kem_vector_PortableVector a,
  uint8_t ret[10U]
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_5(
  Eurydice_slice a
);

void
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_10(
  libcrux_ml_kem_vector_PortableVector a,
  uint8_t ret[20U]
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_10(
  Eurydice_slice a
);

void
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_11(
  libcrux_ml_kem_vector_PortableVector a,
  uint8_t ret[22U]
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_11(
  Eurydice_slice a
);

void
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_12(
  libcrux_ml_kem_vector_PortableVector a,
  uint8_t ret[24U]
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_12(
  Eurydice_slice a
);

size_t
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___rej_sample(
  Eurydice_slice a,
  Eurydice_slice out
);

#define LIBCRUX_ML_KEM_VECTOR_TRAITS_MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS ((int16_t)1353)

typedef struct
libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__2size_t_s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  secret_as_ntt[2U];
}
libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__2size_t;

typedef struct
libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__2size_t_s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  t_as_ntt[2U];
  uint8_t seed_for_A[32U];
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  A_transpose[2U][2U];
}
libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__2size_t;

typedef struct
K___libcrux_ml_kem_types_MlKemPrivateKeyUnpacked_libcrux_ml_kem_vector_PortableVector___2size_t___libcrux_ml_kem_types_MlKemPublicKeyUnpacked_libcrux_ml_kem_vector_PortableVector___2size_t___s
{
  libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__2size_t
  fst;
  libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__2size_t snd;
}
K___libcrux_ml_kem_types_MlKemPrivateKeyUnpacked_libcrux_ml_kem_vector_PortableVector___2size_t___libcrux_ml_kem_types_MlKemPublicKeyUnpacked_libcrux_ml_kem_vector_PortableVector___2size_t__;

typedef struct
K____libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_2size_t____size_t__s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  (*fst)[2U];
  size_t *snd;
}
K____libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_2size_t____size_t_;

libcrux_ml_kem_types_MlKemPublicKey____800size_t
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPublicKey_SIZE___14__from___800size_t(
  uint8_t value[800U]
);

libcrux_ml_kem_mlkem512_MlKem512KeyPair
libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemKeyPair_PRIVATE_KEY_SIZE__PUBLIC_KEY_SIZE___from___1632size_t_800size_t(
  libcrux_ml_kem_types_MlKemPrivateKey____1632size_t sk,
  libcrux_ml_kem_types_MlKemPublicKey____800size_t pk
);

libcrux_ml_kem_types_MlKemPrivateKey____1632size_t
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPrivateKey_SIZE___8__from___1632size_t(
  uint8_t value[1632U]
);

typedef struct K___uint8_t_768size_t__uint8_t_800size_t__s
{
  uint8_t fst[768U];
  uint8_t snd[800U];
}
K___uint8_t_768size_t__uint8_t_800size_t_;

libcrux_ml_kem_mlkem512_MlKem512Ciphertext
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___2__from___768size_t(
  uint8_t value[768U]
);

uint8_t
*libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPublicKey_SIZE__18__as_slice___800size_t(
  libcrux_ml_kem_types_MlKemPublicKey____800size_t *self
);

typedef struct
K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_2size_t__uint8_t_s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector fst[2U];
  uint8_t snd;
}
K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_2size_t__uint8_t;

void
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_to_ring_element__libcrux_ml_kem_vector_PortableVector_2size_t(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *rhs
);

uint8_t
libcrux_ml_kem_constant_time_ops_compare_ciphertexts_in_constant_time___768size_t(
  Eurydice_slice lhs,
  Eurydice_slice rhs
);

typedef struct K___Eurydice_slice_uint8_t_192size_t__Eurydice_slice_uint8_t_192size_t__s
{
  Eurydice_slice fst;
  Eurydice_slice snd;
}
K___Eurydice_slice_uint8_t_192size_t__Eurydice_slice_uint8_t_192size_t_;

Eurydice_slice
libcrux_ml_kem_types___core__convert__AsRef__Slice_u8___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___1__as_ref___768size_t(
  libcrux_ml_kem_mlkem512_MlKem512Ciphertext *self
);

void
libcrux_ml_kem_ind_cpa_into_padded_array___800size_t(Eurydice_slice slice, uint8_t ret[800U]);

typedef struct
libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__4size_t_s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  secret_as_ntt[4U];
}
libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__4size_t;

typedef struct
libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__4size_t_s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  t_as_ntt[4U];
  uint8_t seed_for_A[32U];
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  A_transpose[4U][4U];
}
libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__4size_t;

typedef struct
K___libcrux_ml_kem_types_MlKemPrivateKeyUnpacked_libcrux_ml_kem_vector_PortableVector___4size_t___libcrux_ml_kem_types_MlKemPublicKeyUnpacked_libcrux_ml_kem_vector_PortableVector___4size_t___s
{
  libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__4size_t
  fst;
  libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__4size_t snd;
}
K___libcrux_ml_kem_types_MlKemPrivateKeyUnpacked_libcrux_ml_kem_vector_PortableVector___4size_t___libcrux_ml_kem_types_MlKemPublicKeyUnpacked_libcrux_ml_kem_vector_PortableVector___4size_t__;

typedef struct
K____libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_4size_t____size_t__s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  (*fst)[4U];
  size_t *snd;
}
K____libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_4size_t____size_t_;

libcrux_ml_kem_types_MlKemPublicKey____1568size_t
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPublicKey_SIZE___14__from___1568size_t(
  uint8_t value[1568U]
);

libcrux_ml_kem_mlkem1024_MlKem1024KeyPair
libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemKeyPair_PRIVATE_KEY_SIZE__PUBLIC_KEY_SIZE___from___3168size_t_1568size_t(
  libcrux_ml_kem_types_MlKemPrivateKey____3168size_t sk,
  libcrux_ml_kem_types_MlKemPublicKey____1568size_t pk
);

libcrux_ml_kem_types_MlKemPrivateKey____3168size_t
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPrivateKey_SIZE___8__from___3168size_t(
  uint8_t value[3168U]
);

typedef struct K___uint8_t_1536size_t__uint8_t_1568size_t__s
{
  uint8_t fst[1536U];
  uint8_t snd[1568U];
}
K___uint8_t_1536size_t__uint8_t_1568size_t_;

libcrux_ml_kem_mlkem1024_MlKem1024Ciphertext
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___2__from___1568size_t(
  uint8_t value[1568U]
);

uint8_t
*libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPublicKey_SIZE__18__as_slice___1568size_t(
  libcrux_ml_kem_types_MlKemPublicKey____1568size_t *self
);

typedef struct
K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_4size_t__uint8_t_s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector fst[4U];
  uint8_t snd;
}
K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_4size_t__uint8_t;

void
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_to_ring_element__libcrux_ml_kem_vector_PortableVector_4size_t(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *rhs
);

uint8_t
libcrux_ml_kem_constant_time_ops_compare_ciphertexts_in_constant_time___1568size_t(
  Eurydice_slice lhs,
  Eurydice_slice rhs
);

Eurydice_slice
libcrux_ml_kem_types___core__convert__AsRef__Slice_u8___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___1__as_ref___1568size_t(
  libcrux_ml_kem_mlkem1024_MlKem1024Ciphertext *self
);

void
libcrux_ml_kem_ind_cpa_into_padded_array___1600size_t(Eurydice_slice slice, uint8_t ret[1600U]);

typedef struct
K___libcrux_ml_kem_types_MlKemPrivateKeyUnpacked_libcrux_ml_kem_vector_PortableVector___3size_t___libcrux_ml_kem_types_MlKemPublicKeyUnpacked_libcrux_ml_kem_vector_PortableVector___3size_t___s
{
  libcrux_ml_kem_types_MlKemPrivateKeyUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t
  fst;
  libcrux_ml_kem_types_MlKemPublicKeyUnpacked__libcrux_ml_kem_vector_PortableVector__3size_t snd;
}
K___libcrux_ml_kem_types_MlKemPrivateKeyUnpacked_libcrux_ml_kem_vector_PortableVector___3size_t___libcrux_ml_kem_types_MlKemPublicKeyUnpacked_libcrux_ml_kem_vector_PortableVector___3size_t__;

typedef struct
K____libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_3size_t____size_t__s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  (*fst)[3U];
  size_t *snd;
}
K____libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_3size_t____size_t_;

void
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_standard_error_reduce__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *error
);

libcrux_ml_kem_types_MlKemPublicKey____1184size_t
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPublicKey_SIZE___14__from___1184size_t(
  uint8_t value[1184U]
);

libcrux_ml_kem_mlkem768_MlKem768KeyPair
libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemKeyPair_PRIVATE_KEY_SIZE__PUBLIC_KEY_SIZE___from___2400size_t_1184size_t(
  libcrux_ml_kem_types_MlKemPrivateKey____2400size_t sk,
  libcrux_ml_kem_types_MlKemPublicKey____1184size_t pk
);

libcrux_ml_kem_types_MlKemPrivateKey____2400size_t
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPrivateKey_SIZE___8__from___2400size_t(
  uint8_t value[2400U]
);

typedef struct K___uint8_t_1152size_t__uint8_t_1184size_t__s
{
  uint8_t fst[1152U];
  uint8_t snd[1184U];
}
K___uint8_t_1152size_t__uint8_t_1184size_t_;

libcrux_ml_kem_mlkem768_MlKem768Ciphertext
libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___2__from___1088size_t(
  uint8_t value[1088U]
);

uint8_t
*libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPublicKey_SIZE__18__as_slice___1184size_t(
  libcrux_ml_kem_types_MlKemPublicKey____1184size_t *self
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress___5int32_t(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress___4int32_t(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress___11int32_t(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress___10int32_t(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_message_error_reduce__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *message,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector result
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector_traits_decompress_1__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_vector_PortableVector v
);

void
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_error_reduce__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *error
);

typedef struct
K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_3size_t__uint8_t_s
{
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector fst[3U];
  uint8_t snd;
}
K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_3size_t__uint8_t;

libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___ZERO__libcrux_ml_kem_vector_PortableVector(
  void
);

libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___from_i16_array__libcrux_ml_kem_vector_PortableVector(
  Eurydice_slice a
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector_traits_to_unsigned_representative__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_vector_PortableVector a
);

libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___subtract_reduce__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector b
);

void
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_to_ring_element__libcrux_ml_kem_vector_PortableVector_3size_t(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *rhs
);

libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___ntt_multiply__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self,
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *rhs
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___decompress_ciphertext_coefficient___5int32_t(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___decompress_ciphertext_coefficient___4int32_t(
  libcrux_ml_kem_vector_PortableVector v
);

void
libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___poly_barrett_reduce__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector *self
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector_traits_montgomery_multiply_fe__libcrux_ml_kem_vector_PortableVector(
  libcrux_ml_kem_vector_PortableVector v,
  int16_t fer
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___decompress_ciphertext_coefficient___11int32_t(
  libcrux_ml_kem_vector_PortableVector v
);

libcrux_ml_kem_vector_PortableVector
libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___decompress_ciphertext_coefficient___10int32_t(
  libcrux_ml_kem_vector_PortableVector v
);

uint8_t
libcrux_ml_kem_constant_time_ops_compare_ciphertexts_in_constant_time___1088size_t(
  Eurydice_slice lhs,
  Eurydice_slice rhs
);

typedef struct K___Eurydice_slice_uint8_t_128size_t__Eurydice_slice_uint8_t_128size_t__s
{
  Eurydice_slice fst;
  Eurydice_slice snd;
}
K___Eurydice_slice_uint8_t_128size_t__Eurydice_slice_uint8_t_128size_t_;

void
libcrux_ml_kem_ind_cpa_into_padded_array___33size_t(Eurydice_slice slice, uint8_t ret[33U]);

typedef struct core_result_Result__uint8_t_32size_t__core_array_TryFromSliceError_s
{
  core_result_Result__int16_t_16size_t__core_array_TryFromSliceError_tags tag;
  union {
    uint8_t case_Ok[32U];
    core_array_TryFromSliceError case_Err;
  }
  val;
}
core_result_Result__uint8_t_32size_t__core_array_TryFromSliceError;

void
core_result__core__result__Result_T__E___unwrap__uint8_t_32size_t__core_array_TryFromSliceError(
  core_result_Result__uint8_t_32size_t__core_array_TryFromSliceError self,
  uint8_t ret[32U]
);

void
libcrux_ml_kem_ind_cpa_into_padded_array___34size_t(Eurydice_slice slice, uint8_t ret[34U]);

typedef struct K___Eurydice_slice_uint8_t_168size_t__Eurydice_slice_uint8_t_168size_t__s
{
  Eurydice_slice fst;
  Eurydice_slice snd;
}
K___Eurydice_slice_uint8_t_168size_t__Eurydice_slice_uint8_t_168size_t_;

typedef struct K___Eurydice_slice_uint8_t_504size_t__Eurydice_slice_uint8_t_504size_t__s
{
  Eurydice_slice fst;
  Eurydice_slice snd;
}
K___Eurydice_slice_uint8_t_504size_t__Eurydice_slice_uint8_t_504size_t_;

Eurydice_slice
libcrux_ml_kem_types___core__convert__AsRef__Slice_u8___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___1__as_ref___1088size_t(
  libcrux_ml_kem_mlkem768_MlKem768Ciphertext *self
);

void
libcrux_ml_kem_ind_cpa_into_padded_array___1120size_t(Eurydice_slice slice, uint8_t ret[1120U]);

void
libcrux_ml_kem_ind_cpa_into_padded_array___64size_t(Eurydice_slice slice, uint8_t ret[64U]);

typedef struct core_result_Result__uint8_t_24size_t__core_array_TryFromSliceError_s
{
  core_result_Result__int16_t_16size_t__core_array_TryFromSliceError_tags tag;
  union {
    uint8_t case_Ok[24U];
    core_array_TryFromSliceError case_Err;
  }
  val;
}
core_result_Result__uint8_t_24size_t__core_array_TryFromSliceError;

void
core_result__core__result__Result_T__E___unwrap__uint8_t_24size_t__core_array_TryFromSliceError(
  core_result_Result__uint8_t_24size_t__core_array_TryFromSliceError self,
  uint8_t ret[24U]
);

typedef struct core_result_Result__uint8_t_20size_t__core_array_TryFromSliceError_s
{
  core_result_Result__int16_t_16size_t__core_array_TryFromSliceError_tags tag;
  union {
    uint8_t case_Ok[20U];
    core_array_TryFromSliceError case_Err;
  }
  val;
}
core_result_Result__uint8_t_20size_t__core_array_TryFromSliceError;

void
core_result__core__result__Result_T__E___unwrap__uint8_t_20size_t__core_array_TryFromSliceError(
  core_result_Result__uint8_t_20size_t__core_array_TryFromSliceError self,
  uint8_t ret[20U]
);

typedef struct core_result_Result__uint8_t_10size_t__core_array_TryFromSliceError_s
{
  core_result_Result__int16_t_16size_t__core_array_TryFromSliceError_tags tag;
  union {
    uint8_t case_Ok[10U];
    core_array_TryFromSliceError case_Err;
  }
  val;
}
core_result_Result__uint8_t_10size_t__core_array_TryFromSliceError;

void
core_result__core__result__Result_T__E___unwrap__uint8_t_10size_t__core_array_TryFromSliceError(
  core_result_Result__uint8_t_10size_t__core_array_TryFromSliceError self,
  uint8_t ret[10U]
);

typedef struct K___Eurydice_slice_uint8_t_4size_t__Eurydice_slice_uint8_t_4size_t__s
{
  Eurydice_slice fst[4U];
  Eurydice_slice snd[4U];
}
K___Eurydice_slice_uint8_t_4size_t__Eurydice_slice_uint8_t_4size_t_;

#if defined(__cplusplus)
}
#endif

#define __internal_libcrux_core_H_DEFINED
#endif
