use crate::{
    aes_ctr::{
        aes128_ctr_encrypt, aes128_ctr_init, aes128_ctr_key_block, aes128_ctr_set_nonce,
        aes128_ctr_update, aes128_ctr_xor_block, aes128_ctr_xor_blocks, AES128_CTR_Context,
    },
    gf128_generic::{
        self, gf128_emit, gf128_init, gf128_update, gf128_update_blocks, gf128_update_last,
        gf128_update_padded, GF128State,
    },
    platform::{AESState, GF128FieldElement},
};

#[allow(non_snake_case_types)]
pub struct AES128_GCM_State<T: AESState, U: GF128FieldElement> {
    aes_state: AES128_CTR_Context<T>,
    gcm_state: GF128State<U>,
    tag_mix: [u8; 16],
}

pub fn aes128_gcm_init<T: AESState, U: GF128FieldElement>(key: &[u8]) -> AES128_GCM_State<T, U> {
    debug_assert!(key.len() == 16);
    let nonce = [0u8; 12];
    let mut gcm_key = [0u8; 16];
    let tag_mix = [0u8; 16];
    let aes_state = aes128_ctr_init(key, &nonce);
    aes128_ctr_key_block(&aes_state, 0, &mut gcm_key);
    let gcm_state = gf128_init(&gcm_key);
    AES128_GCM_State {
        aes_state,
        gcm_state,
        tag_mix,
    }
}

pub fn aes128_gcm_set_nonce<T: AESState, U: GF128FieldElement>(
    st: &mut AES128_GCM_State<T, U>,
    nonce: &[u8],
) {
    debug_assert!(nonce.len() == 12);
    aes128_ctr_set_nonce(&mut st.aes_state, nonce);
    aes128_ctr_key_block(&st.aes_state, 1, &mut st.tag_mix);
}

pub fn aes128_gcm_encrypt<T: AESState, U: GF128FieldElement>(
    st: &mut AES128_GCM_State<T, U>,
    aad: &[u8],
    plaintext: &[u8],
    ciphertext: &mut [u8],
    tag: &mut [u8],
) {
    debug_assert!(ciphertext.len() == plaintext.len());
    debug_assert!(plaintext.len() / 16 <= u32::MAX as usize);
    debug_assert!(tag.len() == 16);
    aes128_ctr_update(&st.aes_state, 2, plaintext, ciphertext);
    gf128_update_padded(&mut st.gcm_state, aad);
    gf128_update_padded(&mut st.gcm_state, ciphertext);
    let mut last_block = [0u8; 16];
    last_block[0..8].copy_from_slice(&((aad.len() as u64) * 8).to_be_bytes());
    last_block[8..16].copy_from_slice(&((plaintext.len() as u64) * 8).to_be_bytes());
    gf128_update(&mut st.gcm_state, &last_block);
    gf128_emit(&st.gcm_state, tag);
    for i in 0..16 {
        tag[i] ^= st.tag_mix[i];
    }
}

pub struct DecryptError();

pub fn aes128_gcm_decrypt<T: AESState, U: GF128FieldElement>(
    st: &mut AES128_GCM_State<T, U>,
    aad: &[u8],
    ciphertext: &[u8],
    tag: &[u8],
    plaintext: &mut [u8],
) -> Result<(), DecryptError> {
    debug_assert!(plaintext.len() == ciphertext.len());
    debug_assert!(ciphertext.len() / 16 <= u32::MAX as usize);
    debug_assert!(tag.len() == 16);
    gf128_update_padded(&mut st.gcm_state, aad);
    gf128_update_padded(&mut st.gcm_state, ciphertext);
    let mut last_block = [0u8; 16];
    last_block[0..8].copy_from_slice(&((aad.len() as u64) * 8).to_be_bytes());
    last_block[8..16].copy_from_slice(&((plaintext.len() as u64) * 8).to_be_bytes());
    gf128_update(&mut st.gcm_state, &last_block);
    let mut computed_tag = [0u8; 16];
    gf128_emit(&st.gcm_state, &mut computed_tag);
    for i in 0..16 {
        computed_tag[i] ^= st.tag_mix[i];
    }
    let mut eq_mask = 0u8;
    for i in 0..16 {
        eq_mask |= computed_tag[i] ^ tag[i];
    }
    if eq_mask == 0 {
        aes128_ctr_update(&st.aes_state, 2, ciphertext, plaintext);
        Ok(())
    } else {
        Err(DecryptError())
    }
}

#[cfg(test)]
mod test {
    use crate::platform::{self, portable};

    use super::{aes128_gcm_encrypt, aes128_gcm_init, aes128_gcm_set_nonce};

    const input1: [u8; 60] = [
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26,
        0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31,
        0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49,
        0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39,
    ];
    const key1: [u8; 16] = [
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83,
        0x08,
    ];
    const nonce1: [u8; 12] = [
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
    ];
    const aad1: [u8; 20] = [
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe,
        0xef, 0xab, 0xad, 0xda, 0xd2,
    ];
    const expected1: [u8; 76] = [
        0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24, 0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4,
        0x9c, 0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0, 0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac,
        0xa1, 0x2e, 0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c, 0x7d, 0x8f, 0x6a, 0x5a, 0xac,
        0x84, 0xaa, 0x05, 0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97, 0x3d, 0x58, 0xe0, 0x91,
        0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb, 0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a,
        0x47,
    ];

    const input2: [u8; 652] = [
        0x08, 0x00, 0x00, 0x1e, 0x00, 0x1c, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1d, 0x00,
        0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04,
        0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x01, 0xb9, 0x00, 0x00, 0x01, 0xb5, 0x00, 0x01, 0xb0,
        0x30, 0x82, 0x01, 0xac, 0x30, 0x82, 0x01, 0x15, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01,
        0x02, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
        0x00, 0x30, 0x0e, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72,
        0x73, 0x61, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32,
        0x33, 0x35, 0x39, 0x5a, 0x17, 0x0d, 0x32, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32,
        0x33, 0x35, 0x39, 0x5a, 0x30, 0x0e, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x03,
        0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
        0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89,
        0x02, 0x81, 0x81, 0x00, 0xb4, 0xbb, 0x49, 0x8f, 0x82, 0x79, 0x30, 0x3d, 0x98, 0x08, 0x36,
        0x39, 0x9b, 0x36, 0xc6, 0x98, 0x8c, 0x0c, 0x68, 0xde, 0x55, 0xe1, 0xbd, 0xb8, 0x26, 0xd3,
        0x90, 0x1a, 0x24, 0x61, 0xea, 0xfd, 0x2d, 0xe4, 0x9a, 0x91, 0xd0, 0x15, 0xab, 0xbc, 0x9a,
        0x95, 0x13, 0x7a, 0xce, 0x6c, 0x1a, 0xf1, 0x9e, 0xaa, 0x6a, 0xf9, 0x8c, 0x7c, 0xed, 0x43,
        0x12, 0x09, 0x98, 0xe1, 0x87, 0xa8, 0x0e, 0xe0, 0xcc, 0xb0, 0x52, 0x4b, 0x1b, 0x01, 0x8c,
        0x3e, 0x0b, 0x63, 0x26, 0x4d, 0x44, 0x9a, 0x6d, 0x38, 0xe2, 0x2a, 0x5f, 0xda, 0x43, 0x08,
        0x46, 0x74, 0x80, 0x30, 0x53, 0x0e, 0xf0, 0x46, 0x1c, 0x8c, 0xa9, 0xd9, 0xef, 0xbf, 0xae,
        0x8e, 0xa6, 0xd1, 0xd0, 0x3e, 0x2b, 0xd1, 0x93, 0xef, 0xf0, 0xab, 0x9a, 0x80, 0x02, 0xc4,
        0x74, 0x28, 0xa6, 0xd3, 0x5a, 0x8d, 0x88, 0xd7, 0x9f, 0x7f, 0x1e, 0x3f, 0x02, 0x03, 0x01,
        0x00, 0x01, 0xa3, 0x1a, 0x30, 0x18, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02,
        0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0,
        0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
        0x03, 0x81, 0x81, 0x00, 0x85, 0xaa, 0xd2, 0xa0, 0xe5, 0xb9, 0x27, 0x6b, 0x90, 0x8c, 0x65,
        0xf7, 0x3a, 0x72, 0x67, 0x17, 0x06, 0x18, 0xa5, 0x4c, 0x5f, 0x8a, 0x7b, 0x33, 0x7d, 0x2d,
        0xf7, 0xa5, 0x94, 0x36, 0x54, 0x17, 0xf2, 0xea, 0xe8, 0xf8, 0xa5, 0x8c, 0x8f, 0x81, 0x72,
        0xf9, 0x31, 0x9c, 0xf3, 0x6b, 0x7f, 0xd6, 0xc5, 0x5b, 0x80, 0xf2, 0x1a, 0x03, 0x01, 0x51,
        0x56, 0x72, 0x60, 0x96, 0xfd, 0x33, 0x5e, 0x5e, 0x67, 0xf2, 0xdb, 0xf1, 0x02, 0x70, 0x2e,
        0x60, 0x8c, 0xca, 0xe6, 0xbe, 0xc1, 0xfc, 0x63, 0xa4, 0x2a, 0x99, 0xbe, 0x5c, 0x3e, 0xb7,
        0x10, 0x7c, 0x3c, 0x54, 0xe9, 0xb9, 0xeb, 0x2b, 0xd5, 0x20, 0x3b, 0x1c, 0x3b, 0x84, 0xe0,
        0xa8, 0xb2, 0xf7, 0x59, 0x40, 0x9b, 0xa3, 0xea, 0xc9, 0xd9, 0x1d, 0x40, 0x2d, 0xcc, 0x0c,
        0xc8, 0xf8, 0x96, 0x12, 0x29, 0xac, 0x91, 0x87, 0xb4, 0x2b, 0x4d, 0xe1, 0x00, 0x00, 0x0f,
        0x00, 0x00, 0x84, 0x08, 0x04, 0x00, 0x80, 0x45, 0x47, 0xd6, 0x16, 0x8f, 0x25, 0x10, 0xc5,
        0x50, 0xbd, 0x94, 0x9c, 0xd2, 0xbc, 0x63, 0x1f, 0xf1, 0x34, 0xfa, 0x10, 0xa8, 0x27, 0xff,
        0x69, 0xb1, 0x66, 0xa6, 0xbd, 0x95, 0xe2, 0x49, 0xed, 0x0d, 0xaf, 0x57, 0x15, 0x92, 0xeb,
        0xbe, 0x9f, 0xf1, 0x3d, 0xe6, 0xb0, 0x3a, 0xcc, 0x21, 0x81, 0x46, 0x78, 0x1f, 0x69, 0x3b,
        0x5a, 0x69, 0x2b, 0x73, 0x19, 0xd7, 0x4f, 0xd2, 0xe5, 0x3b, 0x6a, 0x2d, 0xf0, 0xf6, 0x78,
        0x5d, 0x62, 0x4f, 0x02, 0x4a, 0x44, 0x03, 0x0c, 0xa0, 0x0b, 0x86, 0x9a, 0xe8, 0x1a, 0x53,
        0x2b, 0x19, 0xe4, 0x7e, 0x52, 0x5f, 0xf4, 0xa6, 0x2c, 0x51, 0xa5, 0x88, 0x9e, 0xb5, 0x65,
        0xfe, 0xe2, 0x68, 0x59, 0x0d, 0x8a, 0x3c, 0xa3, 0xc1, 0xbc, 0x3b, 0xd5, 0x40, 0x4e, 0x39,
        0x72, 0x0c, 0xa2, 0xea, 0xee, 0x30, 0x8f, 0x4e, 0x07, 0x00, 0x76, 0x1e, 0x98, 0x63, 0x89,
        0x14, 0x00, 0x00, 0x20, 0x9e, 0xfe, 0xe0, 0x3e, 0xbf, 0xfb, 0xc0, 0xdc, 0x23, 0xd2, 0x6d,
        0x95, 0x87, 0x44, 0xc0, 0x9e, 0x30, 0x00, 0x47, 0x7e, 0xff, 0x7a, 0xe3, 0x14, 0x8a, 0x50,
        0xe5, 0x67, 0x00, 0x13, 0xaa, 0xaa, 0x16,
    ];

    const key2: [u8; 16] = [
        0xfd, 0xa2, 0xa4, 0x40, 0x46, 0x70, 0x80, 0x8f, 0x49, 0x37, 0x47, 0x8b, 0x8b, 0x6e, 0x3f,
        0xe1,
    ];
    const nonce2: [u8; 12] = [
        0xb5, 0xf3, 0xa3, 0xfa, 0xe1, 0xcb, 0x25, 0xc9, 0xdc, 0xd7, 0x39, 0x93,
    ];
    const aad2: [u8; 0] = [];

    const expected2: [u8; 668] = [
        0xc1, 0xe6, 0x31, 0xf8, 0x1d, 0x2a, 0xf2, 0x21, 0xeb, 0xb6, 0xa9, 0x57, 0xf5, 0x8f, 0x3e,
        0xe2, 0x66, 0x27, 0x26, 0x35, 0xe6, 0x7f, 0x99, 0xa7, 0x52, 0xf0, 0xdf, 0x08, 0xad, 0xeb,
        0x33, 0xba, 0xb8, 0x61, 0x1e, 0x55, 0xf3, 0x3d, 0x72, 0xcf, 0x84, 0x38, 0x24, 0x61, 0xa8,
        0xbf, 0xe0, 0xa6, 0x59, 0xba, 0x2d, 0xd1, 0x87, 0x3f, 0x6f, 0xcc, 0x70, 0x7a, 0x98, 0x41,
        0xce, 0xfc, 0x1f, 0xb0, 0x35, 0x26, 0xb9, 0xca, 0x4f, 0xe3, 0x43, 0xe5, 0x80, 0x5e, 0x95,
        0xa5, 0xc0, 0x1e, 0x56, 0x57, 0x06, 0x38, 0xa7, 0x6a, 0x4b, 0xc8, 0xfe, 0xb0, 0x7b, 0xe8,
        0x79, 0xf9, 0x05, 0x68, 0x61, 0x7d, 0x90, 0x5f, 0xec, 0xd5, 0xb1, 0x61, 0x9f, 0xb8, 0xec,
        0x4a, 0x66, 0x28, 0xd1, 0xbb, 0x2b, 0xb2, 0x24, 0xc4, 0x90, 0xff, 0x97, 0xa6, 0xc0, 0xe9,
        0xac, 0xd0, 0x36, 0x04, 0xbc, 0x3a, 0x59, 0xd8, 0x6b, 0xda, 0xb4, 0xe0, 0x84, 0xc1, 0xc1,
        0x45, 0x0f, 0x9c, 0x9d, 0x2a, 0xfe, 0xb1, 0x72, 0xc0, 0x72, 0x34, 0xd7, 0x39, 0x86, 0x8e,
        0xbd, 0x62, 0xde, 0x20, 0x60, 0xa8, 0xde, 0x98, 0x94, 0x14, 0xa8, 0x29, 0x20, 0xda, 0xcd,
        0x1c, 0xac, 0x0c, 0x6e, 0x72, 0xec, 0xd7, 0xf4, 0x01, 0x85, 0x74, 0xce, 0xac, 0xa6, 0xd2,
        0x9f, 0x36, 0x1b, 0xc3, 0x7e, 0xe2, 0x88, 0x8b, 0x8e, 0x30, 0x2c, 0xa9, 0x56, 0x1a, 0x9d,
        0xe9, 0x16, 0x3e, 0xdf, 0xa6, 0x6b, 0xad, 0xd4, 0x89, 0x48, 0x84, 0xc7, 0xb3, 0x59, 0xbc,
        0xac, 0xae, 0x59, 0x08, 0x05, 0x1b, 0x37, 0x95, 0x2e, 0x10, 0xa4, 0x5f, 0xe7, 0x3f, 0xda,
        0x12, 0x6e, 0xbd, 0x67, 0x57, 0x5f, 0x1b, 0xed, 0x8a, 0x99, 0x2a, 0x89, 0x47, 0x4d, 0x7d,
        0xec, 0x1e, 0xed, 0x32, 0x78, 0x24, 0x12, 0x3a, 0x41, 0x4a, 0xdb, 0x66, 0xd5, 0xef, 0x7d,
        0x08, 0x36, 0xff, 0x98, 0xc2, 0xcd, 0xd7, 0xfb, 0x07, 0x81, 0xe1, 0x92, 0xbf, 0x0c, 0x75,
        0x68, 0xbf, 0x7d, 0x89, 0x0a, 0x51, 0xc3, 0x32, 0x87, 0x9b, 0x50, 0x37, 0xb2, 0x12, 0xd6,
        0x22, 0x41, 0x2c, 0xa4, 0x8e, 0x83, 0x23, 0x81, 0x7b, 0xd6, 0xd7, 0x46, 0xee, 0xf6, 0x83,
        0x84, 0x5c, 0xec, 0x4e, 0x3e, 0xf6, 0x4b, 0x3a, 0x18, 0xfc, 0xce, 0x51, 0x3e, 0xa9, 0x51,
        0xf3, 0x36, 0x66, 0x93, 0xa7, 0xff, 0x49, 0x0d, 0x09, 0xd0, 0x8a, 0xb1, 0xf6, 0x3e, 0x13,
        0x62, 0x5a, 0x54, 0x59, 0x61, 0x59, 0x9c, 0x0d, 0x9c, 0x7a, 0x09, 0x9d, 0x11, 0x63, 0xca,
        0xd1, 0xb9, 0xbc, 0xf8, 0xe9, 0x17, 0xd7, 0x66, 0xb9, 0x88, 0x53, 0xef, 0x68, 0x77, 0x83,
        0x4f, 0x89, 0x1d, 0xf1, 0x6b, 0xe1, 0xfc, 0xc9, 0xc1, 0x8e, 0xa1, 0x88, 0x2e, 0xa3, 0xf1,
        0xf4, 0xb6, 0x43, 0x58, 0xe1, 0xb1, 0x46, 0xce, 0xbf, 0xb3, 0xe0, 0x2e, 0x15, 0x3f, 0xdb,
        0x73, 0xaf, 0x26, 0x93, 0xf2, 0x2c, 0x6f, 0x59, 0x3f, 0xa4, 0x75, 0x38, 0x0b, 0xa6, 0x61,
        0x17, 0x40, 0xad, 0x20, 0xe3, 0x19, 0xa6, 0x54, 0xac, 0x56, 0x84, 0x77, 0x52, 0x36, 0x16,
        0x2e, 0x84, 0x47, 0xed, 0x80, 0x88, 0x61, 0xbf, 0xbd, 0xa6, 0xe1, 0x8e, 0xc9, 0x7a, 0xe0,
        0x90, 0xbf, 0x70, 0x34, 0x75, 0xcf, 0xb9, 0x0f, 0xe2, 0x0a, 0x3c, 0x55, 0xbe, 0xf6, 0xf5,
        0xeb, 0xa6, 0xe6, 0xa1, 0xda, 0x6a, 0x19, 0x96, 0xb8, 0xbd, 0xe4, 0x21, 0x80, 0x60, 0x8c,
        0xa2, 0x27, 0x9d, 0xef, 0x8e, 0x81, 0x53, 0x89, 0x5c, 0xc8, 0x50, 0xdb, 0x64, 0x20, 0x56,
        0x1c, 0x04, 0xb5, 0x72, 0x9c, 0xc6, 0x88, 0x34, 0x36, 0xea, 0x02, 0xee, 0x07, 0xeb, 0x9b,
        0xae, 0xe2, 0xfb, 0x3a, 0x9e, 0x1b, 0xbd, 0xa8, 0x73, 0x0d, 0x6b, 0x22, 0x05, 0x76, 0xe2,
        0x4d, 0xf7, 0x0a, 0xf6, 0x92, 0x8e, 0xb8, 0x65, 0xfe, 0xe8, 0xa1, 0xd1, 0xc0, 0xf1, 0x81,
        0x8a, 0xca, 0x68, 0xd5, 0x00, 0x2a, 0xe4, 0xc6, 0x5b, 0x2f, 0x49, 0xc9, 0xe6, 0xe2, 0x1d,
        0xcf, 0x76, 0x78, 0x4a, 0xdb, 0xd0, 0xe8, 0x87, 0xa3, 0x68, 0x32, 0xef, 0x85, 0xbe, 0xb1,
        0x05, 0x87, 0xf1, 0x6c, 0x6f, 0xfe, 0x60, 0xd7, 0x45, 0x10, 0x59, 0xec, 0x7f, 0x10, 0x14,
        0xc3, 0xef, 0xe1, 0x9e, 0x56, 0xae, 0xdb, 0x5a, 0xd3, 0x1a, 0x9f, 0x29, 0xdc, 0x44, 0x58,
        0xcf, 0xbf, 0x0c, 0x70, 0x70, 0xc1, 0x75, 0xdc, 0xad, 0x46, 0xe1, 0x67, 0x52, 0x26, 0xb4,
        0x7c, 0x07, 0x1a, 0xad, 0x31, 0x72, 0xeb, 0xd3, 0x3e, 0x45, 0xd7, 0x41, 0xcb, 0x91, 0x25,
        0x3a, 0x01, 0xa6, 0x9a, 0xe3, 0xcc, 0x29, 0x2b, 0xce, 0x9c, 0x03, 0x24, 0x6a, 0xc9, 0x51,
        0xe4, 0x5e, 0x97, 0xeb, 0xf0, 0x4a, 0x9d, 0x51, 0xfa, 0xb5, 0xcf, 0x06, 0xd9, 0x48, 0x5c,
        0xce, 0x74, 0x6b, 0x1c, 0x07, 0x7b, 0xe6, 0x9a, 0xd1, 0x53, 0xf1, 0x65, 0x6e, 0xf8, 0x9f,
        0xc7, 0xd1, 0xed, 0x8c, 0x3e, 0x2d, 0xa7, 0xa2,
    ];

    #[test]
    fn test_gcm1() {
        let mut computed1 = [0u8; 76];
        let mut st = aes128_gcm_init::<portable::State, portable::FieldElement>(&key1);
        aes128_gcm_set_nonce(&mut st, &nonce1);
        let (mut ciphertext, mut tag) = computed1.split_at_mut(60);
        aes128_gcm_encrypt(&mut st, &aad1, &input1, &mut ciphertext, &mut tag);
        for i in 0..76 {
            if computed1[i] != expected1[i] {
                println!(
                    "mismatch at {}: expected is {}, computed is {}",
                    i, expected1[i], computed1[i]
                )
            }
        }
    }

    #[test]
    fn test_gcm2() {
        let mut computed2 = [0u8; 668];
        let mut st = aes128_gcm_init::<portable::State, portable::FieldElement>(&key2);
        aes128_gcm_set_nonce(&mut st, &nonce2);
        let (mut ciphertext, mut tag) = computed2.split_at_mut(652);
        aes128_gcm_encrypt(&mut st, &aad2, &input2, &mut ciphertext, &mut tag);
        for i in 0..668 {
            if computed2[i] != expected2[i] {
                println!(
                    "mismatch at {}: expected is {}, computed is {}",
                    i, expected2[i], computed2[i]
                )
            }
        }
    }
}
